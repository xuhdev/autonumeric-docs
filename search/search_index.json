{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AutoNumeric.js documentation","text":""},{"location":"#what-is-autonumeric","title":"What is AutoNumeric?","text":"<p>AutoNumeric is a standalone Javascript library that provides live as-you-type formatting for international numbers and currencies.</p>"},{"location":"#feature-overview","title":"Feature Overview","text":"<p>Our mission is to provide a JS library to create and manage easy-to-use and logical user experience for inputing numeric values in forms.</p> <p>AutoNumeric main features are:</p>"},{"location":"#easy-to-use-and-configure","title":"Easy to use and configure","text":"<pre><code>// Initialization\nnew AutoNumeric('.myInput', { currencySymbol : '$' });\n</code></pre>"},{"location":"#very-high-configurability","title":"Very high configurability","text":"<p>...with more than 40 options are available. <pre><code>// The options are...optional :)\nconst autoNumericOptionsEuro = {\ndigitGroupSeparator        : '.',\ndecimalCharacter           : ',',\ndecimalCharacterAlternative: '.',\ncurrencySymbol             : '\\u202f\u20ac',\ncurrencySymbolPlacement    : AutoNumeric.options.currencySymbolPlacement.suffix,\nroundingMethod             : AutoNumeric.options.roundingMethod.halfUpSymmetric,\n};\n// Initialization\nnew AutoNumeric(domElement, autoNumericOptionsEuro);\n</code></pre></p>"},{"location":"#user-experience-oriented","title":"User experience oriented","text":"<p>Using AutoNumeric just feels right and natural, specially with the function chaining feature <pre><code>anElement.french()\n.set(42)\n.update({ options })\n.formSubmitJsonNumericString(callback)\n.clear();\n</code></pre></p>"},{"location":"#supports-most-international-numeric-formats-and-currencies","title":"Supports most international numeric formats and currencies","text":"<p>If the one you use is not supported yet, please open an issue and we'll add it as soon as possible!</p>"},{"location":"#mobile-support","title":"Mobile support","text":"<p>The mobile Android Chrome browser is partially supported.</p>"},{"location":"#and-also","title":"And also...","text":"<ul> <li>Any number of different formats can be used at the same time on the same page.Each input can be configured by either setting the options as HTML5 data attributes, or directly passed as an argument in the Javascript code</li> <li>The settings can easily be changed at any time using the <code>update</code> method or via a callback</li> <li>AutoNumeric supports <code>input</code> elements as well as most text elements with the <code>contenteditable</code> attribute, allowing you to place formatted numbers and currencies on just about any part of your pages</li> <li>AutoNumeric elements can be linked together allowing you to perform one action on multiple elements at once</li> <li>8 pre-defined currency options as well as 33 pre-defined common options allows you to directly use AutoNumeric by skipping the option configuration step</li> <li>26 built-in methods gives you the flexibility needed to use AutoNumeric to its full potential</li> <li>22 global methods that allows to control sets of AutoNumeric-managed elements at once</li> <li>21 additional methods specialized for managing form management and submission</li> <li>A formula mode that allows to quickly enter and evaluate math expressions inside the element</li> <li>17 static functions provided by the <code>AutoNumeric</code> class, which can be used in Web Workers</li> <li>And more than 50 options allowing you to precisely customize your number and currency format and behavior</li> </ul> <p>With that said, AutoNumeric supports most international numeric formats and currencies including those used in Europe, Asia, and North and South America.</p>"},{"location":"#try-autonumeric","title":"Try AutoNumeric!","text":"<p>If you want to try AutoNumeric, please check the demo page. There, you'll also have links to the additional AutoNumeric tools.</p>"},{"location":"#which-version-should-i-use","title":"Which version should I use?","text":"<p>The latest stable branch is always on <code>master</code>. Currently this is version 4.6.*.</p> <p>However, most of the development in done on the <code>next</code> branch, with <code>master</code> being updated sparsely.</p> <p>If you want to try the new features, you can check out the latest development version in the <code>next</code> branch. That branch can see changes in the API (check the semver), however it's still very stable and bug-free (as far as we know) since it's always fully tested for regressions.</p> <p>Tip</p> <p><code>next</code> is the preferred branch to use in production. Use <code>master</code> only if you do not need fixes quickly and are prepared to wait a few years between releases.</p>"},{"location":"#older-versions-v19-and-v2","title":"Older versions (v1.9 and v2)","text":"<p>If you are still using the old deprecated versions <code>1.9</code> and <code>2</code>, you can follow our guide for easily upgrading from those versions to the current version <code>4</code>.</p>"},{"location":"#whats-next","title":"What's next?","text":"<p>You can check what could be the next features coming to AutoNumeric on the projects page (feel free to participate!).</p>"},{"location":"About/about/","title":"Credits","text":"<p>Thanks to all the contributors over the years for making AutoNumeric a reality!</p>"},{"location":"About/about/#authors","title":"Authors","text":"<p>You can find a list of the contributors here and there.</p>"},{"location":"About/documention%20license/","title":"AutoNumeric Documentation License","text":""},{"location":"About/documention%20license/#creative-commons-attribution-noncommercial-sharealike-40-international-public-license","title":"Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International Public License","text":"<p>By exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International Public License (\"Public License\"). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions.</p>"},{"location":"About/documention%20license/#section-1-definitions","title":"Section 1 \u2013 Definitions.","text":"<p>a. Adapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image.</p> <p>b. Adapter's License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License.</p> <p>c. BY-NC-SA Compatible License means a license listed at creativecommons.org/compatiblelicenses, approved by Creative Commons as essentially the equivalent of this Public License.</p> <p>d. Copyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights.</p> <p>e. Effective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements.</p> <p>f. Exceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material.</p> <p>g. License Elements means the license attributes listed in the name of a Creative Commons Public License. The License Elements of this Public License are Attribution, NonCommercial, and ShareAlike.</p> <p>h. Licensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License.</p> <p>i. Licensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license.</p> <p>h. Licensor means the individual(s) or entity(ies) granting rights under this Public License.</p> <p>i. NonCommercial means not primarily intended for or directed towards commercial advantage or monetary compensation. For purposes of this Public License, the exchange of the Licensed Material for other material subject to Copyright and Similar Rights by digital file-sharing or similar means is NonCommercial provided there is no payment of monetary compensation in connection with the exchange.</p> <p>j. Share means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them.</p> <p>k. Sui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world.</p> <p>l. You means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning.</p>"},{"location":"About/documention%20license/#section-2-scope","title":"Section 2 \u2013 Scope.","text":"<p>a. License grant.</p> <ol> <li>Subject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to:</li> </ol> <p>A. reproduce and Share the Licensed Material, in whole or in part, for NonCommercial purposes only; and</p> <p>B. produce, reproduce, and Share Adapted Material for NonCommercial purposes only.</p> <ol> <li> <p>Exceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions.</p> </li> <li> <p>Term. The term of this Public License is specified in Section 6(a).</p> </li> <li> <p>Media and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a)(4) never produces Adapted Material.</p> </li> <li> <p>Downstream recipients.</p> </li> </ol> <p>A. Offer from the Licensor \u2013 Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License.</p> <p>B. Additional offer from the Licensor \u2013 Adapted Material. Every recipient of Adapted Material from You automatically receives an offer from the Licensor to exercise the Licensed Rights in the Adapted Material under the conditions of the Adapter\u2019s License You apply.</p> <p>C. No downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material.</p> <ol> <li>No endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i).</li> </ol> <p>b. Other rights.</p> <ol> <li> <p>Moral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise.</p> </li> <li> <p>Patent and trademark rights are not licensed under this Public License.</p> </li> <li> <p>To the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties, including when the Licensed Material is used other than for NonCommercial purposes.</p> </li> </ol>"},{"location":"About/documention%20license/#section-3-license-conditions","title":"Section 3 \u2013 License Conditions.","text":"<p>Your exercise of the Licensed Rights is expressly made subject to the following conditions.</p> <p>a. Attribution.</p> <ol> <li>If You Share the Licensed Material (including in modified form), You must:</li> </ol> <p>A. retain the following if it is supplied by the Licensor with the Licensed Material:</p> <p>i. identification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated);</p> <p>ii. a copyright notice;</p> <p>iii. a notice that refers to this Public License;</p> <p>iv. a notice that refers to the disclaimer of warranties;</p> <p>v. a URI or hyperlink to the Licensed Material to the extent reasonably practicable;</p> <p>B. indicate if You modified the Licensed Material and retain an indication of any previous modifications; and</p> <p>C. indicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License.</p> <ol> <li> <p>You may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information.</p> </li> <li> <p>If requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable.</p> </li> </ol> <p>b. ShareAlike.</p> <p>In addition to the conditions in Section 3(a), if You Share Adapted Material You produce, the following conditions also apply.</p> <ol> <li> <p>The Adapter\u2019s License You apply must be a Creative Commons license with the same License Elements, this version or later, or a BY-NC-SA Compatible License.</p> </li> <li> <p>You must include the text of, or the URI or hyperlink to, the Adapter's License You apply. You may satisfy this condition in any reasonable manner based on the medium, means, and context in which You Share Adapted Material.</p> </li> <li> <p>You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, Adapted Material that restrict exercise of the rights granted under the Adapter's License You apply.</p> </li> </ol>"},{"location":"About/documention%20license/#section-4-sui-generis-database-rights","title":"Section 4 \u2013 Sui Generis Database Rights.","text":"<p>Where the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material:</p> <p>a. for the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database for NonCommercial purposes only;</p> <p>b. if You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material, including for purposes of Section 3(b); and</p> <p>c. You must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database.</p> <p>For the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights.</p>"},{"location":"About/documention%20license/#section-5-disclaimer-of-warranties-and-limitation-of-liability","title":"Section 5 \u2013 Disclaimer of Warranties and Limitation of Liability.","text":"<p>a. Unless otherwise separately undertaken by the Licensor, to the extent possible, the Licensor offers the Licensed Material as-is and as-available, and makes no representations or warranties of any kind concerning the Licensed Material, whether express, implied, statutory, or other. This includes, without limitation, warranties of title, merchantability, fitness for a particular purpose, non-infringement, absence of latent or other defects, accuracy, or the presence or absence of errors, whether or not known or discoverable. Where disclaimers of warranties are not allowed in full or in part, this disclaimer may not apply to You.</p> <p>b. To the extent possible, in no event will the Licensor be liable to You on any legal theory (including, without limitation, negligence) or otherwise for any direct, special, indirect, incidental, consequential, punitive, exemplary, or other losses, costs, expenses, or damages arising out of this Public License or use of the Licensed Material, even if the Licensor has been advised of the possibility of such losses, costs, expenses, or damages. Where a limitation of liability is not allowed in full or in part, this limitation may not apply to You.</p> <p>c. The disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability.</p>"},{"location":"About/documention%20license/#section-6-term-and-termination","title":"Section 6 \u2013 Term and Termination.","text":"<p>a. This Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically.</p> <p>b. Where Your right to use the Licensed Material has terminated under Section 6(a), it reinstates:</p> <ol> <li> <p>automatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or</p> </li> <li> <p>automatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or</p> </li> </ol> <p>For the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License.</p> <p>c. For the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License.</p> <p>d. Sections 1, 5, 6, 7, and 8 survive termination of this Public License.</p>"},{"location":"About/documention%20license/#section-7-other-terms-and-conditions","title":"Section 7 \u2013 Other Terms and Conditions.","text":"<p>a. The Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed.</p> <p>b. Any arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License.</p>"},{"location":"About/documention%20license/#section-8-interpretation","title":"Section 8 \u2013 Interpretation.","text":"<p>a. For the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License.</p> <p>b. To the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions.</p> <p>c. No term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor.</p> <p>d. Nothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority.</p>"},{"location":"About/license/","title":"License","text":"<p>AutoNumeric is an MIT-licensed open source project, and its authors are credited in AUTHORS. Check here for more information.</p>"},{"location":"About/license/#mit-license","title":"MIT License","text":"<p>Copyright \u00a9 2016-2023 Alexandre Bonneau alexandre.bonneau@linuxfr.eu and contributors Copyright \u00a9 2009-2016 Robert J. Knothe bob@decorplanit.com and contributors</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sub license, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"Changelog/CHANGELOG/","title":"Changelog","text":""},{"location":"Changelog/CHANGELOG/#changelog-for-autonumeric","title":"Changelog for AutoNumeric","text":""},{"location":"Changelog/CHANGELOG/#v4","title":"v4","text":""},{"location":"Changelog/CHANGELOG/#481","title":"4.8.1","text":"<ul> <li>Fixes #763 Copyright banner in the minimized distribution file is undefined</li> <li>Removes unused wdio script from package.json</li> </ul>"},{"location":"Changelog/CHANGELOG/#480","title":"4.8.0","text":"<ul> <li>Adds #709 Feature request: Disallow toggling the negative/positive sign with '+' and '-' keypress</li> <li>This adds a new option <code>negativePositiveSignBehavior</code> for the managing the '-' and '+' key behavior</li> <li>Setting <code>negativePositiveSignBehavior</code> to <code>true</code> will allow the toggling, while setting it to <code>false</code> will disable it; this means that when hitting the '-' key, the value will always be set to its negative value, and hitting the '+' key will always set the element to its positive value (given the minimum and maximum value allows this)</li> <li>Do note that the default behavior is changed in this version, where toggling between the positive and negative value with the '-' or '+' keys is not activated by default. If you want to use the previous behavior, please set <code>negativePositiveSignBehavior: AutoNumeric.options.negativePositiveSignBehavior.toggle</code> in your options' configuration.</li> <li>Updates the existing end-to-end tests that relied on the toggle behavior</li> <li>Fixes the incorrect error message when setting an invalid <code>positiveSignCharacter</code> option</li> <li>Attempts to fix the 'node: 18' error from Travis CI</li> </ul>"},{"location":"Changelog/CHANGELOG/#470","title":"4.7.0","text":"<ul> <li>Fixes #719 Feature request: Up and down arrow keys behavior matching standard number input</li> <li>Adds 2 new options to control how the up and down arrow keys behave: <code>modifyValueOnUpDownArrow</code> and <code>upDownStep</code></li> </ul>"},{"location":"Changelog/CHANGELOG/#463","title":"4.6.3","text":"<ul> <li>Fixes #721 AutoNumeric.set() breaks internal state when string-value has leading or trailing whitespace</li> <li>Fixes all the remaining end-to-end tests with the latest Webdriver.io version</li> <li>Removes the remnants of PhantomJS hacks (#384)</li> <li>Updates the Travis CI configuration</li> <li>Fixes the caret positioning in some specific cases</li> <li>Fixes the lint issues in the wdio config file</li> <li>Fixes the webpack production config to correctly generate gzipped dist files</li> </ul>"},{"location":"Changelog/CHANGELOG/#462","title":"4.6.2","text":"<ul> <li>Fixes issue #757 Converted scientific numbers returns NaN when using <code>formArrayNumericString()</code></li> <li>Fixes warning messages in the IDE</li> </ul>"},{"location":"Changelog/CHANGELOG/#461","title":"4.6.1","text":"<ul> <li>Updates all the dependencies</li> <li>Removes the PhantomJS dependency in favor of Puppeteer</li> <li>Fixes and cleans the Karma configuration files to support v6.4.1</li> <li>Fixes and cleans the Webpack configuration files to support v5.75.0</li> <li>Fixes the failing unit tests on the <code>validate()</code> function for the <code>allowDecimalPadding</code> option</li> <li>Updates the Webdriverio configuration to v8</li> <li>Updates the Webdriver end-to-end tests to v8, i.e. removing the <code>@wdio/sync</code> package in favor of using async/await everywhere, and updating all the <code>keys()</code> calls to use the Webdriver <code>Key</code> object, and arrays of individual characters</li> <li>Adds unit tests for feature request #741</li> <li>Completes the <code>validate()</code> function with additional tests for the new <code>allowDecimalPadding</code> option as a number</li> <li>Fixes #761 Undo and redo actions are done twice, on Z and Control KeyUp events</li> <li>Fixes missing variable update in #739 (<code>this.onGoingRedo</code>)</li> <li>Fixes the warning message when a faulty <code>styleRules</code> callback is passed as a parameter</li> <li>Fixes typos and grammar in comments</li> <li>Fixes #734 Fire change event onBlur only if number is changed (#735)</li> <li>Fixes #753 Correct invalid JS imports</li> <li>Fixes #758 Adding missing predefined options to typescript interface file</li> <li>Update the readme with the new documentation website</li> <li>Fixes #739 Add CTRL+Y shortcut for redo</li> <li>Fixes the currency symbol for Brazilian real</li> <li>Fixes #697 Currency can be deleted (#725)</li> <li>Updates the README related to PR #742</li> <li>Fixes #741 + Ability to set a numeric allowDecimalPadding (#742)</li> <li>Adds default export to modules (#747)</li> <li>Fixes #737 Undo/redo not firing input event</li> <li>Fixes #684 Caret always set far right when deleting or inserting numbers using $ (#716)</li> <li>Fixes unit tests following the changes in <code>v4.6.0</code></li> </ul>"},{"location":"Changelog/CHANGELOG/#460","title":"4.6.0","text":"<ul> <li>Adds a new option <code>invalidClass</code>, which default to <code>an-invalid</code>, that defines the CSS class name to use when a contenteditable-enabled element value is invalid</li> <li>Adds a new option value <code>'invalid'</code> for the <code>overrideMinMaxLimits</code> option, that will allow users to enter out-of-bound numbers</li> <li>Fixes #543 Allow users to enter out-of-bound numbers, outside of the <code>minimumValue</code> and <code>maximumValue</code> range</li> <li>This allows users to type temporary invalid numbers when the <code>minimumValue</code> is superior to <code>0</code>, or the <code>maximumValue</code> is inferior to <code>0</code></li> <li>While in this out-of-bound state, the element validity status is set to <code>invalid</code></li> <li>Users can then target the CSS <code>:invalid</code> and/or <code>:valid</code> state as they wish to display a visual feedback as needed</li> <li>Do note that contenteditable-enabled elements cannot have a validity state set, so AutoNumeric instead sets by default the <code>an-invalid</code> CSS class on such 'invalid' elements</li> <li>Whenever the user type an invalid number (out of range), the new <code>'autoNumeric:invalidValue'</code> event is sent. When the value is corrected, the new <code>'autoNumeric:correctedValue'</code> event is sent.<ul> <li>Beware; To reduce complexity, the <code>'autoNumeric:invalidValue'</code> event as well as the <code>'autoNumeric:minExceeded'</code> or <code>'autoNumeric:maxExceeded'</code> events are now sent up to three times for a single input; on keypress, keyup and blur</li> </ul> </li> <li>From now on, whenever the user sets a <code>minimumValue</code> higher than <code>0</code>, or a <code>maximumValue</code> lower than <code>0</code>, a warning will be displayed in the console telling him to perhaps use the <code>overrideMinMaxLimits</code> <code>invalid</code> option. For information, the <code>overrideMinMaxLimits</code> <code>doNotOverride</code> is still the default behavior.</li> <li>Simplify the min and max range tests with the new private <code>_isWithinRangeWithOverrideOption()</code> function</li> <li>Fixes the bug where you could always clear the input even if the limit were preventing you to do so (the last valid value was then set back on blur). Now AutoNumeric correctly prevents you to clear the input if the resulting value is out-of-bound.</li> <li>Fixes #676 36 errors in index.d.ts when using with typescript</li> <li>TypeScript users should now remove the <code>declare module 'autonumeric';</code> line from their script (cf. PR #677)</li> <li>Removes node 6 from the CI tests (cf. PR #678)</li> <li>Fixes the detection of wheel events when using a touchpad/trackball (cf. PR #672)</li> </ul>"},{"location":"Changelog/CHANGELOG/#4513","title":"4.5.13","text":"<ul> <li>Fixes #675 The caret position is wrongly positioned when setting the raw value to zero on numbers with a prefix currency symbol (The bug was introduced in <code>v4.5.9</code> with the fix for #647)</li> </ul>"},{"location":"Changelog/CHANGELOG/#4512","title":"4.5.12","text":"<ul> <li>Synchronizes the AutoNumeric version with the published npm one</li> </ul>"},{"location":"Changelog/CHANGELOG/#4511","title":"4.5.11","text":"<ul> <li>Adds a typescript definitions file to the library</li> <li>Fixes some errors in the typescript definitions file and fixes the indentation</li> </ul>"},{"location":"Changelog/CHANGELOG/#4510","title":"4.5.10","text":"<ul> <li>Fixes #656 Input value will undo on focusout when using only Ctrl+Backspace</li> </ul>"},{"location":"Changelog/CHANGELOG/#459","title":"4.5.9","text":"<ul> <li>Fixes #647 Caret position is incorrectly set when the <code>currencySymbol</code> in prefix position contains the first value entered (ie. a numeric value)</li> </ul>"},{"location":"Changelog/CHANGELOG/#458","title":"4.5.8","text":"<ul> <li>Fixes #652 On initialization, <code>allowDecimalPadding</code> option <code>'floats'</code> does not hide the decimal zeroes if set in the html attribute</li> </ul>"},{"location":"Changelog/CHANGELOG/#457","title":"4.5.7","text":"<ul> <li>Fixes #621 The <code>autoNumeric:formatted</code> event should be triggered when the input field is cleared while continuously pressing the <code>Backspace</code> or <code>Delete</code> keys (for real this time, see <code>v4.5.2</code>)</li> </ul>"},{"location":"Changelog/CHANGELOG/#456","title":"4.5.6","text":"<ul> <li>Fix #602 Numpad decimal separator does not work on IE11 with a keyboard whose numpad decimal key outputs a comma</li> <li>Adds a reference for the Angular 4+ implementation <code>ng-angular</code> component in the README</li> </ul>"},{"location":"Changelog/CHANGELOG/#455","title":"4.5.5","text":"<ul> <li>Update the dev dependencies, fix the unit and end-to-end tests  </li> <li>Update the Babel version and fix the related configuration files</li> <li>Update the Karma version and fix the related configuration files</li> <li>Update the Webdriver.io version and fix the related configuration files</li> <li>Update the Webpack version and fix the related configuration files</li> </ul>"},{"location":"Changelog/CHANGELOG/#454","title":"4.5.4","text":"<ul> <li>Fixes #626 Missing the <code>\\u0092</code> digit group separator</li> </ul>"},{"location":"Changelog/CHANGELOG/#453","title":"4.5.3","text":"<ul> <li>Fixes #622 <code>freezeOptions()</code> can create issues in some browsers</li> </ul>"},{"location":"Changelog/CHANGELOG/#452","title":"4.5.2","text":"<ul> <li>Fixes #621 The <code>autoNumeric:formatted</code> event should be triggered when the input field is cleared while continuously pressing the <code>Backspace</code> or <code>Delete</code>keys</li> </ul>"},{"location":"Changelog/CHANGELOG/#451","title":"4.5.1","text":"<ul> <li>Fixes #611 The html <code>readonly</code> attribute is ignored on initial load</li> <li>Fix how readonly and disabled inputs should not process keyboard events</li> <li>Fix the formula mode so that the custom decimal character set with <code>decimalCharacter</code> is used instead of the default <code>'.'</code> character when writing float numbers</li> </ul>"},{"location":"Changelog/CHANGELOG/#450","title":"4.5.0","text":"<ul> <li>Closes #542 Allow basic calculations when entering expressions like <code>=12*78</code></li> <li>Introduces the formula mode which allows a user to enter a math expression in the element using the <code>=</code> key, then evaluate it with the <code>Enter</code> one</li> <li>Adds the <code>formulaMode</code> option, set to <code>false</code> by default, that controls if the formula mode is enabled</li> <li>Adds the <code>Lexer</code>, <code>Parser</code>, <code>Evaluator</code>, <code>ASTNode</code> and <code>Token</code> classes for managing math expressions</li> <li>Fixes #612 Dist files contain eval</li> <li>The webpack <code>devtool</code> option for the <code>development</code> configuration has been changed from <code>cheap-module-eval-source-map</code> to <code>cheap-source-map</code>;     This removes any <code>eval()</code> from the generated <code>dist/autoNumeric.js</code> file, and makes the source maps works in all cases in the browsers</li> <li>Merge the changes from <code>4.4.1</code> while making sure there is no regression with #609; this adds the <code>browser</code> field alongside the <code>main</code> one in <code>package.json</code></li> <li>Note: The <code>browser</code> option points to the minified library <code>dist/autoNumeric.min.js</code></li> <li>Update the <code>index.html</code> test file to use the un-minified <code>development</code> library <code>dist/autoNumeric.js</code>   This allows to temporarily use forbidden functions like <code>console</code> or wrong formatting while debugging, using <code>yarn build:dev</code></li> <li>Fixes a call to <code>_reformatAltHovered()</code> even when the <code>unformatOnHover</code> option was set to <code>false</code></li> </ul>"},{"location":"Changelog/CHANGELOG/#443","title":"4.4.3","text":"<ul> <li>Fixes #598 The <code>unformatOnHover</code> config value isn't used when set to <code>false</code></li> </ul>"},{"location":"Changelog/CHANGELOG/#442","title":"4.4.2","text":"<ul> <li>Fixes #609 Uncaught Error: Cannot find module 'autonumeric' on v4.4.1</li> <li>Reverts the changes from <code>4.4.1</code> : \"Modify the <code>package.json</code> configuration <code>main</code> field to <code>browser</code>\"</li> </ul>"},{"location":"Changelog/CHANGELOG/#441","title":"4.4.1","text":"<ul> <li>Modify the <code>package.json</code> configuration <code>main</code> field to <code>browser</code></li> <li>This is useful per npm's documentation when the module is using browser-specific features like the <code>window</code> object</li> </ul>"},{"location":"Changelog/CHANGELOG/#440","title":"4.4.0","text":"<ul> <li>Closes #476 Add a feature where <code>emptyInputBehavior</code> could be set to the minimum or maximum value</li> <li><code>emptyInputBehavior</code> now accepts either a number (or a string representing a number), or the <code>'min'</code> or <code>'max'</code> option</li> <li>Fix the <code>emptyInputBehavior</code> validation test when checking the value limits</li> <li>Fixes #579 Allow <code>emptyInputBehavior</code> to be set to min, max, or a number</li> </ul>"},{"location":"Changelog/CHANGELOG/#437","title":"4.3.7","text":"<ul> <li>Fixes #594 Currency at wrong position for empty fields with euro/french preset after typing minus sign</li> <li>Fixes #565 Entering a single minus character in a <code>negativeBracketsTypeOnBlur</code> input invert the currency sign and that minus sign</li> </ul>"},{"location":"Changelog/CHANGELOG/#436","title":"4.3.6","text":"<ul> <li>Fixes #219 'Bug on form reset' that was re-opened</li> <li>AutoNumeric now listens to the <code>reset</code> event on the parent form, and react accordingly if detected </li> </ul>"},{"location":"Changelog/CHANGELOG/#435","title":"4.3.5","text":"<ul> <li>Really fixes issue #596 this time</li> </ul>"},{"location":"Changelog/CHANGELOG/#434","title":"4.3.4","text":"<ul> <li>Fixes #596 Change event not firing depending on cursor movement</li> </ul>"},{"location":"Changelog/CHANGELOG/#433","title":"4.3.3","text":"<ul> <li>Fixes #593 Pasting a negative value over a negative value that as a currency symbol and its numbers selected throws an error</li> <li>Refactor the <code>_onPaste()</code> handler by removing duplicated parts</li> <li>Fix the initialization call <code>new AutoNumeric()</code> where using as arguments a <code>string</code> (element selector), a <code>number</code> (initial value) and an <code>array</code> (array of options), in that particular order, would not be recognized</li> </ul>"},{"location":"Changelog/CHANGELOG/#432","title":"4.3.2","text":"<ul> <li>Fixes #589 The <code>percentageUS*</code> predefined options do not have the <code>rawValueDivisor</code> option set</li> </ul>"},{"location":"Changelog/CHANGELOG/#431","title":"4.3.1","text":"<ul> <li>Modify the <code>tenTrillions</code> and <code>oneBillion</code> limits to be exact</li> <li>Remove the <code>maximumValue</code> and <code>minimumValue</code> <code>tenTrillionsNoDecimals</code> option, and update <code>tenTrillions</code> so that it equals ten trillions</li> <li>The <code>tenTrillions</code> sub-option is now equal to <code>'10000000000000'</code>, and the <code>oneBillion</code> sub-option is now equal to <code>'1000000000'</code></li> <li>This change was long overdue since we modified in <code>v4.0.0-beta.22</code> how the number of decimal places was defined by the user using the <code>decimalPlaces</code> options instead of adding a specific number of decimal to the min/max values.</li> </ul>"},{"location":"Changelog/CHANGELOG/#430","title":"4.3.0","text":"<ul> <li>Fixes #559 Allow AutoNumeric to accept the decimal character input even when there is already one in the element</li> <li>Add the new <code>alwaysAllowDecimalCharacter</code> option set to <code>false</code> by default</li> <li>Fixes AutoNumeric so that elements now correctly accepts entering a decimal char on the far left of a negative number</li> </ul>"},{"location":"Changelog/CHANGELOG/#4215","title":"4.2.15","text":"<ul> <li>Fixes #585 Internet Explorer 11 throws when freezing the options</li> </ul>"},{"location":"Changelog/CHANGELOG/#4214","title":"4.2.14","text":"<ul> <li>Fixes #526 Memory / speed improvement in options</li> <li>Fixes #583 AutoNumeric <code>v4.2.13</code> forces the contenteditable attribute to <code>true</code> when set on the html source</li> <li>Fixes #584 Event listeners are not set/reset on option updates</li> </ul>"},{"location":"Changelog/CHANGELOG/#4213","title":"4.2.13","text":"<ul> <li>Fixes #580 Allow non-input tags with the <code>readOnly</code> option to set the <code>contenteditable</code> attribute to <code>false</code></li> <li>Fix the <code>readonly</code> and <code>contenteditable</code> attributes so that they can be updated to read/write mode</li> <li>Modify <code>_setReadOnly()</code> so that it always sets the element to read-only mode</li> <li>Create a new <code>_setReadWrite()</code> function that sets the element to read-write mode</li> <li>Create a new <code>_setWritePermissions()</code> function that sets the element read only/write mode according to the <code>readOnly</code> setting</li> <li>Fix the urls to autonumeric.org in the readme</li> </ul>"},{"location":"Changelog/CHANGELOG/#4212","title":"4.2.12","text":"<ul> <li>Fixes #574 The fractional part is converted to an integer if the part on the cursor left-hand side is equal to 0</li> </ul>"},{"location":"Changelog/CHANGELOG/#4211","title":"4.2.11","text":"<ul> <li>Fixes #570 The minified version of AutoNumeric does not expose some of its static functions (ie. <code>AutoNumeric.getNumber()</code>)</li> <li>Removing the standard <code>Function.name</code> feature fixes the bug in IE now. In the near future IE users will need to require a polyfill for this.</li> <li>Reduce the size of the generated library by tuning the UglifyJs options</li> <li>Fix the end-to-end tests so that they are run against AutoNumeric's minified version </li> </ul>"},{"location":"Changelog/CHANGELOG/#4210","title":"4.2.10","text":"<ul> <li>Fix various bugs regarding the incorrect static and instantiated function calls</li> <li>Fix the polyfill so that <code>Array.from()</code> is correctly 'polyfilled' even if the <code>CustomEvent</code> object already exists</li> <li>Fix the <code>CustomEvent</code> polyfill</li> <li>Merges PR #572 Use <code>AutoNumericHelper.contains()</code> instead of <code>String.includes()</code> for the time being</li> <li>Update the dev dependencies</li> <li>Update the babel preset from <code>latest</code> to <code>env</code></li> </ul>"},{"location":"Changelog/CHANGELOG/#429","title":"4.2.9","text":"<ul> <li>Fixes #568 Using brackets for negative numbers in AutoNumeric.format returns \"undefined\"</li> </ul>"},{"location":"Changelog/CHANGELOG/#428","title":"4.2.8","text":"<ul> <li>Fixes #566 Add the Turkish predefined currency</li> </ul>"},{"location":"Changelog/CHANGELOG/#427","title":"4.2.7","text":"<ul> <li>Fixes #521 The <code>input</code> event is not fired on <code>paste</code> if the element is empty or is completely selected beforehand</li> <li>Fixes #563 The <code>import AutoNumeric from 'AutoNumeric'</code> line in the readme does not work on case sensitive OS (like Linux)</li> </ul>"},{"location":"Changelog/CHANGELOG/#426","title":"4.2.6","text":"<ul> <li>Fixes #561 Webpack bundles the already compiled library when imported in another project</li> </ul>"},{"location":"Changelog/CHANGELOG/#425","title":"4.2.5","text":"<ul> <li>Fix issue #550 The <code>change</code> event is sent twice on change</li> <li>Fix the bug when an input with the <code>negativeBracketsTypeOnBlur</code> options was focused then blurred, it would dispatch a <code>change</code> event.</li> </ul>"},{"location":"Changelog/CHANGELOG/#424","title":"4.2.4","text":"<ul> <li>Fix issue #558 Switch the webpack 4</li> </ul>"},{"location":"Changelog/CHANGELOG/#423","title":"4.2.3","text":"<ul> <li>Fix issue #556 Modify the <code>update()</code> function so that it can accept an array of options</li> </ul>"},{"location":"Changelog/CHANGELOG/#422","title":"4.2.2","text":"<ul> <li>Fix issue #555 The <code>update()</code> function does not accept predefined option names (ie. <code>'euro'</code>)</li> </ul>"},{"location":"Changelog/CHANGELOG/#421","title":"4.2.1","text":"<ul> <li>Fix issue #553 Missing support for very small or very big numbers displayed by Javascript as scientific numbers</li> <li>This adds support for using scientific notation for setting the input value (ie. <code>aNInput.set('6.1349392e-13');</code>, <code>&lt;input value=\"7342.561e40\"&gt;</code>)</li> </ul>"},{"location":"Changelog/CHANGELOG/#420","title":"4.2.0","text":"<ul> <li>Fix issue #535 Prevent entering any decimal character when only positive numbers are accepted</li> <li>Change how the decimal character can be entered:</li> <li>Before, the comma <code>','</code> and dot <code>'.'</code> where always accepted</li> <li>Now, only the characters defined in <code>decimalCharacter</code> and <code>decimalCharacterAlternative</code> are accepted</li> </ul>"},{"location":"Changelog/CHANGELOG/#413","title":"4.1.3","text":"<ul> <li>Fix the <code>.travis.yml</code> file so that the <code>dist</code> file are built on the CI server</li> </ul>"},{"location":"Changelog/CHANGELOG/#412","title":"4.1.2","text":"<ul> <li>Fix the <code>.npmignore</code> file so that the npm autonumeric package can be installed</li> </ul>"},{"location":"Changelog/CHANGELOG/#411","title":"4.1.1","text":"<ul> <li>Fix issue #554 Automatize the build and publishing process of releases with Travis CI</li> <li>Remove the generated files from the git repository</li> <li>Instead of polluting the repo with the <code>dist/*</code> files that can be generated using <code>yarn build</code>, those files are now generated and published to npm automatically when tagging a commit.</li> </ul>"},{"location":"Changelog/CHANGELOG/#410","title":"4.1.0","text":"<ul> <li>Release <code>v4.1.0</code></li> </ul> <p>The highlights of this version are: + New features   + AutoNumeric static functions can now be used in web workers (#494)   + Add the new <code>valuesToStrings</code> option to allow displaying a pre-defined string depending on the <code>rawValue</code> (#450)   + Allow the positive &amp; negative signs to be specified via the two options <code>positiveSignCharacter</code> and <code>negativeSignCharacter</code> (#478)   + Add more details to the <code>'autoNumeric:formatted'</code> event payload (#485)   + Add a new event hook <code>autoNumeric:rawValueModified</code> that will be sent only when the <code>rawValue</code> is modified (#488)   + Add a new custom AutoNumeric event <code>'autoNumeric:initialized'</code> sent as soon as an AutoNumeric element is initialized   + Add the static <code>set</code> and <code>get*</code> functions that will allow setting the given DOM element on getting its value without having a reference to its AutoNumeric object (#515)   + Add support for watching external changes when setting the input <code>value</code> directly with Javascript without using the <code>set()</code> method (Note: watching the external changes from <code>textContent</code> is not yet supported) (#513)   + Add the new option <code>watchExternalChanges</code> (set to <code>false</code> by default) that defines if the AutoNumeric object should watch and react to external changes (not made via <code>.set()</code>)   + Add the new option <code>wheelOn</code> that defines when we should be listening to the <code>wheel</code> event, either on 'hover' or on 'focus' (#456) + Changes   + Change the <code>modifyValueOnWheel</code> default behaviour to act only when the element is focused. If you want to be able to use the mouse wheel on a non-focused AutoNumeric element, you'll now need to press the <code>Shift</code> key while doing so. You can change that behavior back like it was before by setting the new option <code>wheelOn</code> to <code>hover</code> (#456)   + Allow changing the <code>bubble</code> and <code>cancelable</code> attributes of events sent by AutoNumeric. This adds two new options <code>eventBubbles</code> and <code>eventIsCancelable</code> that defaults to <code>true</code> to manage those event attributes (#524)   + Modify the static <code>getAutoNumericElement()</code>, <code>test()</code> and <code>isManagedByAutoNumeric()</code> functions so that they accept either a DOM element or a selector string (#514)   + When the <code>rawValue</code> is allowed to be <code>null</code> and is effectively <code>null</code>, the min/max limits are now ignored   + Form serialization now outputs the empty string <code>''</code> on empty inputs, instead of <code>0</code> or <code>0.00</code> (#512) + Improvements   + Switch to Webpack 3. for leaner bundle creations (#438)   + Migration to eslint 4. for a cleaner codebase (#475)   + The <code>decimalCharacterAlternative</code> now correctly ignores the 'comma' or 'dot' when set to <code>none</code> (#432)   + Unit test now use the <code>mocha</code> profile as default instead of <code>progress</code> + Fixes   + Coverage information is back (#490)   + Workaround a geckodriver bug when trying to input an hyphen (#480)   + Fix lots of pasting issues (#481, #482, #483, #484, #505, #510, #547)   + Create workarounds (hacks really) for various IE-related bugs (#495, #516, #518)   + <code>AutoNumeric.multiple()</code> now correctly add only one event listener to the parent form, if any (#457)   + The <code>input</code> event is not fired on mouse wheel (#525)   + Prevent using the <code>wheel</code> event on <code>disabled</code> input elements   + The value of a read-only field can be changed with a scroll input (#541)   + Cut text reappears when leaving the field (#527)   + Input is duplicated and reversed on devices with Android &lt; 7.0 using Android Chrome (#522)   + Formatted numbers on Android Chrome do not get deleted on blur anymore</p> <p>...and more.</p>"},{"location":"Changelog/CHANGELOG/#410-beta28","title":"4.1.0-beta.28","text":"<ul> <li>Fix issue #477 Modifying an input by selecting all its content and entering <code>0</code> drop the current selection, if 0 is out of the limit boundaries</li> </ul>"},{"location":"Changelog/CHANGELOG/#410-beta27","title":"4.1.0-beta.27","text":"<ul> <li>Fix issue #432 The <code>decimalCharacterAlternative</code> option does not ignore the comma when it's set to <code>none</code></li> </ul>"},{"location":"Changelog/CHANGELOG/#410-beta26","title":"4.1.0-beta.26","text":"<ul> <li>Fix issue #522 Input is duplicated and reversed on devices with Android &lt; 7.0</li> <li>Remove the <code>input</code> event listener</li> <li>Refactor parts of the <code>_stripAllNonNumberCharacters</code> and <code>_convertToNumericString()</code> functions by creating a <code>_normalizeCurrencySuffixAndNegativeSignCharacters()</code> function</li> <li>Rename <code>_stripAllNonNumberCharacters()</code> to <code>_stripAllNonNumberCharactersExceptCustomDecimalChar()</code></li> <li>Create a <code>_stripAllNonNumberCharacters()</code> function that also normalize the decimal character</li> <li>Remove the obsolete <code>skipFirstAutoStrip</code> and <code>skipLastAutoStrip</code> regex</li> <li>Prevent the conversion of the <code>decimalCharacterAlternative</code> into the <code>decimalCharacter</code> when stripping the value</li> <li>Simplify <code>_addBrackets()</code> and <code>_setBrackets()</code></li> <li>Simplify the <code>_removeBrackets()</code> calls</li> <li>Fix <code>_convertToNumericString()</code> so that it normalize the positive sign and remove the brackets if any</li> <li>Fix the bug where the formatted numbers on Android Chrome gets deleted on blur</li> <li>Simplify the generated cached regex</li> <li>Refactor <code>_processCharacterDeletionIfTrailingNegativeSign()</code> so <code>contains()</code> is called only once</li> </ul>"},{"location":"Changelog/CHANGELOG/#410-beta25","title":"4.1.0-beta.25","text":"<ul> <li>Add a new custom AutoNumeric event <code>'autoNumeric:initialized'</code> sent as soon as an AutoNumeric element is initialized</li> </ul>"},{"location":"Changelog/CHANGELOG/#410-beta24","title":"4.1.0-beta.24","text":"<ul> <li>Fix issue #527 Cut text reappears when leaving the field</li> </ul>"},{"location":"Changelog/CHANGELOG/#410-beta23","title":"4.1.0-beta.23","text":"<ul> <li>Fix issue #547 Newer version of Firefox breaks pasting in <code>contenteditable</code> elements</li> <li>Fix issue #510 Pasting values in a <code>disabled</code> element should not be possible</li> <li>Also prevent using the <code>wheel</code> event on <code>disabled</code> input elements.</li> </ul>"},{"location":"Changelog/CHANGELOG/#410-beta22","title":"4.1.0-beta.22","text":"<ul> <li>Fix issue #525 The <code>input</code> event is not fired on mouse wheel</li> </ul>"},{"location":"Changelog/CHANGELOG/#410-beta21","title":"4.1.0-beta.21","text":"<ul> <li>Fix issue #541 The value of a read-only field can be changed with a scroll input</li> </ul>"},{"location":"Changelog/CHANGELOG/#410-beta20","title":"4.1.0-beta.20","text":"<ul> <li>Fix issue #489 <code>valuesToStrings</code> is ignored when using the static <code>format()</code> and <code>unformat()</code> functions</li> </ul>"},{"location":"Changelog/CHANGELOG/#410-beta19","title":"4.1.0-beta.19","text":"<ul> <li>Add an option <code>watchExternalChanges</code> to react to external changes   By default, an AutoNumeric element only format the value set with the <code>.set()</code> function.   If you want the element to watch and format value set by third party script using the <code>aNElement.node().value = 42</code> notation, then you need to set the <code>watchExternalChanges</code> option to <code>true</code>.</li> </ul>"},{"location":"Changelog/CHANGELOG/#410-beta18","title":"4.1.0-beta.18","text":"<ul> <li>Fix issue #524 Allow changing the <code>bubble</code> and <code>cancelable</code> attributes of events sent by AutoNumeric</li> <li>Add two new options <code>eventBubbles</code> and <code>eventIsCancelable</code> that defaults to <code>true</code> to manage the event attributes.</li> </ul>"},{"location":"Changelog/CHANGELOG/#410-beta17","title":"4.1.0-beta.17","text":"<ul> <li>Fix issue #457 Using <code>AutoNumeric.multiple()</code> generate many <code>submit</code> event listeners on the parent <code>form</code></li> <li>Fix the <code>drop</code> event handler removal that was omitted.</li> <li>Add a global <code>aNFormHandlerMap</code> Map on the <code>window</code> object, that keep track of all <code>submit</code> event handler for each <code>&lt;form&gt;</code> element that has at least one AutoNumeric-managed element child.</li> </ul>"},{"location":"Changelog/CHANGELOG/#410-beta16","title":"4.1.0-beta.16","text":"<ul> <li>Fix issue #456 Change the <code>modifyValueOnWheel</code> default behaviour to act only when the element is focused</li> <li>Add a new <code>wheelOn</code> option that will define when the <code>wheel</code> event will increment/decrement the element value.   By default the <code>wheel</code> event is only used when the element is focused (<code>wheelOn</code> is set to <code>'focus'</code>), but you can also use the <code>'hover'</code> option if you want to keep the previous behavior.   Note: There is a small caveat since the <code>Shift + mouse wheel event</code> is reserved by browsers for horizontal scrolling, using the <code>Shift</code> key and the <code>wheelOn</code> option set to <code>'hover'</code> will only scroll the page while the mouse is hovered over the AutoNumeric-managed element. Once it's out of the way, the page won't scroll since you'll be holding the <code>Shift</code> key. You'll then be able to scroll the page normally without having to hold that <code>Shift</code> key.</li> </ul>"},{"location":"Changelog/CHANGELOG/#410-beta15","title":"4.1.0-beta.15","text":"<ul> <li>Fix issue #513 Setting the input <code>value</code> directly with Javascript without using the <code>set()</code> method is not supported   From now on, if an external change is detected when a script modify the input <code>value</code> attribute directly, AutoNumeric tries to format the new value.   Note: watching the external changes to <code>textContent</code> is not supported yet.</li> <li>Fix <code>_onFocusInAndMouseEnter()</code> where <code>setElementValue()</code> was called multiple times in a row</li> <li>Fix the <code>AutoNumeric.events.formatted</code> event so that only one is sent for each user action</li> <li>Change: The <code>AutoNumeric.events.formatted</code> event is not sent anymore when wiping an AutoNumeric object</li> </ul>"},{"location":"Changelog/CHANGELOG/#410-beta14","title":"4.1.0-beta.14","text":"<ul> <li>Fix issue #516 'Del' key does not work in IE browser</li> <li>Fix issue #509 <code>allowDecimalPadding</code> set to <code>'floats'</code> when <code>decimalPlaces</code> is different from <code>0</code> output a warning</li> </ul>"},{"location":"Changelog/CHANGELOG/#410-beta13","title":"4.1.0-beta.13","text":"<ul> <li>Fix issue #518 'Drag-and-Drop' operation does not work in IE11</li> </ul>"},{"location":"Changelog/CHANGELOG/#410-beta12","title":"4.1.0-beta.12","text":"<ul> <li>Fix issue #514 Modify the static <code>getAutoNumericElement()</code>, <code>test()</code> and <code>isManagedByAutoNumeric()</code> functions so that they accept either a DOM element or a selector string</li> <li>Fix issue #515 Add the static <code>set</code> and <code>get*</code> functions</li> </ul>"},{"location":"Changelog/CHANGELOG/#410-beta11","title":"4.1.0-beta.11","text":"<ul> <li>Fix issue #455 Uncaught Error: <code>_initialCaretPosition()</code> should never be called when the <code>caretPositionOnFocus</code> option is <code>null</code></li> <li>Fix issue #512 AutoNumeric serialized data return <code>0</code> instead of an empty value on empty inputs   This fix changes how form serialization is done, by outputting the empty string on empty inputs, instead of <code>0</code> or <code>0.00</code>.</li> </ul>"},{"location":"Changelog/CHANGELOG/#410-beta10","title":"4.1.0-beta.10","text":"<ul> <li>Fix issue #502 The end-to-end tests fails on Chrome 61</li> <li>Fix issue #505 Pasting values in a <code>readOnly</code> element should not be possible</li> </ul>"},{"location":"Changelog/CHANGELOG/#410-beta9","title":"4.1.0-beta.9","text":"<ul> <li>Fix issue #498 The <code>twoScaled</code> choice for the <code>digitalGroupSpacing</code> option cannot be validated</li> <li>Convert all the end-to-end test <code>browser.execute()</code> calls so that hardcoded DOM ids are not used anymore</li> </ul>"},{"location":"Changelog/CHANGELOG/#410-beta8","title":"4.1.0-beta.8","text":"<ul> <li>Fix issue #496 The upgrade guide to v4 references the <code>decimalPlacesOverride</code> option without indicating it's deprecated</li> <li>Fix issue #479 Whitespace on the left hand side of the html <code>value</code> attribute adds a zero on the formatted value on page load</li> </ul>"},{"location":"Changelog/CHANGELOG/#410-beta7","title":"4.1.0-beta.7","text":"<ul> <li>Fix issue #495 <code>AutoNumeric.multiple()</code> fail on IE11 on unknown <code>Array.from()</code></li> </ul>"},{"location":"Changelog/CHANGELOG/#410-beta6","title":"4.1.0-beta.6","text":"<ul> <li>Fix issue #494 Allow AutoNumeric to be imported in web workers in a webpack setup</li> </ul>"},{"location":"Changelog/CHANGELOG/#410-beta5","title":"4.1.0-beta.5","text":"<ul> <li>Fix issue #493 When <code>formatOnPageLoad</code> option is set to <code>false</code>, neither the <code>rawValue</code> nor the element value are set</li> </ul>"},{"location":"Changelog/CHANGELOG/#410-beta4","title":"4.1.0-beta.4","text":"<ul> <li>Fix issue #438 Upgrade Webpack to 3.*</li> <li>Fix issue #490 Fix the generated coverage information</li> <li>Modify the unit test reporter to use 'mocha' instead of 'progress', in order to get more insightful reports.</li> <li>Move the configuration files for the unit tests in the <code>test/unit</code> directory.</li> <li>Update the dev dependencies (Babel, Babel-polyfill, Uglify, PhantomJS, Jasmine).</li> </ul>"},{"location":"Changelog/CHANGELOG/#410-beta3","title":"4.1.0-beta.3","text":"<ul> <li>Fix issue #485 Add more details to the <code>'autoNumeric:formatted'</code> event payload</li> <li>Fix issue #488 Add a new event hook <code>autoNumeric:rawValueModified</code> that will be sent only when the <code>rawValue</code> is modified</li> </ul>"},{"location":"Changelog/CHANGELOG/#410-beta2","title":"4.1.0-beta.2","text":"<ul> <li>Fix issue #478 Allow the positive &amp; negative signs to be specified via options </li> <li>Fix issue #480 On Firefox, the end-to-end tests fails when trying to send the minus <code>'-'</code> character.</li> <li>Also fix the selenium tests where entering the hyphen (<code>'-'</code>) character was not correctly accepted under Firefox.   This was due to the fact that the wrong keyCode <code>173</code> is sent instead of <code>189</code> like in all the other browsers for that character.</li> <li>Fix issue #481 When the caret is on the far right and the negative sign too, entering <code>'+'</code> or <code>'-'</code> does not toggle the positive state, and only move the caret from one character to the left.</li> <li>Fix issue #482 Pasting a positive value while selecting the entire content of an element that has a negative value result in an error.</li> <li>Update the 'Options' chapter in the documentation to add some details on a few options.</li> <li>Simplify <code>_checkPaste()</code> so that it's not processed any more times if the element has already been formatted.</li> <li>Fix the range check so that when the <code>rawValue</code> is allowed to be <code>null</code> and is effectively <code>null</code>, the min/max limits are ignored.</li> <li>Modify how <code>this.formatted</code> is used so it tracks if the element value has been formatted already. If that's the case, prevent further format calculations.   This is a start and <code>this.formatted</code> usage should be reviewed in depth.</li> <li>Fix issue #484 Pasting an invalid string into either a selection or at the caret position modify the element value.</li> <li>Fix issue #483 Pasting a content over an element that already has the same exact content resets its value to zero.</li> </ul>"},{"location":"Changelog/CHANGELOG/#410-beta1","title":"4.1.0-beta.1","text":"<ul> <li>Fix issue #475 Migrate to eslint 4</li> <li>Fix issue #450 Add the <code>valuesToStrings</code> option to allow displaying a pre-defined string when the <code>rawValue</code> equal a specific value</li> </ul>"},{"location":"Changelog/CHANGELOG/#403","title":"4.0.3","text":"<ul> <li>Fix issue #474 <code>AutoNumeric.format()</code> and <code>AutoNumeric.unformat()</code> do not accept named options</li> </ul>"},{"location":"Changelog/CHANGELOG/#402","title":"4.0.2","text":"<ul> <li>Fix issue #473 Static <code>format()</code> and <code>unformat()</code> functions ignores the <code>rawValueDivisor</code> option</li> <li>Fix <code>AutoNumeric.unformat()</code> that used the number of decimal places shown on focus instead of the one for the raw value.</li> </ul>"},{"location":"Changelog/CHANGELOG/#401","title":"4.0.1","text":"<ul> <li>Fix issue #471 The static <code>format()</code> function does not keep the negative sign</li> <li>Fix issue #472 The static <code>AutoNumeric.format()</code> function does not accept DOM element as its first parameter</li> </ul>"},{"location":"Changelog/CHANGELOG/#400","title":"4.0.0","text":"<ul> <li>Release <code>v4.0.0</code></li> <li>The highlights of this new version are:</li> <li>AutoNumeric is now fully converted to an ES6 module.</li> <li>No more jQuery dependency.</li> <li><code>AutoNumeric</code> is now a class. You can access the class method directly from the AutoNumeric object (ie. <code>const aNElement = new AutoNumeric(input, {options})); aNElement.set(123).update({options2});</code>).</li> <li>The number of decimal places is now explicitly set via the <code>decimalPlaces</code> option.</li> <li>You can now specify a different number of decimal place to show when focused and unfocused, and for the internal <code>rawValue</code>.     If you relied on the number of decimals in <code>minimumValue</code> or <code>maximumValue</code> to define how many decimal places should be shown on the formatted value, or kept as the precision in the <code>rawValue</code>, you now need to explicitly define how many decimal places your want, whatever number of decimal places <code>minimumValue</code> and <code>maximumValue</code> have.</li> <li>You can now 'cancel' any edits made to the element by hitting the <code>Escape</code> key. If no changes are detected, hitting <code>Esc</code> will select the element value (according to the <code>selectNumberOnly</code> option).</li> <li>Undo/Redo are now supported.</li> <li>You can modify the value of the element by using the mouse wheel on it, if <code>modifyValueOnWheel</code> is set. The <code>wheelStep</code> option defines the step to use.</li> <li>An AutoNumeric object can now initialize other DOM elements with <code>init(domElement)</code>, which will then use the same options.     The AutoNumeric-managed elements that initialized each other share a common list, allowing the user to perform a single action on many elements at once (via the <code>.global.*</code> functions, ie. <code>aNElement.update({options})</code> to update the options of all the elements, or <code>aNElement.set(42)</code> to set the same value for each elements).     The <code>.global.*</code> functions you can use are : <code>set()</code>, <code>setUnformatted()</code>, <code>get()</code>, <code>getNumericString()</code>, <code>getFormatted()</code>, <code>getNumber()</code>, <code>getLocalized()</code>, <code>reformat()</code>, <code>unformat()</code>, <code>unformatLocalized()</code>, <code>update()</code>, <code>isPristine()</code>, <code>clear()</code>, <code>remove()</code>, <code>wipe()</code>, <code>nuke()</code>, <code>has()</code>, <code>addObject()</code>, <code>removeObject()</code>, <code>empty()</code>, <code>elements()</code>, <code>getList()</code> and <code>size()</code>.     Managing that shared list is possible via <code>attach()</code> and <code>detach()</code>.</li> <li>The options can now be updated one by one using the handy functions <code>aNElement.options.&lt;nameOfTheOption&gt;({newOption})</code>, ie. <code>aNElement.options.currencySymbol('\u20ac')</code>.     You can also reset the options to the default ones using <code>aNElement.options.reset()</code>.</li> <li>Lots of new options (<code>rawValueDivisor</code>, <code>decimalPlaces</code>, <code>decimalPlacesRawValue</code>, <code>decimalPlacesShownOnBlur</code>, <code>serializeSpaces</code>, <code>noEventListeners</code>, <code>readOnly</code>, <code>selectOnFocus</code>, <code>caretPositionOnFocus</code>, etc.).</li> <li>While the AutoNumeric objects provides many methods, you can also directly use the AutoNumeric class static functions without having to instantiate an object. Those methods are <code>version()</code>, <code>test()</code>, <code>validate()</code>, <code>areSettingsValid()</code>, <code>getDefaultConfig()</code>, <code>getPredefinedOptions()</code>, <code>format()</code>, <code>formatAndSet()</code>, <code>unformat</code>. <code>unformatAndSet()</code>, <code>localize()</code>, <code>localizeAndSet()</code>, <code>isManagedByAutoNumeric()</code> and <code>getAutoNumericElement()</code>.</li> <li>Lots of new functions (<code>isPristine()</code>, <code>clear()</code>, <code>nuke()</code>, <code>formatOther()</code> and <code>unformatOther()</code> which allows to format/unformat a numeric string or another DOM element with the current object settings, <code>setValue()</code>, etc.).</li> <li>The <code>get()</code> function has been deprecated, in favor of more explicit <code>get*</code> methods : <code>getNumericString()</code>, <code>getFormatted()</code>, <code>getNumber()</code> and <code>getLocalized()</code>.</li> <li>By default, <code>new AutoNumeric('.myClass')</code> will only initialize one element. If you want to initialize multiple DOM elements in one go, you need to use the static <code>AutoNumeric.multiple()</code> function.    It allows to initialize numerous AutoNumeric objects (on numerous DOM elements) in one call (and possibly pass multiple values that will be mapped to each DOM element).</li> <li>Support for the Android Chrome mobile browser (v57) (this is a work in progress though, since it's quite hard to work around its limitations).</li> <li>Functions can now be chained (ie. <code>aNElement.clear().set(22).formSubmitJsonNumericString().nuke()</code>).    Modify how updating the settings works ; before, all modifications to the settings were directly accepted and stored, then we immediately tried to <code>set()</code> back the current value with those new settings.     This could lead to an object state where the object value would be out of the minimum and maximum value range, ie. we would accept the range modification, then immediately throw an error since the current value would then be out of range.     For instance, if <code>minimumValue</code> equal <code>0</code>, <code>maximumValue</code> equal <code>100</code> and the current element value equal <code>50</code>, trying to change the <code>minimumValue</code> to <code>75</code> will fail, and the <code>minimumValue</code> will be reverted back to<code>0</code>.     The new behavior is leaner ; if the new settings do not pass the <code>validate()</code> method or the following <code>set()</code> call fails, then the settings are reverted to the previous valid ones.</li> <li> <p>The <code>rawValueDivisor</code> option allows to display a formatted value different than the raw value. For instance you can display percentages like <code>'1.23%'</code>, while keeping the <code>rawValue</code> <code>0.0123</code> 'unmultiplied', if <code>rawValueDivisor</code> is set to <code>100</code>.</p> </li> <li> <p>And also:</p> </li> <li>The new <code>selectNumber()</code>, <code>selectInteger()</code> and <code>selectDecimal()</code> function to select the element content as needed.</li> <li>The DOM-specific functions to manipulate it ; <code>node()</code> (returns the DOM element managed by AutoNumeric), <code>parent()</code>, <code>form()</code> (returns the parent  element, if any). <li>More than 20 functions to manages html forms ; how to retrieve info from them, or submit the info (formatted, unformatted, localized).</li> <li>Predefined options so that the user do not have to configure AutoNumeric manually.     Those options are <code>dotDecimalCharCommaSeparator</code>, <code>commaDecimalCharDotSeparator</code>, <code>integer</code>, <code>integerPos</code>, <code>integerNeg</code>, <code>float</code>, <code>floatPos</code>, <code>floatNeg</code>, <code>numeric</code>, <code>numericPos</code>, <code>numericNeg</code>, <code>euro</code>, <code>euroPos</code>, <code>euroNeg</code>, <code>euroSpace</code>, <code>euroSpacePos</code>, <code>euroSpaceNeg</code>, <code>percentageEU2dec</code>, <code>percentageEU2decPos</code>, <code>percentageEU2decNeg</code>, <code>percentageEU3dec</code>, <code>percentageEU3decPos</code>, <code>percentageEU3decNeg</code>, <code>dollar</code>, <code>dollarPos</code>, <code>dollarNeg</code>, <code>percentageUS2dec</code>, <code>percentageUS2decPos</code>, <code>percentageUS2decNeg</code>, <code>percentageUS3dec</code>, <code>percentageUS3decPos</code> and <code>percentageUS3decNeg</code>.</li> <li>Some language options are now shipped directly and you can use the language name as a function to activate those settings (ie. <code>aNElement.french()</code>).</li> <li>Better support for <code>contenteditable</code> elements so that AutoNumeric is not only limited to <code>&lt;input&gt;</code> elements.</li> <li>AutoNumeric send the <code>'autoNumeric:formatted'</code> event whenever it formats the element content.</li> <li>The raw unformatted value can always be accessible with the <code>rawValue</code> attribute (ie. <code>aNElement.rawValue</code>).</li> <li>When pressing the <code>Alt</code> key, you can hover your mouse over the AutoNumeric-managed elements to see their raw value.</li> <li>You can prevent the mouse wheel to increment/decrement an element value by pressing the <code>Shift</code> key while using the mouse wheel.</li> <li>Default values for each options can be easily accessed with an IDE autocompletion when using <code>AutoNumeric.options.|</code>.</li> <li>Support for drag and dropping numbers into AutoNumeric-managed elements.</li> <li>The <code>styleRules</code> option allows to either change the style of the current element based on the <code>rawValue</code> value, or just call any custom callbacks whenever the <code>rawValue</code> changes.</li> <li>Allow setting the <code>rawValue</code> to <code>null</code>, either by setting it directly (ie. <code>aNElement.set(null)</code>), or by emptying the element, if <code>emptyInputBehavior</code> is set to <code>'null'</code>.</li> <li>All <code>get*()</code> method accepts a callback function. The callback is passed the result of the <code>get*</code> functions as its first argument, and the current AutoNumeric object as its second.</li> <li>Allow initializing an AutoNumeric element with an array of options objects or pre-defined option names (ie. <code>'euroPos'</code>).</li> <li> <p>Add a static <code>AutoNumeric.mergeOptions()</code> function that accepts an array of option objects and / or pre-defined option names, and return a single option object where the latter element overwrite the settings from the previous ones.</p> </li> <li> <p>Lots of bug fixes and code simplification (#387, #391, #393, #397, #399, #398, #244, #396, #395, #401, #403, #408, #320, #411, #412, #413, #417, #423, #415, #418, #409, #416, #414, #427, #248, #425, #264, #250, #404, #434, #440, #442, #447, #448, #449, #454, #453, #388, #461, #452).</p> </li> <li>Better test coverage, both for unit tests and end-to-end tests.</li> <li>Rewrite the documentation (README.md) to make it more 'browsable'.</li> <li>For a more detailed changelog, you can read the changes listed from <code>v3.0.0-beta.1</code> to <code>v3.0.0-beta.14</code> and from <code>v4.0.0-beta.1</code> to <code>v4.0.0-beta.23</code>.</li>"},{"location":"Changelog/CHANGELOG/#400-beta23","title":"4.0.0-beta.23","text":"<ul> <li>Fix issue #453 Rename the <code>noSeparatorOnFocus</code> option to <code>showOnlyNumbersOnFocus</code></li> <li>Add the missing <code>options.historySize()</code> method that allows to update the <code>historySize</code> option</li> <li>Move the raw value from <code>this.settings.rawValue</code> to <code>this.rawValue</code>. This prevent polluting the settings object.</li> <li>Fix issue #388 autoNumeric does not work with Browserify</li> <li>Fix issue #461 Fixed problem on Android Chrome browsers when a currency symbol is used</li> <li>Fix issue #452 Add a new <code>rawValueDivisor</code> option to display a formatted value different than the raw value.   This allows for instance to display percentages like <code>'1.23%'</code>, while keeping the <code>rawValue</code> <code>0.0123</code> 'unmultiplied', if <code>rawValueDivisor</code> is set to <code>100</code>.</li> <li>Merge the <code>blur</code> event listeners into one.</li> <li>Add the <code>this.isWheelEvent</code>, <code>this.isDropEvent</code> and <code>this.isEditing</code> attributes to track the <code>wheel</code> and <code>drop</code> events, as well as when the user is manually editing the element value.</li> <li>Modify <code>_setRawValue()</code> to divide the <code>rawValue</code> if <code>rawValueDivisor</code> is set.</li> <li>Fix the validation test for the <code>scaleDivisor</code> option where it did not check that it should not be equal to <code>0</code>.</li> <li>Fix the validation test for the <code>allowDecimalPadding</code> when <code>decimalPlacesShownOnBlur</code> or <code>decimalPlacesShownOnFocus</code> is set.</li> <li>Add a validation test for <code>divisorWhenUnfocused</code> so that it throws if it's set to <code>1</code>.</li> <li>Modify the validation test so that setting <code>divisorWhenUnfocused</code> to <code>1</code> will throw.</li> <li>Modify <code>_trimLeadingAndTrailingZeros()</code> so that it manages <code>null</code> values correctly (ie. it returns <code>null</code> instead of <code>'0'</code> if passed <code>null</code>).</li> <li>Fix the error shown when blurring an input that accept a <code>null</code> value.</li> <li>Modify the pre-defined options <code>percentage*</code> so that the <code>rawValueDivisor</code> is set to <code>100</code>.</li> <li>Rename the <code>divisorWhenUnfocused</code> option value from <code>doNotActivateTheScalingOption</code> to <code>none</code>.</li> <li>Fix <code>getNumericString()</code> so that it returns <code>null</code> when the <code>rawValue</code> is <code>null</code>.</li> <li>Separate the <code>_calculateDecimalPlaces()</code> function into two <code>_calculateDecimalPlacesOnInit()</code> and <code>_calculateDecimalPlacesOnUpdate()</code>.</li> <li>The callbacks found in the <code>settings</code> object are now run before modifying the <code>negativePositiveSignPlacement</code> option.</li> <li>Modify how the settings are updated when the user pass the <code>decimalPlaces</code> option.   Before, this was overriding any other <code>decimalPlaces*</code> options passed in the same object.   Now, the <code>decimalPlaces</code> value is only used if the other <code>decimalPlaces*</code> options are not already set.   Moreover, the <code>decimalPlacesRawValue</code> option is now overwritten by the other <code>decimalPlaces*</code> options defined in the same option object, if their values are higher.</li> <li>Modify the behavior of the <code>wheelStep</code> 'progressive' mode so that values between ]-1;-1[ are treated specially, by allowing the wheel event to modify the decimal places. The precision used for the <code>step</code> depends on the number of decimal places used for the <code>rawValue</code>.   Also, numbers between 1 and 9 (included) now use a step of <code>1</code>, instead of <code>10</code> like before.</li> <li>Set the version of Webpack to <code>1.14.0</code>, instead of <code>latest</code>, in order to prevent potential incompatibility problems.</li> </ul>"},{"location":"Changelog/CHANGELOG/#400-beta22","title":"4.0.0-beta.22","text":"<ul> <li>Fix issue #454 Rewrite how the number of decimal places for the formatted and the raw values are set</li> <li>If you relied on the number of decimals in <code>minimumValue</code> or <code>maximumValue</code> to define how many decimal places should be shown on the formatted value, or kept as the precision in the <code>rawValue</code>, you now need to explicitly define how many decimal places your want, whatever number of decimal places <code>minimumValue</code> and <code>maximumValue</code> have.</li> <li>To do so, you now need to define at least the <code>decimalPlaces</code> option.</li> <li>If you want, you can also separately define <code>decimalPlacesRawValue</code>, <code>decimalPlacesShownOnBlur</code> and <code>decimalPlacesShownOnFocus</code>. For more details, read on.</li> <li>Rename <code>scaleDecimalPlaces</code> to <code>decimalPlacesShownOnBlur</code>.</li> <li>Rename <code>scaleDivisor</code> to <code>divisorWhenUnfocused</code>.</li> <li>Rename <code>scaleSymbol</code> to <code>symbolWhenUnfocused</code>.</li> <li>Rename the <code>decimalPlacesShownOnBlur.doNotChangeDecimalPlaces</code> to <code>decimalPlacesShownOnBlur.useDefault</code> to be coherent with the other <code>decimalPlaces*</code> options.</li> <li>Remove the <code>decimalPlacesOverride</code> option in favor of explicit <code>decimalPlaces</code>, <code>decimalPlacesShownOnBlur</code> and <code>decimalPlacesShownOnFocus</code> ones.</li> <li>Add a warning message if the old <code>mDec</code> option is used (which was the equivalent of <code>decimalPlacesOverride</code>).</li> <li>Add a <code>decimalPlacesRawValue</code> option that define the precision the user wants to keep (in the <code>rawValue</code>).</li> <li>Remove the need for saving <code>decimalPlacesOverride</code> to temporary change it in <code>set()</code>.</li> <li>Create 3 different rounding functions that replace the <code>_roundValue()</code> calls: <code>_roundFormattedValueShownOnFocus</code>, <code>_roundFormattedValueShownOnBlur</code> and <code>_roundRawValue</code>. This way we are more explicit in what the code is doing.</li> <li>Modify <code>_setRawValue()</code> so that it only save the given raw value if it's different than the current one (keeping the history table clean).</li> <li>Use template strings instead of concatenation in <code>_addGroupSeparators()</code>, <code>_roundValue()</code> and <code>_prepareValueForRounding()</code> to prevent possible wrong typecasts.</li> <li>Fix the error shown when hovering an input whose value has been set to <code>null</code> (a <code>toString()</code> was attempted on the <code>null</code> value in the <code>_roundValue()</code> method).</li> <li>Fix the incoherent variable name <code>inputValueHasADot</code> in <code>_roundValue()</code> to better reflect what data it holds, ie. <code>inputValueHasNoDot</code>.</li> <li>Fix typos in the <code>set()</code> warning messages.</li> <li>Add a warning message when try to set a value that results in <code>NaN</code>.</li> <li>Simplify the '_onFocusInAndMouseEnter<code>and</code>_onFocusOutAndMouseLeave` event handlers.</li> <li>Update the tests with the new changes.</li> <li>Modify how decimal places are set.   Before you needed to add that many decimals to the <code>minimumValue</code> or <code>maximumValue</code>, and that maximum number of decimal place was used everywhere (except if you also defined <code>decimalPlacesOverride</code>, <code>decimalPlacesShownOnFocus</code> or <code>scaleDecimalPlaces</code>).   Now you need to explicitly define the number of decimal places using the <code>decimalPlaces</code> option.   If only <code>decimalPlaces</code> is defined, then the other <code>decimalPlaces*</code> options <code>decimalPlacesRawValue</code>, <code>decimalPlacesShownOnBlur</code> and <code>decimalPlacesShownOnFocus</code> are calculated from it.   This way, you can now define clearly how many decimal places needs to be shown when focused/unfocused, and as the raw value precision.   Note: updating the <code>decimalPlaces</code> will overwrite any <code>decimalPlaces*</code> option previously set.</li> <li>Remove the <code>_maximumVMinAndVMaxDecimalLength()</code> since we do not set the number of decimal places this way.</li> <li>Remove the <code>_correctDecimalPlacesOverrideOption()</code> function since <code>decimalPlacesOverride</code> is not used anymore.</li> <li>Add a <code>_calculateDecimalPlaces()</code> static method that calculate the <code>decimalPlaces*</code> option value based on <code>decimalPlaces</code> and the <code>decimalPlaces*</code> ones.</li> <li>Modify how updating the settings works ; before, all modifications to the settings were directly accepted and stored, then we immediately tried to <code>set()</code> back the current value with those new settings.   This could lead to an object state where the object value would be out of the minimum and maximum value range, ie. we would accept the range modification, then immediately throw an error since the current value would then be out of range.   For instance, if <code>minimumValue</code> equal <code>0</code>, <code>maximumValue</code> equal <code>100</code> and the current element value equal <code>50</code>, trying to change the <code>minimumValue</code> to <code>75</code> will fail, and the <code>minimumValue</code> will be reverted back to<code>0</code>.   The new behavior is leaner ; if the new settings do not pass the <code>validate()</code> method or the following <code>set()</code> call fails, then the settings are reverted to the previous valid ones.</li> <li>In <code>_setValueParts()</code>, set the <code>rawValue</code> and the formatted element value separately, since they can have different decimal places. For instance we could imagine keeping 3 decimal places for the <code>rawValue</code>, while only 2 is shown. I then need to make sure we keep that third decimal place information into the <code>rawValue</code>, instead of trimming it like it was done before.</li> </ul>"},{"location":"Changelog/CHANGELOG/#400-beta21","title":"4.0.0-beta.21","text":"<ul> <li>Set the read-only mode on the default settings, enumerations, events, options and pre-defined options objects.</li> <li>Allow using a pre-defined option name directly when initializing an AutoNumeric element</li> <li>Fix the initialization method to accepts arrays of options object/pre-defined options when using an initial value.</li> <li>Fix an issue related to issue #447 when the focus out action produce an error when the input raw value is set to <code>null</code></li> <li>Fix a rare bug when <code>scaleSymbol</code> is a castable to a <code>Number</code>, and would be added to the formatted value, instead of concatenated.</li> <li>Remove an unneeded temporary variable in <code>set()</code>.</li> <li>Add more details in some JSDoc.</li> <li>Fix <code>validate()</code> so that it throws an error early if <code>scaleDivisor</code> is wrongly set to <code>0</code>.</li> <li>Fix <code>_trimLeadingAndTrailingZeros()</code> so that it correctly handles the <code>null</code> value.</li> <li>Fix <code>_onFocusInAndMouseEnter()</code> so that the <code>decimalPlacesShownOnFocus</code> setting is correctly cast to a Number.</li> <li>Fix <code>_onFocusOutAndMouseLeave()</code> so that the <code>null</code> value is correctly handle. Also fix the error message shown when the <code>rawValue</code> is not stored as a string.</li> <li>Simplify a ternary condition into a simple <code>if</code> one.</li> <li>Hardcode the <code>isFocused</code> state to <code>false</code> when calling <code>_addGroupSeparators()</code> in <code>_onFocusOutAndMouseLeave()</code> so that it does not rely on the order where <code>this.isFocused</code> is set back to <code>false</code>.</li> </ul>"},{"location":"Changelog/CHANGELOG/#400-beta20","title":"4.0.0-beta.20","text":"<ul> <li>Allow initializing an AutoNumeric element with an array of options objects or pre-defined option names.   The latter options in the array will overwrite the previous ones.   The array can contains either option objects, or pre-defined option names as a string (ie. <code>'euroPos'</code>).   Both the initialization methods <code>new AutoNumeric()</code> and <code>AutoNumeric.multiple()</code> support using arrays of options.</li> <li>Add a static <code>AutoNumeric.mergeOptions()</code> function that accepts an array of option objects and / or pre-defined option names, and return a single option object where the latter element overwrite the settings from the previous ones.</li> <li>Allow passing an array of options objects or pre-defined option names to the static <code>format</code> and <code>unformat</code> methods.   The latter options in the array will overwrite the previous ones.   The array can contains either option objects, or pre-defined option names as a string (ie. <code>'euroPos'</code>).</li> </ul>"},{"location":"Changelog/CHANGELOG/#400-beta19","title":"4.0.0-beta.19","text":"<ul> <li>Fix issue #449 <code>AutoNumeric.unformat()</code> only removes the first instance of <code>settings.digitGroupSeparator</code></li> </ul>"},{"location":"Changelog/CHANGELOG/#400-beta18","title":"4.0.0-beta.18","text":"<ul> <li>Modify the <code>get*</code> methods to allow passing them a callback function.</li> <li>The callback is then executed on the <code>get*</code> method result, or the <code>global.get*</code> method array of result.</li> <li>The callback is passed the result of the <code>get*</code> functions as its first argument, and the current AutoNumeric object as its second.</li> <li>Split the <code>_saveValueToPersistentStorage()</code> method in three : <code>_saveValueToPersistentStorage()</code> to save the raw value to persistent storage, <code>_getValueFromPersistentStorage()</code> to retrieve that data, and <code>_removeValueFromPersistentStorage()</code> to delete it.</li> <li>From now on, the <code>_storageTest</code> is only done once, and the result is kept in <code>this.sessionStorageAvailable</code>, and the storage variable name is also generated once and kept in <code>this.rawValueStorageName</code>.</li> <li>You can now modify the raw value storage name variable prefix by modifying the <code>this.storageNamePrefix</code> attribute. Currently it defaults to <code>'AUTO_'</code>;</li> </ul>"},{"location":"Changelog/CHANGELOG/#400-beta17","title":"4.0.0-beta.17","text":"<ul> <li>Fix issue #447 Add a new <code>'null'</code> options to the <code>emptyInputBehavior</code> setting </li> <li>Add the <code>this.defaultRawValue</code> variable that store the hard-coded default raw value used during the initialization and reset.  </li> <li>When using the option <code>{ emptyInputBehavior: AutoNumeric.options.emptyInputBehavior.null }</code>, the user can now explicitly set the AutoNumeric value to <code>null</code> (using <code>anElement.set(null)</code> for instance).   Additionally, when this option is set, if the AutoNumeric element is emptied, then <code>rawValue</code> is set to <code>null</code>.   Note: if the current raw value is equal to <code>null</code>, changing the <code>emptyInputBehavior</code> option to something different than <code>null</code> will update the rawValue to <code>''</code>.   Known limitation : Initializing an AutoNumeric object with the <code>null</code> value is not allowed since using <code>null</code> for the initial value means that AutoNumeric needs to use the current html value instead of <code>null</code>.</li> <li>Fix issue #448 When searching for the parent form element, the <code>tagName</code> can be undefined.</li> <li>The <code>form()</code> method now accepts a <code>true</code> argument that will force it to discard the current parent form and search for a new one.</li> <li>Enforce the use of <code>settings.showWarnings</code> for most calls to <code>AutoNumericHelper.warning()</code>, wherever possible.</li> </ul>"},{"location":"Changelog/CHANGELOG/#400-beta16","title":"4.0.0-beta.16","text":"<ul> <li>Move the options, default options and predefined options objects each in its own file.   Separating them from the AutoNumeric class makes that information easier to find, study and modify.</li> <li>Modify the <code>update()</code> and <code>global.update()</code> function signatures so that they can accept multiple option objects, the latter overwriting the settings from the former.   This allows to fine tune the format settings in one go, and is specially useful when using a predefined option as the 'configuration base', and changing it slightly (ie. <code>anElement.update( AutoNumeric.getPredefinedOptions().French, { digitGroupSeparator: AutoNumeric.options.digitGroupSeparator.noSeparator })</code>).</li> <li>Fix the <code>'autoNumeric:formatted'</code> event not being correctly sent if the AutoNumeric element was formatted without a <code>keyup</code> event.   The event is now correctly sent when the value is set to empty, or when using <code>unformat()</code>, <code>unformatLocalized()</code> and <code>wipe()</code>, as well as when the user uses the wheel event to change the element value, or the <code>alt + mouse hover</code> feature, or just hover the element that has a <code>negativeBracketsTypeOnBlur</code> option set, or on the initial format on load.</li> <li>Fix the fact that <code>'autoNumeric:formatted'</code> was not sent when pasting valid values.</li> <li>Gather the AutoNumeric event names in a single configuration variable <code>AutoNumeric.events</code>.</li> <li>Modify the default percentage pre-defined option <code>wheelStep</code> to <code>0.01</code> so that the wheel step is more logical when manipulating a small number.</li> <li>Fix issue #442 Setting <code>unformatOnSubmit</code> to <code>true</code> does not unformat the element on the form' <code>submit</code> event</li> <li>Fix issue #440 Pasting does not work in IE11</li> </ul>"},{"location":"Changelog/CHANGELOG/#400-beta15","title":"4.0.0-beta.15","text":"<ul> <li>Add a new option <code>selectOnFocus</code> that allow the user to choose if the value should be selected when the element is focused.</li> <li>Add a new option <code>caretPositionOnFocus</code> that allow the user to choose where should be positioned the caret when the element is focused.</li> <li>Modify how the caret is treated on focus ; if the <code>selectOnFocus</code> option is <code>true</code> then the value is selected, otherwise the caret is set at the position defined by the <code>caretPositionOnFocus</code> option.</li> <li><code>caretPositionOnFocus</code> can be <code>'start'</code>, <code>'end'</code>, <code>'decimalLeft'</code> and <code>'decimalRight'</code>, and will change where the caret will be positioned when the element get the focus. It can also be <code>null</code> which means the caret position is not forced.</li> <li>The caret position is calculated by the new <code>_initialCaretPosition()</code> function.</li> <li>Modify <code>validate()</code> so that an empty object can be used for the options, since the default settings would then be merged and used.</li> <li>Modify the <code>validate()</code> function signature so that it accepts a third argument, the raw options passed by the user, without them having been merged with the default settings. This is useful for checking conflicting options that could be overwritten by the defaults.</li> <li>Rewrite the call to <code>validate()</code> from <code>areSettingsValid()</code> to make it more explicit.</li> <li>Rewrite one test condition in <code>_onFocusInAndMouseEnter()</code> so that it's not reserved only for elements that have their <code>emptyInputBehavior</code> option set to <code>focus</code> anymore.</li> <li>Add a <code>focusin</code> event handler via <code>_onFocusIn()</code>, which take care of managing the element content selection on focus.</li> <li>Add the <code>_correctCaretPositionOnFocusAndSelectOnFocusOptions()</code> function that manage the <code>caretPositionOnFocus</code> and <code>selectOnFocus</code> options in order to prevent any conflict.</li> <li>Strengthen <code>setElementSelection()</code> so that <code>element.firstChild</code> is checked for <code>null</code> value.</li> <li>Add a table of contents to the readme and reorganize its chapters.</li> </ul>"},{"location":"Changelog/CHANGELOG/#400-beta14","title":"4.0.0-beta.14","text":"<ul> <li>Add more bracket types to the <code>negativeBracketsTypeOnBlur</code> option ('\u3008,\u3009', '\uff62,\uff63', '\u2e24,\u2e25', '\u27e6,\u27e7', '\u2039,\u203a' and '\u00ab,\u00bb')</li> <li>Reformat the changelog, fix some typos</li> <li>Modify the static <code>unformat()</code> signature to allow multiple options objects to be passed as arguments.   Each more option object overwrite the previous ones.   This allows to correctly unformat currencies that have a predefined option as its base, but has been slightly modified (ie. <code>AutoNumeric.unformat('241800,02\u202f\u20ac', AutoNumeric.getPredefinedOptions().French, { digitGroupSeparator: AutoNumeric.options.digitGroupSeparator.noSeparator })</code>, and still get the right result).</li> <li>Split the <code>_checkEmpty()</code> function into <code>_isElementValueEmptyOrOnlyTheNegativeSign()</code> and <code>_orderValueCurrencySymbolAndSuffixText()</code>. Both new functions only do one thing and one thing only, allowing the code to be rewrote in a clearer way.</li> <li>Delete the <code>_checkEmpty()</code> function.</li> <li>Simplify <code>_roundValue()</code> to make it more legible ; This is done by extracting <code>_roundCloseTo05()</code>, <code>_prepareValueForRounding()</code> and <code>_shouldRoundUp()</code>.</li> <li>Remove an unnecessary <code>while</code> loop in <code>_stripAllNonNumberCharacters()</code></li> </ul>"},{"location":"Changelog/CHANGELOG/#400-beta13","title":"4.0.0-beta.13","text":"<ul> <li>Modify <code>init()</code> so that it allows the user to also pass an array of DOM elements, or a CSS selector as its first argument (cf. issue #388 comments)</li> </ul>"},{"location":"Changelog/CHANGELOG/#400-beta12","title":"4.0.0-beta.12","text":"<ul> <li>Fix issue #434 Using <code>noSeparatorOnFocus</code> set to <code>noSeparator</code> should not remove the decimal character on focus</li> </ul>"},{"location":"Changelog/CHANGELOG/#400-beta11","title":"4.0.0-beta.11","text":"<ul> <li>Merge the Android support from <code>2.0.12</code> into <code>4.0.0-beta.*</code></li> </ul>"},{"location":"Changelog/CHANGELOG/#400-beta10","title":"4.0.0-beta.10","text":"<ul> <li>Reorganize the existing unit tests and add more to extend the coverage</li> <li>Add a new <code>setValue()</code> method that allow the user to set any values, without any controls from AutoNumeric.</li> <li>Replace all the calls to <code>setElementValue</code> then <code>_setRawValue</code> with either <code>setValue()</code> or <code>_setElementAndRawValue()</code>, so that this call order is respected.</li> <li>Rewrite <code>setUnformatted()</code> so that it checks and validates the value given by the user.</li> <li>Fix <code>options.createLocalList()</code> so that modifying the option will create/delete the local list accordingly.</li> <li>Fix <code>selectDecimal()</code> so that the decimals are correctly selected when <code>decimalPlacesShownOnFocus</code> is used.</li> <li>Add a thin unbreakable space<code>\\u202f</code> in front of <code>%</code> in the predefined options <code>percentageEU*</code> (as per the typographic rules).</li> </ul>"},{"location":"Changelog/CHANGELOG/#400-beta9","title":"4.0.0-beta.9","text":"<ul> <li>Fix issue #425 The <code>minimumValue</code> and <code>maximumValue</code> options are not respected when <code>emptyInputBehavior</code> is set to <code>'zero'</code></li> </ul>"},{"location":"Changelog/CHANGELOG/#400-beta8","title":"4.0.0-beta.8","text":"<ul> <li>Fix issue #248 Create the <code>autoNumeric</code> organization, and move the repository to it</li> </ul>"},{"location":"Changelog/CHANGELOG/#400-beta7","title":"4.0.0-beta.7","text":"<ul> <li>Fix issue #427 <code>autoUnformat()</code> converts <code>digitGroupSeparator</code> set to <code>.</code> as the decimal character</li> <li>Modify <code>AutoNumeric.unformat()</code> so that 'real' javascript number are always directly returned, without taking into account the options passed (as it was supposed to do previously).</li> <li>Correctly take into account the number of decimal places, the negative brackets, rounding and the suffix text options when unformatting with <code>AutoNumeric.unformat()</code>.</li> <li>Complete the <code>AutoNumeric.unformat()</code> unit tests.</li> <li>Modify <code>_removeBrackets()</code> so that we can only remove the brackets, without reordering the negative sign, currency symbol and value according to the settings.</li> </ul>"},{"location":"Changelog/CHANGELOG/#400-beta6","title":"4.0.0-beta.6","text":"<ul> <li>Fix issue #414 Changing the value of an element from negative to positive is not possible for some specific configuration of brackets, for the second time.</li> <li>Remove the need to keep an ambiguous <code>settings.trailingNegative</code> variable, that was used for other things that its names suggests.</li> <li>Extract the <code>_isTrailingNegative</code> test to its own function.</li> <li>Fix <code>_convertToNumericString()</code> to make it remove the <code>suffixText</code> as well.</li> <li>Use array destructuring to simplify the <code>_setValueParts()</code> function.</li> <li>Remove the attribute <code>newValue</code> polluting <code>this</code>, which allow to explicitly pass the needed information.</li> <li>Merge <code>this.settings.hasFocus</code> into <code>this.isFocused</code>.</li> <li>Remove the need for the <code>this.settings.strip</code> variable.</li> <li>Modify the event listener from <code>'focusin'</code> to <code>'focus'</code>, in order to prepare for the merge of <code>_onFocusInAndMouseEnter()</code> and <code>_onFocus()</code> handlers.</li> <li>Modify <code>_cleanLeadingTrailingZeros()</code> so that the trailing zeroes if correctly done, even if <code>leadingZero</code> is set to <code>keep</code>.</li> <li>Rename <code>_cleanLeadingTrailingZeros()</code> to <code>_trimLeadingAndTrailingZeros()</code>.</li> <li>Change the <code>_addGroupSeparators()</code> signature so that the focused state is explicitly passed as a parameter, instead of piggy-backing on the settings object.</li> <li>Add a <code>_setTrailingNegativeSignInfo()</code> function that parse the settings and initialize once the <code>this.isTrailingNegative</code> property if the negative sign should be trailing for negative values.</li> <li>Rename the <code>leftOrAll</code> parameter from <code>_stripAllNonNumberCharacters()</code> to a more meaningful <code>stripZeros</code>.</li> <li>Simplify a test in <code>_truncateDecimalPlaces()</code>.</li> <li>Rename <code>_skipAlways()</code> to <code>_processNonPrintableKeysAndShortcuts()</code>.</li> <li>Add cases to the helper function <code>isNegative()</code> to make it more efficient.</li> <li>Add a new <code>isNegativeWithBrackets()</code> helper function that tests if the given value is a negative with brackets.</li> </ul>"},{"location":"Changelog/CHANGELOG/#400-beta5","title":"4.0.0-beta.5","text":"<ul> <li>Fix issue #416 Add support for changing the element style based on rules</li> <li>Add the <code>styleRules</code> option that allows to modify the element style based on the raw value, but also to call any callbacks whenever this raw value change</li> <li>Reorganize the <code>set()</code> function so that the formatted value is set before setting the <code>rawValue</code>. That way if a callback invoked by a <code>styleRules</code> modify the raw value, it'll be set correctly, since the previous <code>set()</code> call would have already changed the element value via <code>setElementValue()</code>.</li> </ul>"},{"location":"Changelog/CHANGELOG/#400-beta4","title":"4.0.0-beta.4","text":"<ul> <li>Fix issue #409 Do not add decimal padding when a number without decimals has been inserted</li> <li>Fix an issue when you have <code>allowDecimalPadding</code> set to <code>never</code>, then if you delete the decimal places leaving the decimal character, it would not drop that dangling decimal character on focus out.</li> <li>Fix issue #418 Complete the documentation with the AutoNumeric event lifecycle</li> </ul>"},{"location":"Changelog/CHANGELOG/#400-beta3","title":"4.0.0-beta.3","text":"<ul> <li>Fix issue #415 Support undo and redo actions</li> <li>Add a new <code>historySize</code> option that allows to set how many undo states each AutoNumeric object should keep in memory.</li> <li>Always use the <code>_setRawValue()</code> function to set the <code>rawValue</code> ; directly setting <code>this.settings.rawValue = 'foo'</code> is not allowed anymore.</li> <li>Modify the <code>set()</code> function signature by allowing to pass a third parameter to prevent saving the changed state to the history table.</li> <li>Update the <code>keyName</code> enumeration with the capitalized letters.</li> <li>Upgrade the <code>getElementSelection()</code> helper function in order to support contenteditable-enabled elements and hidden inputs.</li> <li>Add an <code>arrayTrim()</code> helper function that trim the start of an array.</li> <li>Create undo/redo end-to-end tests.</li> <li>Reorganize the <code>set()</code> function to keep logical steps together.</li> <li>Rename the old <code>autoFormat.autoNumeric</code> event to the already used <code>autoNumeric:formatted</code> to keep the names consistent.</li> <li>Sort the option list in the <code>_convertOldOptionsToNewOnes()</code> function.</li> <li>Fix issue #423 <code>leadingZero</code> set to <code>keep</code> does not keep the leading zeros under Chrome</li> </ul>"},{"location":"Changelog/CHANGELOG/#400-beta2","title":"4.0.0-beta.2","text":"<ul> <li>Fix issue #413 Manage the drag 'n drop event so that the text dropped in the AutoNumeric element gets formatted accordingly</li> </ul>"},{"location":"Changelog/CHANGELOG/#400-beta1","title":"4.0.0-beta.1","text":"<ul> <li>Up the current <code>next</code> version to <code>v4</code> instead of <code>v3</code>, just because.</li> <li>Add unit tests for the new <code>options.*</code> methods</li> <li>Fix the issue where having <code>emptyInputBehavior</code> equal to <code>always</code> would not reformat the AutoNumeric element correctly if its value is set to the empty string <code>''</code>. </li> <li>Fix the issue where having <code>emptyInputBehavior</code> equal to <code>zero</code> would not reformat the AutoNumeric element correctly if its value is set to the empty string <code>''</code>. </li> <li>Fix the <code>_mergeCurrencySignNegativePositiveSignAndValue()</code> function that did not manage all <code>negativePositiveSignPlacement</code> combinations.</li> <li>Simplify the <code>_mergeCurrencySignNegativePositiveSignAndValue()</code> function.</li> <li>Add function chaining to the <code>options.*</code> methods.</li> </ul>"},{"location":"Changelog/CHANGELOG/#300-beta14","title":"3.0.0-beta.14","text":"<ul> <li>Add unit tests for the new <code>global.*</code> features</li> <li>Fix issue #412 Using <code>set('')</code> does not respect the <code>emptyInputBehavior</code> option when it's set to <code>'always'</code></li> <li>Add a <code>createLocalList</code> option which allow to control whether a local list of AutoNumeric objects should be saved on initializations.</li> <li>Add a <code>global.update()</code> function to update the settings on a local list.</li> <li>Modify the <code>global.clear()</code> function to be able to force a <code>clear</code> call.</li> <li>Add a <code>global.nuke()</code> function to <code>remove</code> then delete the local list DOM element from the DOM.</li> <li>Update the <code>global.clear()</code> function signature with the <code>clear()</code> one.</li> <li>Fix the <code>global.addObject()</code> function that did not update the local list of the added element.</li> <li>Fix the <code>global.addObject()</code> function so that if it add an AutoNumeric object that already has a local list with multiple other AutoNumeric objects, it merges the list.</li> <li>Fix the <code>global.removeObject()</code> function to make it update all the objects local list. Also add special behaviors when an AutoNumeric element removes itself or another one.</li> <li>Fix the <code>global.empty()</code> function to match the <code>removeObject</code> behavior.</li> <li>Simplify the <code>init()</code> method by removing a negation in one of its parameter.</li> <li>Fix the <code>init()</code> method initialization process by preventing creating a local list, then removing it immediately if the user wanted a detached element. Now, the local list is just not created (Using the <code>createLocalList</code> option set to <code>false</code>).</li> <li>Add an end-to-end test for the <code>remove()</code> method.</li> <li>Add a <code>_hasLocalList()</code> method that tests if the AutoNumeric element has a local list and that it has at least one element in it (itself usually).</li> </ul>"},{"location":"Changelog/CHANGELOG/#300-beta13","title":"3.0.0-beta.13","text":"<ul> <li>Fix issue #411 Add the pre-defined Brazilian language configuration</li> </ul>"},{"location":"Changelog/CHANGELOG/#300-beta12","title":"3.0.0-beta.12","text":"<ul> <li>Refactor the hard-coded option values with the <code>AutoNumeric.options</code> object attribute values</li> </ul>"},{"location":"Changelog/CHANGELOG/#300-beta11","title":"3.0.0-beta.11","text":"<ul> <li>Fix issue #320 Use <code>event.key</code> instead of <code>event.keyCode</code> and <code>event.which</code> since those two attributes are deprecated</li> </ul>"},{"location":"Changelog/CHANGELOG/#300-beta10","title":"3.0.0-beta.10","text":"<ul> <li>Add lots of pre-defined options.</li> <li>Those options are <code>dotDecimalCharCommaSeparator</code>, <code>commaDecimalCharDotSeparator</code>, <code>integer</code>, <code>integerPos</code>, <code>integerNeg</code>, <code>float</code>, <code>floatPos</code>, <code>floatNeg</code>, <code>numeric</code>, <code>numericPos</code>, <code>numericNeg</code>, <code>euro</code>, <code>euroPos</code>, <code>euroNeg</code>, <code>euroSpace</code>, <code>euroSpacePos</code>, <code>euroSpaceNeg</code>, <code>percentageEU2dec</code>, <code>percentageEU2decPos</code>, <code>percentageEU2decNeg</code>, <code>percentageEU3dec</code>, <code>percentageEU3decPos</code>, <code>percentageEU3decNeg</code>, <code>dollar</code>, <code>dollarPos</code>, <code>dollarNeg</code>, <code>percentageUS2dec</code>, <code>percentageUS2decPos</code>, <code>percentageUS2decNeg</code>, <code>percentageUS3dec</code>, <code>percentageUS3decPos</code> and <code>percentageUS3decNeg</code>.</li> <li>Add the unit tests for those pre-defined options.</li> <li>Update the readme accordingly, doing a distinction between the 'Predefined language options' and the 'Predefined common options'.</li> <li>Rename <code>getLanguages()</code> to <code>getPredefinedOptions()</code>.</li> <li>Add the percentage, permille and basis point sign to the default <code>suffixText</code> options.</li> <li>Add a test to warn the user when the given CSS selector does not select any element during initialization.</li> <li>Fix the initialization problem when searching for a parent  on an element that has no parentNode. <li>Re-order alphabetically the default settings</li> <li>Replace the hard-coded default option values with references to the <code>AutoNumeric.options</code> object values.</li> <li>Re-order alphabetically the options enumeration.</li> <li>Add more choices for some options.</li> <li>Rename default options value names to more meaningful descriptions.</li> <li>Change the default option <code>selectNumberOnly</code> value to <code>true</code></li> <li>Simplify the <code>AutoNumeric.languageOptions</code> object.</li> <li>Add the 'dot' character to the <code>decimalCharacterAlternative</code> option enumeration.</li> <li>Update the end-to-end tests that test the element value selection on focus, to reflect the change to the default value for <code>selectNumberOnly</code>.</li> <li>Update the unit tests to correct the rounding on some values that used the previous default one defined in <code>AutoNumeric.languageOptions.French</code>.</li>"},{"location":"Changelog/CHANGELOG/#300-beta9","title":"3.0.0-beta.9","text":"<ul> <li>Fix and removes some TODOs and FIXMEs</li> <li>Remove some debug messages.</li> <li>Remove the need to initialize the <code>savedCancellableValue</code> variable when unneeded.</li> <li>Check and remove the unnecessary <code>hasFocus</code> calls and sets.</li> <li>Add regex caching to the static <code>format()</code> function, since this used the <code>_addGroupSeparators</code> function that calls the <code>_stripAllNonNumberCharacters</code> one that extensively uses those.</li> <li>Rename the temporary settings copy, and move those out of the <code>this.settings</code> object.</li> <li>Prevent setting the value with <code>set()</code> if the value hasn't changed when calling the 'cancellable' event.</li> <li>Rename <code>_setsAlternativeDecimalSeparatorCharacter()</code> to <code>_setAlternativeDecimalSeparatorCharacter()</code>.</li> <li>Remove the unused and deprecated <code>aScale</code> reference from a test.</li> <li>Move away from the <code>this.settings</code> object the following variables : <code>caretFix</code>, <code>throwInput</code>, <code>tagList</code>, <code>originalDecimalPlacesOverride</code>, <code>originalAllowDecimalPadding</code>, <code>originalNegativeBracketsTypeOnBlur</code>, <code>originalDigitGroupSeparator</code>, <code>originalCurrencySymbol</code>, <code>originalSuffixText</code> and <code>aNegRegAutoStrip</code>.</li> <li>Refactor some tests in <code>_formatValue()</code>.</li> </ul>"},{"location":"Changelog/CHANGELOG/#300-beta8","title":"3.0.0-beta.8","text":"<ul> <li>Fix issue #408 Allow brackets and parenthesis to be added for negative numbers on any combination of <code>currencySymbolPlacement</code> and <code>negativePositiveSignPlacement</code> values</li> </ul>"},{"location":"Changelog/CHANGELOG/#300-beta7","title":"3.0.0-beta.7","text":"<ul> <li>Rename autoNumeric.js to AutoNumeric.js (since it's now a module)</li> </ul>"},{"location":"Changelog/CHANGELOG/#300-beta6","title":"3.0.0-beta.6","text":"<ul> <li>Finish merging the fixes for #403 and #401 into v3, and fix the introduced bugs</li> <li>Make sure that if an element is focused, and a <code>mouseleave</code> event is captured, we do not unformat the element value (with the scale options).</li> <li>Make sure if the element value is empty, that the scaleDivisor option do not convert it to <code>'0.00'</code> on <code>mouseenter</code>.</li> <li>Remove a ternary operator which lead to a variable overwriting itself.</li> <li>Fix the end-to-end tests which test the percentage with the scale options.</li> </ul>"},{"location":"Changelog/CHANGELOG/#300-beta5","title":"3.0.0-beta.5","text":"<ul> <li>Fix issue #395 Allow to show the unformatted value when hovering over the element and pressing <code>Alt</code></li> </ul>"},{"location":"Changelog/CHANGELOG/#300-beta4","title":"3.0.0-beta.4","text":"<ul> <li>Fix issue #396 Allow autoNumeric to manage user inputs in <code>contentEditable</code>-enabled elements</li> <li>Simplify the <code>_formatDefaultValueOnPageLoad()</code> method signature.</li> <li>Simplify how the <code>update()</code> function retrieve the current raw value and one of its test.</li> <li>Remove any direct access to <code>this.domElement.value</code>, and use the <code>getElementValue()</code> to access the element <code>value</code> or <code>textContent</code>, and <code>setElementValue()</code> to set it.</li> <li>Rewrite the <code>getElementSelection()</code> and <code>setElementSelection()</code> functions in order to manage non-input DOM elements.</li> <li>Strengthen <code>getElementValue()</code> when managing non-input DOM elements.</li> </ul>"},{"location":"Changelog/CHANGELOG/#300-beta3","title":"3.0.0-beta.3","text":"<ul> <li>Fix issue #399 Fully convert autoNumeric to an ES6 module</li> <li>Fix issue #398 Finish removing all jQuery dependencies</li> <li>Fix issue #244 [Feature request] Remove the jQuery dependency</li> <li>Add an entry point <code>src/main.js</code> for bundling the library.</li> <li>Split the library into 3 files ; </li> <li><code>autoNumeric.js</code>, which contains the AutoNumeric class,</li> <li><code>AutoNumericEnum.js</code> which contains the enumerations used by AutoNumeric, and</li> <li> <p><code>AutoNumericHelper.js</code> which contains the AutoNumericHelper class which provides static helper functions.</p> </li> <li> <p>Extract the <code>allowedTagList</code>, <code>keyCode</code> and <code>keyName</code> into <code>AutoNumericEnum</code>.</p> </li> <li>Add the <code>isEmptyString</code>, <code>isNumberOrArabic</code>, <code>isFunction</code>, <code>isElement</code>, <code>isInputElement</code>, <code>arabicToLatinNumbers</code>, <code>triggerEvent</code>, <code>randomString</code>, <code>getElementValue</code>, <code>setElementValue</code>, <code>cloneObject</code>, <code>camelize</code>, <code>text</code>, <code>setText</code> and <code>filterOut</code> functions to the helper functions.</li> <li>Move the <code>preparePastedText</code>, <code>runCallbacksFoundInTheSettingsObject</code>, <code>maximumVMinAndVMaxDecimalLength</code>, <code>stripAllNonNumberCharacters</code>, <code>toggleNegativeBracket</code>, <code>convertToNumericString</code>, <code>toLocale</code>, <code>modifyNegativeSignAndDecimalCharacterForRawValue</code>, <code>modifyNegativeSignAndDecimalCharacterForFormattedValue</code>, <code>checkEmpty</code>, <code>addGroupSeparators</code>, <code>truncateZeros</code>, <code>roundValue</code>, <code>truncateDecimal</code>, <code>checkIfInRangeWithOverrideOption</code> functions into the AutoNumeric object.</li> <li>Improve the <code>character()</code> method to take into account the quirks of some obsolete browsers.</li> <li>Remove the <code>getCurrentElement()</code> function since we now only need to access the <code>this.domElement</code> property.</li> <li>Remove the <code>AutoNumericHolder</code> class and the <code>getAutoNumericHolder()</code> function since we are now using the AutoNumeric class as the 'property holder'.</li> <li>Add multiple ways to initialize an AutoNumeric element (cf. the AutoNumeric constructor and the <code>_setArgumentsValues()</code> method).</li> <li>Simplify the input type and tag support check.</li> <li>Add the <code>serializeSpaces</code> option that allows the user to defines how the serialize function will managed the spaces, either by converting them to <code>'%20'</code>, or to the <code>'+'</code> string, the latter now being the default.</li> <li>Add the <code>noEventListeners</code> option that allows the user to initialize an AutoNumeric <code>&lt;input&gt;</code> element without adding any AutoNumeric event listeners.</li> <li>Add the <code>readOnly</code> option to the settings that allow the <code>&lt;input&gt;</code> element to be set to read-only on initialization.</li> <li>Add a feature where all AutoNumeric-managed elements in a page share a common list.</li> <li>Add a feature where the AutoNumeric-managed elements that initialized each other share a common list, allowing the user to perform a single action on many elements at once (via the <code>.global.*</code> functions).</li> <li>Add a <code>isPristine()</code> method to test if an AutoNumeric-managed element <code>value</code>/<code>textContent</code> has been changed since its initialization.</li> <li>Rename <code>unset</code> to <code>unformat</code>.</li> <li>Rename <code>reSet</code> to <code>reformat</code>.</li> <li>Add an <code>unformatLocalized()</code> function to unformat the element value while using the <code>outputFormat</code> setting.</li> <li>Add a <code>clear()</code> method to empty the element value.</li> <li>Add a <code>nuke()</code> method to remove the DOM element from the DOM tree.</li> <li>Add a <code>.global.has()</code> method to check if the given AutoNumeric object (or DOM element) is in the local AutoNumeric element list.</li> <li>Add a <code>.global.addObject()</code> method that adds an existing AutoNumeric object (or DOM element) to the local AutoNumeric element list.</li> <li>Add a <code>.global.removeObject()</code> method that removes the given AutoNumeric object (or DOM element) from the local AutoNumeric element list.</li> <li>Add a <code>.global.empty()</code> method to remove all elements from the shared list.</li> <li>Add a <code>.global.elements()</code> method to retrieve all the AutoNumeric object that share the same local list.</li> <li>Add a <code>.global.getList()</code> method to retrieve the local AutoNumeric element list.</li> <li>Add one function for updating each option individually (ie. anElement.options.decimalCharacter('.')) instead of having to pass an object.</li> <li>Add a <code>version()</code> method to output the current AutoNumeric version (for debug purpose).</li> <li>Fix the <code>set()</code> method so that the <code>rawValue</code> is updated when the value is set to <code>''</code>.</li> <li>Add a <code>setUnformatted()</code> method to set the value given value directly as the DOM element value, without formatting it beforehand.</li> <li>Deprecate the <code>get()</code> method to the renamed <code>getNumericString()</code> which bares more meaning.</li> <li>Add a <code>getFormatted()</code> method to retrieve the current formatted value of the AutoNumeric element as a string.</li> <li>Add a <code>getNumber()</code> method that returns the element unformatted value as a real Javascript number.</li> <li>Add a <code>getLocalized()</code> method that returns the unformatted value, but following the <code>outputFormat</code> setting.</li> <li>Add a <code>unformatLocalized()</code> method that unformats the element value by removing the formatting and keeping only the localized unformatted value in the element.</li> <li>Add a <code>selectNumber()</code> method that select only the numbers in the formatted element content, leaving out the currency symbol, whatever the value of the <code>selectNumberOnly</code> option.</li> <li>Add a <code>selectInteger()</code> method that select only the integer part in the formatted element content, whatever the value of the <code>selectNumberOnly</code> option.</li> <li>Add a <code>selectDecimal()</code> method that select only the decimal part in the formatted element content, whatever the value of <code>selectNumberOnly</code>.</li> <li>Add a <code>node()</code> method that returns the DOM element reference of the autoNumeric-managed element.</li> <li>Add a <code>parent()</code> method that returns the DOM element reference of the parent node of the autoNumeric-managed element.</li> <li>Add a <code>detach()</code> method that detach the current AutoNumeric element from the shared local 'init' list.</li> <li>Add an <code>attach()</code> method that attach the given AutoNumeric element to the shared local 'init' list.</li> <li>Add a <code>formatOther()</code> method that format and return the given value, or set the formatted value into the given DOM element if one is passed as an argument.</li> <li>Add an <code>unformatOther()</code> method that unformat and return the raw numeric string corresponding to the given value, or directly set the unformatted value into the given DOM element if one is passed as an argument.</li> <li>Add an <code>init()</code> method that allows to use the current AutoNumeric element settings to initialize the DOM element given as a parameter. This effectively link the two AutoNumeric element by making them share the same local AutoNumeric element list.</li> <li>Add a <code>form()</code> method that return a reference to the parent  element if it exists, otherwise return <code>null</code>. <li>Add a <code>formNumericString()</code> method that returns a string in standard URL-encoded notation with the form input values being unformatted.</li> <li>Add a <code>formFormatted()</code> method that returns a string in standard URL-encoded notation with the form input values being formatted.</li> <li>Add a <code>formLocalized()</code> method that returns a string in standard URL-encoded notation with the form input values, with localized values.</li> <li>Add a <code>formArrayNumericString()</code> method that returns an array containing an object for each form <code>&lt;input&gt;</code> element.</li> <li>Add a <code>formArrayFormatted()</code> method that returns an array containing an object for each form <code>&lt;input&gt;</code> element, with the value formatted.</li> <li>Add a <code>formArrayLocalized()</code> method that returns an array containing an object for each form <code>&lt;input&gt;</code> element, with the value localized.</li> <li>Add a <code>formJsonNumericString()</code> method that returns a JSON string containing an object representing the form input values.</li> <li>Add a <code>formJsonFormatted()</code> method that returns a JSON string containing an object representing the form input values, with the value formatted.</li> <li>Add a <code>formJsonLocalized()</code> method that returns a JSON string containing an object representing the form input values, with the value localized.</li> <li>Add a <code>formUnformat()</code> method that unformat all the autoNumeric-managed elements that are a child of the parent  element of this DOM element, to numeric strings. <li>Add a <code>formUnformatLocalized()</code> method that unformat all the autoNumeric-managed elements that are a child of the parent  element of this DOM element, to localized strings. <li>Add a <code>formReformat()</code> method that reformat all the autoNumeric-managed elements that are a child of the parent  element of this DOM element. <li>Add a <code>formSubmitNumericString()</code> method that convert the input values to numeric strings, submit the form, then reformat those back.</li> <li>Add a <code>formSubmitFormatted()</code> method that submit the form with the current formatted values.</li> <li>Add a <code>formSubmitLocalized()</code> method that convert the input values to localized strings, submit the form, then reformat those back.</li> <li>Add a <code>formSubmitArrayNumericString()</code> method that generate an array of numeric strings from the <code>&lt;input&gt;</code> elements, and pass it to the given callback.</li> <li>Add a <code>formSubmitArrayFormatted()</code> method that generate an array of the current formatted values from the <code>&lt;input&gt;</code> elements, and pass it to the given callback.</li> <li>Add a <code>formSubmitArrayLocalized()</code> method that generate an array of localized strings from the <code>&lt;input&gt;</code> elements, and pass it to the given callback.</li> <li>Add a <code>formSubmitJsonNumericString()</code> method that generate a JSON string with the numeric strings values from the <code>&lt;input&gt;</code> elements, and pass it to the given callback.</li> <li>Add a <code>formSubmitJsonFormatted()</code> method that generate a JSON string with the current formatted values from the <code>&lt;input&gt;</code> elements, and pass it to the given callback.</li> <li>Add a <code>formSubmitJsonLocalized()</code> method that generate a JSON string with the localized strings values from the <code>&lt;input&gt;</code> elements, and pass it to the given callback.</li> <li>Add a static <code>test()</code> method that if the given domElement is already managed by AutoNumeric (if it has been initialized on the current page).</li> <li>Add multiple private methods to create and delete a global list of AutoNumeric objects (via a WeakMap), as well as the methods to add and remove elements to that list.</li> <li>Add multiple private methods to manage the local enumerable list of AutoNumeric objects that are initialized together and share a common local list.</li> <li>Add the private methods <code>_mergeSettings()</code> and <code>_cloneAndMergeSettings()</code> to do what they are named about.</li> <li>Modify the static <code>format()</code> method so that it formats the given number (or numeric string) with the given options, and returns the formatted value as a string.</li> <li>Add a static <code>formatAndSet()</code> method that format the given DOM element value, and set the resulting value back as the element value.</li> <li>Modify the static <code>unformat()</code> method so that it unformats the given formatted string with the given options, and returns a numeric string.</li> <li>Add a static <code>unformatAndSet()</code> method that unformat the given DOM element value, and set the resulting value back as the element value.</li> <li>Add a static <code>localize()</code> method that unformat and localize the given formatted string with the given options, and returns a numeric string.</li> <li>Add a static <code>isManagedByAutoNumeric()</code> method that returns <code>true</code> is the given DOM element has an AutoNumeric object that manages it.</li> <li>Add a static <code>getAutoNumericElement()</code> method that returns the AutoNumeric object that manages the given DOM element.</li> <li>Add the <code>french()</code>, <code>northAmerican()</code>, <code>british()</code>, <code>swiss()</code>, <code>japanese()</code>, <code>spanish()</code> and <code>chinese()</code> methods that update the settings to use the named pre-defined language options.</li> <li>Convert some cryptic ternary statements to if/else block.</li> <li>Remove the unknown parameter <code>setReal</code> from some functions.</li> <li>Remove the need to pass around the settings in many functions signatures (using <code>this.settings</code> directly).</li> <li>Rename the temporary variables created by coping some settings, with the new option names.</li> <li>Correct the warning shown when using <code>isNan()</code> on non-number elements like strings.</li> <li>Keep the focus status of the DOM element in the new <code>this.isFocused</code> variable.</li> <li>Use the <code>getElementValue()</code> function to retrieve the element <code>value</code> or <code>textContent</code> (depending if the element in an <code>&lt;input&gt;</code> or another tag), which allow AutoNumeric to perform some operations on non-input elements too. This is the first changes needed for the goal of managing the non-input tags with <code>contentEditable</code> with AutoNumeric.</li> <li>Use the <code>getElementValue()</code> function as well in order to be able to set the <code>value</code> or <code>textContent</code> transparently where needed.</li> <li>Rename <code>_updateAutoNumericHolderProperties()</code> to <code>_updateInternalProperties()</code>.</li> <li>Complete some JSDoc to be more precise on the event or element types. This helps for IDE autocompletion.</li> <li>Rewrite completely how AutoNumeric test if the given DOM element is supported or not (by using the new <code>_checkElement()</code> method). This simplify the process by calling the new <code>_isElementTagSupported()</code>, <code>_isInputElement()</code> and <code>_isInputTypeSupported()</code> functions which respect the separation of concerns.</li> <li>The <code>_formatDefaultValueOnPageLoad()</code> method now accepts a 'forced' initial value instead of the default one.</li> <li>Remove the tests about the input type or element support from the <code>set()</code> methods, since those cannot change once AutoNumeric has been initialized, simplifying the code.</li> <li>Remove duplicated tests (ie. <code>settings.formatOnPageLoad</code> inside the <code>formatDefaultValueOnPageLoad()</code> function that is only called if <code>settings.formatOnPageLoad</code> is already set).</li> <li>Rename the <code>getInitialSettings()</code> method to <code>_setSettings()</code>.</li> <li>Use array destructuring to give more meaningful names to the data returned by the <code>_getSignPosition()</code> function.</li> <li>Add a private <code>_serialize()</code> function that take care of serializing the form data into multiple output as needed, which is called by the <code>_serializeNumericString()</code>, <code>_serializeFormatted()</code>,<code>_serializeLocalized()</code>, <code>_serializeNumericStringArray()</code>, <code>_serializeFormattedArray()</code> and <code>_serializeLocalizedArray()</code> methods.</li> <li>The default settings are now exposed on the AutoNumeric class as a static object <code>AutoNumeric.defaultSettings</code>.</li> <li>Add the static <code>AutoNumeric.options</code> object that gives access to all the possible options values, with a semantic name (handy for IDE autocompletion).</li> <li>The pre-defined language options objects are now accessible via the static <code>AutoNumeric.languageOptions</code> object.</li> <li>Add the static <code>AutoNumeric.multiple()</code> function that allows to initialize numerous AutoNumeric object (on numerous DOM elements) in one call (and possibly pass multiple values that will be mapped to each DOM element).</li> <li>Add end-to-end tests for initializing non-<code>&lt;input&gt;</code> tags.</li> <li>Add e2e tests for initializing elements with the <code>noEventListeners</code> or <code>readOnly</code> options.</li> <li>Convert the end-to-end tests to the new API v3.</li> <li>Convert the unit tests to the new API v3.</li> <li>Add unit tests for the <code>serializeSpaces</code>, <code>noEventListeners</code> and <code>readOnly</code> options.</li> <li>Fix the unit tests checking that the <code>rawValue</code> was correctly set when using <code>getSettings()</code>.</li> <li>Add unit tests to check the <code>.global.*</code> methods.</li> <li>Add unit tests to check the <code>AutoNumeric.multiple()</code> methods.</li> <li>Add unit tests to check the <code>selectDecimal</code>, <code>selectInteger</code>, <code>reformat</code>, <code>unformat</code> and <code>unformatLocalized</code> methods.</li> <li>Add unit tests to check the <code>.form*</code> methods.</li> <li>Add the <code>babel-plugin-transform-object-assign</code> dev dependency in order to be able to use <code>Object.assign()</code> in the ES6 source.</li>"},{"location":"Changelog/CHANGELOG/#300-beta2","title":"3.0.0-beta.2","text":"<ul> <li>Fix issue #393 Add an option <code>modifyValueOnWheel</code> that allow the user to use mouse wheel to increment/decrement the element value</li> <li>The related <code>wheelStep</code> option allows to either define a fixed step (ie. <code>1000</code>), or a progressive one calculated based on the current element value</li> <li>Fix issue #397 Create enumerations for every options that allows only a set of values</li> </ul>"},{"location":"Changelog/CHANGELOG/#300-beta1","title":"3.0.0-beta.1","text":"<ul> <li>Fix issue #387 Add a 'cancellable' feature</li> <li>It's now possible to select the whole input by hitting the <code>Escape</code> key (if no changes have been made to the element value, otherwise this will cancel those changes if the <code>isCancellable</code> is set to <code>true</code>)</li> <li>Fix issue #391 The currency symbol is selected when focusing on an input via the <code>Tab</code> key, when <code>selectNumberOnly</code> is set to <code>true</code></li> <li>Refactor the code to create a <code>_selectOnlyNumbers()</code> function that extract that behavior for re-use.</li> <li>Create a <code>_select()</code> function that select the whole element content, while respecting the <code>selectNumberOnly</code> option.</li> <li>Create a <code>_defaultSelectAll()</code> function that select the whole element content, including all characters.</li> <li>Modify the <code>setElementSelection()</code> calls to simplify them with the ability to use one argument instead of two when the <code>start</code> and <code>end</code> position are the same.</li> <li>Add a feature where when the user hit 'Escape', the element content is selected (cf. issue #387).</li> </ul>"},{"location":"Changelog/CHANGELOG/#v2","title":"v2","text":""},{"location":"Changelog/CHANGELOG/#2013","title":"2.0.13","text":"<ul> <li>Merge the fix from issue #440 Pasting does not work in IE11 from <code>next</code> to <code>master</code>.   This fix the issue #465 \"Unable to get property 'getData' of undefined or null reference\" on paste in IE11</li> <li>Merge the fix from issue #449 <code>AutoNumeric.unformat()</code> only removes the first instance of <code>settings.digitGroupSeparator</code> from <code>next</code> to <code>master</code>.</li> </ul>"},{"location":"Changelog/CHANGELOG/#2012","title":"2.0.12","text":"<ul> <li>Add Android Chrome mobile (version 57) support (note: so far, not all android browsers are supported)</li> <li>Fix issue #404 On the Android browser, inserted numbers are doubled if the user press the keys quickly on the virtual keyboard</li> <li>Fix issue #250 The <code>maximumValue</code> and <code>minimumValue</code> options are not taken into account on Android</li> <li>Fix issue #264 Entering the <code>decimalCharacterAlternative</code> is not taken into account on Android Chrome</li> <li>Add the special keyCode 229 used by Android browsers as <code>keyCode.AndroidDefault</code></li> <li>Fix the <code>onPaste</code> handler throwing an error for uninitialized variables</li> <li>Complete the <code>arabicToLatinNumbers()</code> function to return more quickly if no arabic numbers are found</li> </ul>"},{"location":"Changelog/CHANGELOG/#2011","title":"2.0.11","text":"<ul> <li>Fix issue #248 Create the <code>autoNumeric</code> organization, and move the repository to it</li> </ul>"},{"location":"Changelog/CHANGELOG/#2010","title":"2.0.10","text":"<ul> <li>Fix issue #417 Error thrown in PhantomJS 2.1.1 on Linux under CI Environment</li> <li>Fix the end-to-end tests for issue #403</li> <li>Fix the webdriver.io configuration for the links to jQuery and AutoNumeric libraries</li> </ul>"},{"location":"Changelog/CHANGELOG/#209","title":"2.0.9","text":"<ul> <li>Fix issue #401 autoNumeric 2.0.8 prevents IE11 from entering the decimal character from the numpad</li> <li>Fix issue #403 autoNumeric 2.0.8 scaling option when the divisor is less than zero and the input receives focus multiple times</li> </ul>"},{"location":"Changelog/CHANGELOG/#208","title":"2.0.8","text":"<ul> <li>Fix issue #389 autoNumeric 2.0.7 npm packages causes build error with typescriptify + browserify</li> </ul>"},{"location":"Changelog/CHANGELOG/#205-206-207","title":"2.0.5\", \"2.0.6\" &amp; \"2.0.7","text":"<ul> <li>Fix issue #384 <code>npm install</code> for version 2.0.4 does not work on Windows machines</li> </ul>"},{"location":"Changelog/CHANGELOG/#202-203-204","title":"2.0.2\", \"2.0.3\" &amp; \"2.0.4","text":"<ul> <li>Fix issue #377 The <code>dist</code> files in the last publish to npmjs were not rebuilt with the fixes pushed to 2.0.1</li> <li>Fix issue #373 The <code>dist</code> files are not included when publishing to npmjs</li> <li>Fix issue #371 The currency symbol is not removed on blur with the default <code>emptyInputBehavior</code> value <code>focus</code></li> <li>Fix issue #367 The package.json \"postinstall\" task does not find the target file when not using the dev dependencies</li> </ul>"},{"location":"Changelog/CHANGELOG/#201","title":"2.0.1","text":"<ul> <li>Fix issue #373 The <code>dist</code> files are not included when publishing to npmjs</li> </ul>"},{"location":"Changelog/CHANGELOG/#200","title":"2.0.0","text":"<ul> <li>Release autoNumeric version <code>2.0.0</code>, enjoy! (\u00ac\u203f\u00ac) </li> <li>The old options names are being deprecated, and will be removed soon ; update your scripts with the new ones!</li> <li>Please be sure to read the updated readme in order to know what else has changed. </li> </ul>"},{"location":"Changelog/CHANGELOG/#200-beta25","title":"2.0.0-beta.25","text":"<ul> <li>Fix issue #310 Setup Webdriver.io for end-to-end (e2e) testing</li> </ul>"},{"location":"Changelog/CHANGELOG/#200-beta24","title":"2.0.0-beta.24","text":"<ul> <li>Fix issue #326 Pasting a single decimal character into an input that has none does not work</li> <li>Fix issue #322 Pasting a string containing a comma set the caret position at the wrong position</li> </ul>"},{"location":"Changelog/CHANGELOG/#200-beta23","title":"2.0.0-beta.23","text":"<ul> <li>Fix issue #354 Setup automated coverage tests (with Coveralls)</li> </ul>"},{"location":"Changelog/CHANGELOG/#200-beta22","title":"2.0.0-beta.22","text":"<ul> <li>Fix issue #345 Setup continuous integration testing (with Travis CI)</li> </ul>"},{"location":"Changelog/CHANGELOG/#200-beta21","title":"2.0.0-beta.21","text":"<ul> <li>Fix issue #346 Add a <code>showPositiveSign</code> option to display the positive sign wherever needed</li> </ul>"},{"location":"Changelog/CHANGELOG/#200-beta20","title":"2.0.0-beta.20","text":"<ul> <li>Fix issue #341 Add some default options in the <code>languageOption</code> object</li> <li>Fix issue #328 Switch from <code>npm</code> to <code>yarn</code></li> </ul>"},{"location":"Changelog/CHANGELOG/#200-beta19","title":"2.0.0-beta.19","text":"<ul> <li>Allow using <code>set</code> with Arabic and Persian numbers (ie. <code>aNInput.autoNumeric('set', '\u0661\u0660\u0662\u0663\u0664\u0665\u0666\u0667.\u0668\u0669');</code>)</li> <li>Allow using Arabic and Persian numbers (used in Arabic languages) in the html <code>value</code> attribute</li> <li>Allow pasting Arabic and Persian numbers (that will get converted to latin numbers on the fly)</li> </ul>"},{"location":"Changelog/CHANGELOG/#200-beta18","title":"2.0.0-beta.18","text":"<ul> <li>Fix issue #330 The <code>negativePositiveSignPlacement</code> option can be ignored in some cases</li> <li>Fix issue #339 <code>get</code> returns <code>'0'</code> when the input is empty even if <code>emptyInputBehavior</code> is not equal to <code>'zero'</code></li> </ul>"},{"location":"Changelog/CHANGELOG/#200-beta17","title":"2.0.0-beta.17","text":"<ul> <li>Fix issue #317 Jump over the decimal character when trying to enter a number and the integer part limit has already been attained</li> <li>Fix issue #319 'get' returns wrong value when the value has a trailing negative sign</li> <li>Fix issue #327 When focusing on an input via the <code>Tab</code> key, the value is not always selected </li> </ul>"},{"location":"Changelog/CHANGELOG/#200-beta16","title":"2.0.0-beta.16","text":"<ul> <li>Fix issue #321 Allows more international decimal characters and grouping separators :</li> <li>Allowed grouping separator : <code>','</code>, <code>'.'</code>, <code>'\u066c'</code>, <code>'\u02d9'</code>, <code>\"'\"</code>, <code>' '</code>, <code>'\\u2009'</code>, <code>'\\u202f'</code>, <code>'\\u00a0'</code> and <code>''</code></li> <li>Allowed decimal characters : <code>'.'</code>, <code>','</code>, <code>'\u00b7'</code>, <code>'\u2396'</code> and <code>'\u066b'</code></li> </ul>"},{"location":"Changelog/CHANGELOG/#200-beta15","title":"2.0.0-beta.15","text":"<ul> <li>Fix FireFox on issue #306 that allows the caret to move right when all zero present in the decimals</li> <li>Fix issue #318 <code>this.selection</code> can be uninitialized if you focus on an input via the <code>Tab</code> key.</li> <li>Add the <code>keyName</code> object that list the key values as defined is the KeyboardEvent Key_Values.</li> <li>Rename the <code>key()</code> function to <code>keyCodeNumber()</code>.</li> <li>Split <code>_updateFieldProperties()</code> into <code>_updateAutoNumericHolderProperties()</code> and <code>_updateAutoNumericHolderEventKeycode()</code>.</li> <li><code>_updateAutoNumericHolderProperties()</code> only update the value and selection in each event handler, and resets the 'processed' and 'formatted' states.</li> <li><code>_updateAutoNumericHolderEventKeycode()</code> is called only once on <code>keypress</code>, and set the event keyCode into the AutoNumericHolder object.</li> <li>Remove the need to save <code>this.ctrlKey</code>, <code>this.cmdKey</code> and <code>this.shiftKey</code> three times on each key stroke.</li> <li>Rename <code>this.kdCode</code> into <code>this.eventKeyCode</code>, and use that variable globally in the AutoNumericHolder object.</li> <li>Fix <code>_normalizeParts()</code> so that a '0' entered via the numpad is managed as well.</li> <li>Complete the substitution of magic numbers with <code>keyCode</code> values.</li> <li>Modify <code>_processCharacterInsertion()</code> so that it take the event as an argument, and therefore can directly use <code>e.key</code>.</li> <li>Simplify <code>_formatValue()</code> tests.</li> </ul>"},{"location":"Changelog/CHANGELOG/#200-beta14","title":"2.0.0-beta.14","text":"<ul> <li>Fix issue #306 when { leadingZero: 'deny' } and proper caret placement</li> </ul>"},{"location":"Changelog/CHANGELOG/#200-beta13","title":"2.0.0-beta.13","text":"<ul> <li>Fix issue #228 Do not modify the current selection when trying to input an invalid character</li> <li>Mass rename functions to gives them a more explicit name :</li> </ul> Old name New name autoCheck() -&gt; checkIfInRangeWithOverrideOption() autoRound() -&gt; roundValue() autoGroup() -&gt; addGroupSeparators() fixNumber() -&gt; modifyNegativeSignAndDecimalCharacterForRawValue() presentNumber() -&gt; modifyNegativeSignAndDecimalCharacterForFormattedValue() negativeBracket() -&gt; toggleNegativeBracket() autoGet() -&gt; getCurrentElement() getHolder() -&gt; getAutoNumericHolder() autoSave() -&gt; saveValueToPersistentStorage() _setPosition() -&gt; _setCaretPosition() _signPosition() -&gt; _getSignPosition() _formatQuick() -&gt; _formatValue()"},{"location":"Changelog/CHANGELOG/#200-beta12","title":"2.0.0-beta.12","text":"<ul> <li>Modify the <code>validate()</code> function to show a warning when <code>decimalPlacesOverride</code> is greater than <code>decimalPlacesShownOnFocus</code>.</li> <li>Implement feature request #183 that manage invalid results when trying to paste any number. This adds the <code>onInvalidPaste</code> option that can accept the <code>error</code>, <code>ignore</code>, <code>clamp</code>, <code>truncate</code> and <code>replace</code> value.</li> <li>Rename <code>autoStrip()</code> to <code>stripAllNonNumberCharacters()</code>.</li> <li>Upgrade the <code>setElementSelection()</code> function so that it can accept only one caret position.</li> <li>Add a <code>failOnUnknownOption</code> option which allows autoNumeric to strictly analyse the options passed, and fails if an unknown options is used in the settings object.</li> </ul>"},{"location":"Changelog/CHANGELOG/#200-beta11","title":"2.0.0-beta.11","text":"<ul> <li>Fix typos and missing characters that prevented building the library.</li> </ul>"},{"location":"Changelog/CHANGELOG/#200-beta10","title":"2.0.0-beta.10","text":"<ul> <li>Fix issue #302 <code>leadingZero</code> option <code>deny</code> does not function correctly and deletes some of the zero to the right of the caret</li> <li>Fix issue #303 When focusing on an input having <code>currencySymbolPlacement</code> set as <code>p</code> (prefix)</li> </ul>"},{"location":"Changelog/CHANGELOG/#200-beta9","title":"2.0.0-beta.9","text":"<ul> <li>Rename the old options name to more explicit ones :</li> </ul> Old name New name aSep -&gt; digitGroupSeparator nSep -&gt; noSeparatorOnFocus dGroup -&gt; digitalGroupSpacing aDec -&gt; decimalCharacter altDec -&gt; decimalCharacterAlternative aSign -&gt; currencySymbol pSign -&gt; currencySymbolPlacement pNeg -&gt; negativePositiveSignPlacement aSuffix -&gt; suffixText oLimits -&gt; overrideMinMaxLimits vMax -&gt; maximumValue vMin -&gt; minimumValue mDec -&gt; decimalPlacesOverride eDec -&gt; decimalPlacesShownOnFocus scaleDecimal -&gt; scaleDecimalPlaces aStor -&gt; saveValueToSessionStorage mRound -&gt; roundingMethod aPad -&gt; allowDecimalPadding nBracket -&gt; negativeBracketsTypeOnBlur wEmpty -&gt; emptyInputBehavior lZero -&gt; leadingZero aForm -&gt; formatOnPageLoad sNumber -&gt; selectNumberOnly anDefault -&gt; defaultValueOverride unSetOnSubmit -&gt; unformatOnSubmit outputType -&gt; outputFormat debug -&gt; showWarnings <ul> <li>Add a <code>convertOldOptionsToNewOnes()</code> function that automatically convert old options to new ones, to ease the evolution to v2.*.</li> <li>Update <code>typings.d.ts</code> accordingly</li> <li>Update <code>README.md</code> accordingly</li> <li>Complete the tests to make sure using old option names will output a warning about them being deprecated</li> </ul>"},{"location":"Changelog/CHANGELOG/#200-beta8","title":"2.0.0-beta.8","text":"<ul> <li>Fix issue #292 where native input and change events are not sent correctly.</li> <li>Add a <code>isNumber()</code> helper function to test if a value is a number, or a string representing a number.</li> <li>Add a <code>isInt()</code> helper function to test if a value is a 'real' integer.</li> <li>Modify <code>decimalPlaces()</code> so that it always return the number of decimal places (ie. <code>0</code> instead of <code>null</code> if there is none). </li> <li>Add a <code>key()</code> helper function to retrieve an event keyCode.</li> <li>Complete and improve some JSDoc.</li> <li>Rename <code>runCallbacks()</code> into <code>runCallbacksFoundInTheSettingsObject()</code>.</li> <li>Simplify <code>decLength()</code> function, as well as removing unnecessary code before each call to this function.</li> <li>Rename <code>decLength()</code> to <code>maximumVMinAndVMaxDecimalLength()</code>.</li> <li>Drastically improve performance by removing duplicated function calls.</li> <li>Improve <code>autoCode()</code> call hierarchy.</li> <li>Merge <code>autoCode()</code> into <code>getInitialSettings()</code>.</li> <li>Caches an additional regex.</li> <li>Rename some functions and variables to make them more explicit.</li> <li>Refactor <code>autoGroup()</code> to use switch statements.</li> <li>Refactor how <code>dPos</code> was used to make it more understandable.</li> <li>Rename <code>keepOriginalSettings</code> into <code>keepAnOriginalSettingsCopy()</code>.</li> <li>Simplify <code>autoSave()</code> so that it directly uses the element as an argument, instead of a jQuery reference.</li> <li>Create an AutoNumericHolder ES6 class to store the field properties of an autoNumeric element.</li> <li>Rename the AutoNumericHolder <code>init()</code> function to <code>_updateFieldProperties()</code>.</li> <li>Rename the AutoNumericHolder functions that should be private.</li> <li>Fix issue #283.</li> <li>Rename <code>processAlways()</code> into <code>_processCharacterDeletion()</code>, and simplify it so that if does not do two things at the same time.</li> <li>Rename <code>processKeypress()</code> into <code>_processCharacterInsertion()</code>, and simplify it so that if does not do two things at the same time.</li> <li>Merge some conditions in <code>_formatQuick()</code>.</li> <li>Remove the need for a jQuery dependency in the events listeners.</li> <li>Convert some jQuery event listeners to pure JS event listeners.</li> <li>Convert some jQuery-specific functions to native JS ones (ie. <code>$this.val()</code> to <code>e.target.value</code>).</li> <li>Simplify the event listeners by removing any unused returns.</li> <li>Remove unnecessary <code>getHolder()</code> calls in the event listeners.</li> <li>Make the 'enter' key send a <code>change</code> event when used and the value has been changed.</li> <li>Add an <code>onBlur</code> event listener, allowing us to trigger <code>change</code> events as needed.</li> <li>Reduce <code>getInitialSettings()</code> length by a great deal, making it easier to read and understand.</li> <li>The <code>getInitialSettings()</code> functions now calls the <code>calculateVMinAndVMaxIntegerSizes()</code>, <code>correctMDecOption()</code>, <code>setsAlternativeDecimalSeparatorCharacter()</code>, <code>cachesUsualRegularExpressions()</code> and <code>transformOptionsValuesToDefaultTypes()</code> functions.</li> <li>Refactor the <code>update()</code> code into <code>getInitialSettings()</code>, which allows to remove the <code>autoCode()</code> calls from the AutoNumericHolder constructor and the <code>_updateFieldProperties()</code> function.</li> <li>Remove the need for jQuery in <code>getSettings()</code>.</li> <li>Modify the <code>validate()</code> test on the <code>mDec</code> option to allow for a positive integer too.</li> <li>Allow the <code>autoFormat()</code> function to format numbers represented as a string.</li> <li>Complete the <code>autoFormat()</code> tests and check for the value validity.</li> <li>Remove the <code>sendCustomEvent()</code> function and replace it by the <code>triggerEvent()</code> one (and remove <code>createCustomEvent()</code> as well).</li> <li>Complete the <code>autoUnFormat()</code> tests and check for the value validity.</li> <li>Modify the <code>autoUnFormat()</code> behavior so that when given a number (a real one or a string representing one), the function always return a 'real' number, whatever the options passed.</li> <li>Modify the eslint 'radix' rule to allow for always specifying a radix for the <code>parseInt</code> function.</li> <li>Comment out the default Jasmine test in order to see a 100% success without any skipped tests.</li> <li>Fix the <code>clean:build</code> npm script so that it does not try to remove an inexistant folder.</li> </ul>"},{"location":"Changelog/CHANGELOG/#200-beta7","title":"2.0.0-beta.7","text":"<ul> <li>Add \"mouseenter\" &amp; \"mouseleave\" handlers to enable viewing the extended values for \"eDec\", \"scaleDivisor\" &amp; \"nSep\" options.</li> <li>Add third parameter to the \"autoGet\" call in \"onFocusOutAndMouseLeave\" function</li> </ul>"},{"location":"Changelog/CHANGELOG/#200-beta6","title":"2.0.0-beta.6","text":"<ul> <li>Rename the <code>localOutput</code> setting to <code>outputType</code>, and add an option 'number' that makes <code>getLocalized</code> always return a Number, instead of a string.</li> <li>Modify the <code>get</code> function so that it always returns a valid Number or string representing a number that Javascript can interpret.</li> <li>Add a <code>getLocalized</code> function that return the raw value of the input, but can also return the value localized with a decimal point and negative sign placement chosen by the user (basically, it replace the old <code>get</code> behavior if any user wants it back).</li> <li>Modify the <code>pNeg</code> default value based on the <code>aSign</code> and <code>pSign</code> values. This leads to better user experience when setting a currency symbol without setting <code>pNeg</code>.</li> <li>Errors are now always thrown. The <code>debug</code> option now only affects the warning messages (used for non-critical errors).</li> </ul>"},{"location":"Changelog/CHANGELOG/#200-beta5","title":"2.0.0-beta.5","text":"<ul> <li>Add a <code>validate()</code> method that checks if the given options object is valid.</li> <li>Reorganize the <code>init</code> function code to check for critical error first, before doing other calculus.</li> <li>Add a <code>areSettingsValid()</code> method that return true if the options object is valid.</li> <li>Add multiple helper functions <code>isBoolean</code>, <code>isNull</code>, <code>isTrueOrFalseString</code>, <code>isObject</code>, <code>isEmptyObj</code>, <code>hasDecimals</code>,  <code>decimalsPlaces</code>.</li> <li>Add a <code>warning()</code> method that output warning message to the console.</li> <li>Rename <code>originalSettings</code> to <code>keepOriginalSettings</code> to better convey what this function is doing.</li> </ul>"},{"location":"Changelog/CHANGELOG/#200-beta4","title":"2.0.0-beta.4","text":"<ul> <li>Removed the index.html file</li> <li>Additional mods/fixes to the scaling options</li> <li>Additional mods/fixes to the \"nSep\" to also handle the \"aSuffix\"</li> <li>Fixed the \"mRound\" default</li> </ul>"},{"location":"Changelog/CHANGELOG/#200-beta3","title":"2.0.0-beta.3","text":"<ul> <li>fixed nSep option which removes the Currency symbol and thousand separator on focusin</li> <li>changed the defaults for scaleDivisor, scaleDecimal &amp; scaleSymbol to null</li> </ul>"},{"location":"Changelog/CHANGELOG/#200-beta2","title":"2.0.0-beta.2","text":"<ul> <li>Modify the scaling options and separate them</li> <li>aScale - removed</li> <li>scaleDivisor added</li> <li>scaleDecimal added</li> <li>scaleSymbol added</li> </ul>"},{"location":"Changelog/CHANGELOG/#200-beta0-released-2016-11-16","title":"2.0.0-beta.0 (released 2016-11-16)","text":"<ul> <li>Prepare the code base for future Jasmine tests</li> <li>Add initial babel support</li> <li>Add uglify and npm-build-process support</li> <li>Merge the 2.0 changes into master</li> <li>Add npm support for building the minified version</li> <li>Multiple small fixes</li> <li>Fixed paste event on both context menu and <code>ctrl-v</code> // issue #251 special thanks to @rhyek</li> <li>Fixed tab in key select all and deletion // issue #246</li> <li>Fixed issue with Vue.js 2.0 // issue #247 </li> <li>Fixed context menu paste event // issue #251</li> <li>switch from jsLint to jsHint</li> <li>Fixed tab in key // thanks movalz issue #212</li> <li>Fixed the cursor position when tabbing in Chrome // thanks Dennis Smith issue #221</li> <li>Fixed the destroy method // thanks brunoporto &amp; Mabusto issue #225</li> <li>Fixed the readme file to show correct <code>$.extend</code> defaults // thanks  gayan85 issue #229</li> <li>Fixed bug in unSetOnSubmit option to handle non autoNumeric controlled inputs</li> <li>Fixed bug in <code>get</code> method</li> <li>Mods to the trailing minus sign code </li> <li>Added UMD support</li> <li>Modified &amp; improved the shim for throwing the <code>input</code> event</li> <li>Added option <code>unSetOnSubmit</code> to unformat input on the submit event</li> <li>Added option <code>debug</code> to turn on and off error being thrown</li> <li>Added support for arbitrary-precision decimal arithmetic. This was adapted from Big.js https://github.com/MikeMcl/big.js/ Many thanks to Mike</li> <li>Added support for trailing minus signs</li> <li>Added rounding methods for currencies with smallest coin being $0.05</li> <li>Added modified <code>sNumber</code> option that selects only numbers ctr &amp; a keys thanks Zayter</li> <li>Added support for return values to have locale formats</li> <li>Added debug option to turn off errors</li> <li>Added option <code>anDefault</code> to help ASP.NETR postback errors</li> <li>Modified the <code>wEmpty</code> option</li> <li>Modified the <code>init</code> &amp;&amp; <code>set</code> methods</li> <li>General code clean up</li> <li>Modified the <code>set</code>, <code>getString</code> &amp; <code>getArray</code> methods</li> <li>Modified the <code>nBracket</code> function</li> <li>Fixed the <code>update</code> method when it is called during the <code>onfocus</code> event</li> <li>Fixed the <code>getString</code> &amp; <code>getArray</code> methods when multiple inputs share the same name - Thanks Retromax</li> <li>Fixed bug in <code>ctrl + v</code> paste event to properly round </li> <li>Merged a mod that makes the defaults public and overridable - Thanks Peter Boccia</li> <li>Fixed page reload when the thousand separator is a period <code>.</code></li> </ul>"},{"location":"Changelog/CHANGELOG/#v19","title":"v1.9","text":""},{"location":"Changelog/CHANGELOG/#1946-released-2016-09-11","title":"1.9.46 (released 2016-09-11)","text":"<ul> <li>Fixed tab in key // thanks movalz issue #212</li> <li>Fixed the cursor position when tabbing in Chrome // thanks Dennis Smith issue #221</li> <li>Fixed the destroy method // thanks brunoporto &amp; Mabusto issue #225</li> <li>Fixed the readme file to show correct $.extend defaults // thanks  gayan85 issue #229 </li> </ul>"},{"location":"Changelog/CHANGELOG/#1945-released-2016-06-13","title":"1.9.45 (released 2016-06-13)","text":"<ul> <li>Modified the \"set\" method to handle NaN</li> </ul>"},{"location":"Changelog/CHANGELOG/#1944-released-2016-06-06","title":"1.9.44 (released 2016-06-06)","text":"<ul> <li>Fixed destroy method</li> <li>Added Typings support - thanks bcherny </li> </ul>"},{"location":"Changelog/CHANGELOG/#1943-released-2015-12-19","title":"1.9.43 (released 2015-12-19)","text":"<ul> <li>UMD support</li> </ul>"},{"location":"Changelog/CHANGELOG/#1942-released-2015-11-20","title":"1.9.42 (released 2015-11-20)","text":"<ul> <li>Fixed bug when pasting using  ctrl &amp; v keys</li> </ul>"},{"location":"Changelog/CHANGELOG/#1941-released-2015-11-02","title":"1.9.41 (released 2015-11-02)","text":"<ul> <li>Fixed bug that allowed two currency symbols - thanks Mic Biert</li> </ul>"},{"location":"Changelog/CHANGELOG/#1940-released-2015-10-25","title":"1.9.40 (released 2015-10-25)","text":"<ul> <li>Fixed bug when pasting value and the decimal separator is a comma \",\"</li> <li>Modified the \"destroy\" method so that an error is not thrown if the \"init\" method has not been called previously</li> </ul>"},{"location":"Changelog/CHANGELOG/#1939","title":"1.9.39","text":"<ul> <li>Fixed 'aForm'option.</li> <li>Updated the readme file</li> </ul>"},{"location":"Changelog/CHANGELOG/#1938","title":"1.9.38","text":"<ul> <li>Added / fixed option to address asp.Net WebForm postback.</li> <li>please see the readme section on default settings &amp; options </li> </ul>"},{"location":"Changelog/CHANGELOG/#1937","title":"1.9.37","text":"<ul> <li>Added / fixed support for asp.Net WebForm postback.</li> <li>During postback the default value is re-rendered showing the updated value</li> <li>Because autoNumeric cannot distinguish between a page re-load and asp.net form postback, the following HTML data attribute is REQUIRED (data-an-default=\"same value as the value attribute\") to prevent errors on postback</li> <li>Example: <pre><code>&lt;input type=\"text\" id=\"someID\" value=\"1234.56\" data-an-default=\"1234.56\"&gt;\n</code></pre></li> </ul>"},{"location":"Changelog/CHANGELOG/#1936","title":"1.9.36","text":"<ul> <li>Rewrote the \"getString\" &amp; \"getArray\" methods to index successful elements and inputs that are controlled by autoNumeric. This ensures the proper input index is used when replacing the formatted value.</li> <li>Added support for FireFox for Mac meta key \"keycode 224\" - Thanks Ney Estrabelli</li> </ul>"},{"location":"Changelog/CHANGELOG/#1935","title":"1.9.35","text":"<ul> <li>Revert 'set' back to version 1.9.34</li> </ul>"},{"location":"Changelog/CHANGELOG/#1934","title":"1.9.34","text":"<ul> <li>Modified the 'set', 'getString' &amp; 'getArray' methods</li> <li>Modified the 'nBracket' function</li> <li>General code clean up</li> </ul>"},{"location":"Changelog/CHANGELOG/#1933","title":"1.9.33","text":"<ul> <li>Fixed bug in \"ctrl + v\" paste event introduced in 1.9.32</li> </ul>"},{"location":"Changelog/CHANGELOG/#1932","title":"1.9.32","text":"<ul> <li>Fixed bug when the \"update\" method is called in the \"onfocus\" event</li> <li>Fixed the \"getString\" &amp; \"getArray\" methods when multiple inputs share the same name - Thanks Retromax</li> <li>Fixed bug in \"ctrl + v\" paste event to properly round</li> </ul>"},{"location":"Changelog/CHANGELOG/#1931","title":"1.9.31","text":"<ul> <li>never officially release</li> </ul>"},{"location":"Changelog/CHANGELOG/#1930","title":"1.9.30","text":"<ul> <li>Fixed bug introduced 1.9.29 too interested in Ohio State vs. Oregon</li> </ul>"},{"location":"Changelog/CHANGELOG/#1929","title":"1.9.29","text":"<ul> <li>Fixed bug introduced in 1.9.27</li> </ul>"},{"location":"Changelog/CHANGELOG/#1928","title":"1.9.28","text":"<ul> <li>Fixed focusout event when the thousand separator is a period \".\" and only one is present \"x.xxx\" with not other alpha characters.</li> </ul>"},{"location":"Changelog/CHANGELOG/#1927","title":"1.9.27","text":"<ul> <li>Merged a mod that makes the defaults public and overridable - Thanks Peter Boccia</li> <li>Fixed page reload when the thousand separator is a period \".\"</li> </ul>"},{"location":"Changelog/CHANGELOG/#1926","title":"1.9.26","text":"<ul> <li>Fixed \"getString\" &amp; \"getArray\" methods when multiple forms having some shared named inputs</li> </ul>"},{"location":"Changelog/CHANGELOG/#1925","title":"1.9.25","text":"<ul> <li>Fixed mRound option \"round-half-even\"</li> <li>Modified the \"set\" method to not throw an error when trying to \"set\" a null value</li> </ul>"},{"location":"Changelog/CHANGELOG/#1924","title":"1.9.24","text":"<ul> <li>Changed the case on the supported elements</li> <li>This was required because jQuery.prop('tagName') returns upper-case on html5 pages and returns lower-case on xhtml pages</li> </ul>"},{"location":"Changelog/CHANGELOG/#1923","title":"1.9.23","text":"<ul> <li>Merged mod on the \"getString\" method</li> </ul>"},{"location":"Changelog/CHANGELOG/#1922","title":"1.9.22","text":"<ul> <li>Fixed a bug when a negative value uses brackets and currency sign on page reload thanks to Allen Dumaine</li> <li>Additional mods to the \"set\" method.</li> <li>Eliminated lastSetValue setting</li> </ul>"},{"location":"Changelog/CHANGELOG/#1921","title":"1.9.21","text":"<ul> <li>Mod to checkValue function to handle empty string - thanks to jedichenbin.</li> <li>If CHF rounding is used decimal is automatically set to 2 places</li> </ul>"},{"location":"Changelog/CHANGELOG/#1920","title":"1.9.20","text":"<ul> <li>Fixed issue for very small numbers - thanks to jedichenbin.</li> </ul>"},{"location":"Changelog/CHANGELOG/#1918","title":"1.9.18","text":"<ul> <li>Added input type=\"tel\" support.</li> <li>Added support for Swiss currency rounding to the nearest \".00 or .05\"</li> <li>Fixed bug in Round-Half-Even \"Bankers Rounding\"</li> </ul>"},{"location":"Changelog/CHANGELOG/#1918_1","title":"1.9.18","text":"<ul> <li>Fixed formatting on page load for text elements.</li> </ul>"},{"location":"Changelog/CHANGELOG/#1917","title":"1.9.17","text":"<ul> <li>Fixed leading zero on page load when option lZero is set to 'keep'.</li> </ul>"},{"location":"Changelog/CHANGELOG/#1916","title":"1.9.16","text":"<ul> <li>Fixed the checkValue function when vary small numbers in scientific notation are passed via the set method.</li> <li>Modified the rounding method so zero value is not returned with a negative sign</li> </ul>"},{"location":"Changelog/CHANGELOG/#1915","title":"1.9.15","text":"<ul> <li>Fixed bug introduced in version 1.9.14</li> </ul>"},{"location":"Changelog/CHANGELOG/#1914","title":"1.9.14","text":"<ul> <li>Added additional supported tags ('b', 'caption', 'cite', 'code', 'dd', 'del', 'div', 'dfn', 'dt', 'em', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'ins', 'kdb', 'label', 'li', 'output', 'p', 'q', 's', 'sample', 'span', 'strong', 'td', 'th', 'u', 'var')</li> <li>Moved the routine that tests for supported tags</li> <li>General code clean-up</li> </ul>"},{"location":"Changelog/CHANGELOG/#1913","title":"1.9.13","text":"<ul> <li>Fixed the \"get\" method when the input receives focus for a second time.</li> </ul>"},{"location":"Changelog/CHANGELOG/#1912","title":"1.9.12","text":"<ul> <li>Fixed brackets on page load when the decimal character is a comma.</li> </ul>"},{"location":"Changelog/CHANGELOG/#1911","title":"1.9.11","text":"<ul> <li>Another mod to the 'set' method.</li> </ul>"},{"location":"Changelog/CHANGELOG/#1910","title":"1.9.10","text":"<ul> <li>Fixed the 'set' method to handle page reload using the back button.</li> </ul>"},{"location":"Changelog/CHANGELOG/#199","title":"1.9.9","text":"<ul> <li>Fixed how non-input tags default value is handled.  When the default is an empty string and aSign is not empty the return value is now and empty string.</li> <li>Modified how default values are handled when the decimal character equals ',' comma. Your default value can now use either a a period '.' or comma ',' as the decimal separator</li> <li>Modified the caret placement on focusin (tab in). If only the currency sign is visible the caret is placed in the proper location depending on the sign placement (prefix or suffix).</li> </ul>"},{"location":"Changelog/CHANGELOG/#198","title":"1.9.8","text":"<ul> <li>Changed bind / unbind to on / off.</li> <li>added lastSetValue to settings - this saves the unrounded value from the set method - $('selector').data('autoNumeric').lastSetValue; - helpful when you need to change the rounding accuracy</li> </ul>"},{"location":"Changelog/CHANGELOG/#197","title":"1.9.7","text":"<ul> <li>Modified /fixed the format default values on page ready.</li> <li>Fixed the caret position when jumping over the thousand separator with back arrow.</li> </ul>"},{"location":"Changelog/CHANGELOG/#196","title":"1.9.6","text":"<ul> <li>Fixed bug introduced in 1.9.3 with shift key.</li> <li>additional modification to the processKeypress function that automatically inserts a negative sign when vMax less than or equal to 0 and vMin is less than vMax.</li> </ul>"},{"location":"Changelog/CHANGELOG/#195","title":"1.9.5","text":"<ul> <li>Modified processKeypress function to automatically insert a negative sign when vMax &lt;=0 and vMin &lt; 0.</li> <li>Changed the getSting and getArray functions to use decodeURIComponent() instead of unescape() which is depreciated</li> </ul>"},{"location":"Changelog/CHANGELOG/#194","title":"1.9.4","text":"<ul> <li>Merged issue #11 - Both getString and getArray were using escaped versions of the name from jQuery's serialization. So this change wraps the name finder with quotes and unescapes the name.Fixed a bug in autoCode that corrects the pasted values and page re-load - Thanks Cory.</li> <li>Merged issue #12 - If a input is readonly during \"init\", autocomplete won't work if the input is enabled later. This commit should fix the Problem - Thanks Sven.</li> </ul>"},{"location":"Changelog/CHANGELOG/#193","title":"1.9.3","text":"<ul> <li>Fixed a bug in autoCode function that corrects pasted values and page re-load</li> <li>Added support for \"shift\" + \"insert\" paste key combination</li> </ul>"},{"location":"Changelog/CHANGELOG/#192","title":"1.9.2","text":"<ul> <li>Modified the \"checkValue\" function - eliminated redundant code</li> <li>Modified the \"update\" method include calling the \"getHolder\" function which updates the regular expressions</li> <li>Modified the \"getHolder function so the regular expressions are updated</li> <li>Modified the \"set\" method to convert value from number to string</li> </ul>"},{"location":"Changelog/CHANGELOG/#191","title":"1.9.1","text":"<ul> <li>Modified the checkValue function to handle values as text with the exception of values less than \"0.000001 and greater than -1\"</li> </ul>"},{"location":"Changelog/CHANGELOG/#190","title":"1.9.0","text":"<ul> <li>Fixed a rounding error when the integers were 15 or more digits in length</li> <li>Added \"use strict\";</li> </ul>"},{"location":"Changelog/CHANGELOG/#v18","title":"v1.8","text":""},{"location":"Changelog/CHANGELOG/#189","title":"1.8.9","text":"<ul> <li>Fixed the \"get\" and \"set\" methods by moving the settings.oEvent property to ensure the error message would be thrown if the element had not been initialized prior to calling the \"get\" and \"set\" methods</li> </ul>"},{"location":"Changelog/CHANGELOG/#188","title":"1.8.8","text":"<ul> <li>Fixed the \"init\" when there is a default and value aForm=true and the aSep and aDec are not the defaults</li> </ul>"},{"location":"Changelog/CHANGELOG/#187","title":"1.8.7","text":"<ul> <li>Fixed the \"getSting\" method - it use to returned an error when no values were entered</li> <li>Modified the \"init\" method to better handle default and pre-existing values</li> <li>Modified the \"set\" method - removed the routine that checked for values less than .000001 and greater than -1 and placed it in a separate function named checkValue()</li> <li>Modified the \"get\" method:<ul> <li>Added a call to the checkValue() function - this corrects returned values example - when the input value was \"12.\" the returned value was \"12.\" - it now returns \"12\"</li> <li>When no numeric character is entered the returned value is an empty string \"\".</li> </ul> </li> </ul>"},{"location":"Changelog/CHANGELOG/#186","title":"1.8.6","text":"<ul> <li>Removed the error message when calling the 'init' methods multiple times. This was done when using the class selector for the 'init' method and then dynamically adding input(s) it allows you to use the same selector to init autoNumeric. Please note: if the input is already been initialized no changes to the option will occur you still need to use the update method to change existing options.</li> <li>Added support for brackets '[,]', parentheses '(,)', braces '{,}' and '&lt;,&gt;' to the nBracket setting. Please note: the following format nBracket: '(,)' that the left and right symbol used to represent negative numbers must be enclosed in quote marks and separated by a comma to function properly.</li> </ul>"},{"location":"Changelog/CHANGELOG/#185","title":"1.8.5","text":"<ul> <li>Fixed readonly - this occurred when you toggle the readonly attribute</li> </ul>"},{"location":"Changelog/CHANGELOG/#184","title":"1.8.4","text":"<ul> <li>Fixed the getString and getArray methods under jQuery-1.9.1</li> </ul>"},{"location":"Changelog/CHANGELOG/#183","title":"1.8.3","text":"<ul> <li>Added input[type=hidden] support - this was done mainly for backward compatibility.</li> <li>The \"get\" method now returns a numeric string - this also was done for backward compatibility.</li> </ul>"},{"location":"Changelog/CHANGELOG/#182","title":"1.8.2","text":"<ul> <li>Allowed dGroup settings to be passed as a numeric value or text representing a numeric value</li> <li>Allows input fields without type that defaults to type text - Thanks Mathieu Demont</li> </ul>"},{"location":"Changelog/CHANGELOG/#181","title":"1.8.1","text":"<ul> <li>Modified the 'get' method so when a field is blank and the setting wEmpty:'empty' a empty string('') is returned.</li> </ul>"},{"location":"Changelog/CHANGELOG/#180","title":"1.8.0","text":"<ul> <li>autoNumeric() 1.8.0 is not compatible with earlier versions but I believe you will find version 1.8.0's new functionality and ease of use worth the effort to convert.</li> <li>Changed autoNumeric structure to conform to jQuery's recommended plugin development.</li> <li>Created a single namespace and added multiple methods.</li> <li>Added HTML 5 data support and eliminated the metadata plugin dependency.</li> <li>Added support for the following elements: 'DD', 'DT', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'input', 'LABEL', 'P', 'SPAN', 'TD', 'TH'.</li> <li>Changed the settings loading order to defaults, HTML5 data then options. Now the defaults settings are overridden by HTML5 data and options overrides both defaults &amp; HTML5 data.</li> <li>Added \"lZero\" to the settings to control leading zero behavior.</li> <li>Added \"nBracket\" to the settings which controls if negative values are display with brackets.</li> <li>Changed the callback feature to accept functions only.</li> <li>Improved the 'aForm' behavior that allows values to be automatically formatted on page ready.</li> <li>Fixed the issue for numbers that are less than 1 and greater than -1 and have six or more decimal places.</li> <li>Fixed 'crtl' + 'a' (select all) and 'ctrl' + 'c' (copy) combined key events.</li> <li>Fixed a IE &amp; FF bug on readonly attribute.</li> <li>General code clean up</li> </ul>"},{"location":"Developer%20guide/dependencies/","title":"Dependencies","text":"<p>None! </p> <p>Info</p> <p>The jQuery dependencies has been removed in <code>v4.0.0</code>.</p>"},{"location":"Developer%20guide/how%20to%20contribute/","title":"How to contribute?","text":"<p>Contributors and pull requests are welcome. Feel free to contact us for any questions.</p>"},{"location":"Developer%20guide/how%20to%20contribute/#contributing-in-a-nutshell","title":"Contributing, in a nutshell","text":"<p>For more detailed information about how to contribute, please check the rest of this page.</p> <p>In a nutshell:</p> <ol> <li>Get the latest source <code>git clone -b next https://github.com/autoNumeric/autoNumeric.git &amp;&amp; cd autoNumeric &amp;&amp; yarn install</code></li> <li>Make you changes</li> <li>Lint, build, and run tests <code>yarn lint &amp;&amp; yarn build &amp;&amp; yarn test</code><ul> <li>If you encounter any linting problems, you can try to automatically fix those with <code>yarn lintfix</code> </li> </ul> </li> <li>Create a pull request, and we'll check it out as soon as possible!</li> </ol> <p>Again, be sure to check the following guidelines for more details.</p> <p>Also, feel free to follow our RSS feeds on master and next to keep up with the latest commits.</p>"},{"location":"Developer%20guide/how%20to%20contribute/#junior-jobs","title":"Junior jobs","text":"<p>Every contribution are welcomed, whatever their sizes.</p> <p>If you want to contribute to a dynamic and welcoming open-source project, be sure to check our easy-to-start-with junior jobs, either by checking the issues for the tag Junior jobs, or by searching for the <code>//TODO</code> and <code>//FIXME</code> strings directly in the source (there are plenty awaiting for you right now!).</p> <p>Happy coding :&gt;</p>"},{"location":"Developer%20guide/how%20to%20contribute/#get-the-latest-source","title":"Get the latest source","text":"<pre><code>git clone -b next https://github.com/autoNumeric/autoNumeric.git\n# or the following if you are authentified on Github:\n# `git clone -b next git@github.com:autoNumeric/autoNumeric.git`\n</code></pre>"},{"location":"Developer%20guide/how%20to%20contribute/#make-your-changes","title":"Make your changes","text":"<p>Note</p> <p>You can use either <code>npm</code> or <code>yarn</code> for running the install/build scripts. We'll use <code>yarn</code> in the following examples.</p> <p>First things first, in order to be able to compile the ES6 source to something that can be interpreted by the browsers, and get the tools (linter, test runners, etc.) used by the developers, you need to install them by doing : <pre><code>cd autoNumeric\nyarn install\n</code></pre></p> <p>Hint</p> <p>You need to have <code>yarn</code> installed before executing this command.You can install <code>yarn</code> globally by doing <code>npm install -g yarn</code> as root.</p> <p>Once you made your changes, you can build the library with : <pre><code>yarn build\n</code></pre> This will generate the <code>autoNumeric.js</code> and <code>autoNumeric.min.js</code> files in the <code>dist</code> folder, that you'll then be able to use in the browsers.</p> <p>If you want to clean the generated <code>.js</code> and <code>.min.js</code> files as well as development specific ones like coverage and log files, use : <pre><code>yarn run clean\n</code></pre></p> <p>Warning</p> <p>Do not use <code>yarn clean</code> as it's a different command entirely.</p>"},{"location":"Developer%20guide/how%20to%20contribute/#run-the-mandatory-tools-for-linting-and-testing","title":"Run the mandatory tools for linting and testing","text":"<p>We strive to keep the tests green at all times. Hence whenever you change the source, be sure to:</p> <ol> <li>Write at least 2 tests for each change:<ul> <li>One that validate your changes</li> <li>One that invalidate your changes</li> </ul> </li> <li>Make sure all tests passes on all supported browsers (PhantomJS, Firefox, and Chrome)<ul> <li>Write unit tests and end-to-end tests</li> </ul> </li> <li>Make sure <code>eslint</code> does not return any errors regarding the coding style.</li> </ol> <p>Warning</p> <p>Pull requests that turns the tests red , or that do not provide new tests for new features will not be accepted.</p>"},{"location":"Developer%20guide/how%20to%20contribute/#how-to-test","title":"How to test?","text":"<p>Tests must always be green  before pushing. Any commit that make the tests fails will be ignored.To run the tests, you have multiple options: <pre><code># Run unit testing as well as end-to-end testing\nyarn test\n# Run unit testing only\nyarn test:unit\n\n# Run end-to-end testing only\nyarn test:e2e\n\n# Run unit testing only...\nyarn test:unitp   # ...with PhantomJS only\nyarn test:unitf   # ...with Firefox only\nyarn test:unitc   # ...with Chrome only\n</code></pre></p> <p>Behind the scene, all unit and end-to-end tests are written with Jasmine.Karma is used to run the unit tests, while Webdriver.io is used to run end-to-end tests.</p>"},{"location":"Developer%20guide/how%20to%20contribute/#how-to-lint","title":"How to lint?","text":"<p>Linting allow us to keep a coherent code style in all the source files.In order to check that everything is well formatted, run eslint with: <pre><code>yarn lint\n</code></pre> If any errors are shown, you can try to automatically correct them by running: <pre><code># Use the path of the faulty file to fix only this particular file:\n./node_modules/eslint/bin/eslint.js --fix src/AutoNumeric.js\n\n# Or try to fix all errors in all files once with\nyarn lintfix\n</code></pre></p>"},{"location":"Developer%20guide/how%20to%20contribute/#how-to-push","title":"How to push?","text":"<p>Every changes that you pushed in its own branch in your personal AutoNumeric repository copy should be based on the latest version of the <code>next</code> branch (the development branch).</p> <p>When you create a pull request, make sure to push against the <code>next</code> branch.</p> <p>Please try to break down your pull requests and commits into small and manageable entities, in order:</p> <ul> <li>to make them easier to process, and more importantly</li> <li>to keep each logical set of changes in its own commit.</li> </ul> <p>Additionally, your commits must not contain any generated files (ie. files built in the <code>/dist/</code> directory, or logs).</p> <p>Important changes regarding the generated <code>dist</code> files</p> <p>Since the version <code>4.1.3</code>, the generated <code>dist</code> files (ie. <code>autoNumeric.js</code> and <code>autoNumeric.min.js</code>) are not pushed into the repository anymore.</p> <p>However, all tagged commits are now automatically built and published on npm.</p> <p>This means if you want to download the minified library directly, you need to use npm to install it (<code>yarn add autonumeric</code> or <code>npm install autonumeric</code>).</p>"},{"location":"Developer%20guide/how%20to%20upgrade%20to%20v4/","title":"How to upgrade to v4","text":""},{"location":"Developer%20guide/how%20to%20upgrade%20to%20v4/#upgrade-from-versions-192-to-version-4","title":"Upgrade from versions <code>1.9.*</code>/<code>2.*</code> to version <code>4.*</code>","text":"<p>Attention!</p> <p>Version <code>4</code> has seen a lots of improvements and new features, but also introduce breaking changes if you are trying to use it with an old <code>v1.9</code> or <code>v2</code> configuration.</p>"},{"location":"Developer%20guide/how%20to%20upgrade%20to%20v4/#initialization","title":"Initialization","text":"<p>Initialization of an AutoNumeric object has changed a bit.</p> <p>Since AutoNumeric is now an ES6 module, <code>AutoNumeric</code> being the name of the <code>class</code>, and since the jQuery dependency has been dropped, you now longer need to first select the DOM element with jQuery, then call the <code>$(yourElement).autoNumeric('init', { options })</code> method.</p> <p>Now, you only need to instantiate an <code>AutoNumeric</code> object using <code>new AutoNumeric(yourElement, { options })</code> (or if you do not already have a reference to the DOM element, use <code>new AutoNumeric('myCSSSelector', { options })</code>).</p> &lt;= <code>v2</code> (Before) <code>v4</code> (After) <code>$('.myInput').autoNumeric('init', { options });</code> If you want to initialize only one element: <code>new AutoNumeric('.myInput', { options });</code> If you want to initialize multiple elements: <code>AutoNumeric.multiple('.myCssClass &gt; input', { options });</code>"},{"location":"Developer%20guide/how%20to%20upgrade%20to%20v4/#configuration","title":"Configuration","text":"<p>Deprecation warning</p> <p>The old option names have changed and are now deprecated, in favor of the new ones.</p> <p>To help you switch to the new names, detailed warning messages are displayed in the console if an old option name is detected.</p> <p><code>mDec</code> option changes</p> <p>Do note that the option <code>mDec</code> (or its new name <code>decimalPlacesOverride</code> if you used <code>v2</code>) is no longer used.</p> <p>If you want to specify the number of decimals, instead of relying on the maximum number of decimal places in <code>minimumValue</code> or <code>maximumValue</code> like before, you can now set <code>decimalPlaces</code> to set it globally.</p> <p>If you wish, you can also specify a different number of decimal places for the formatted value (with <code>decimalPlacesShownOnFocus</code> and <code>decimalPlacesShownOnFocus</code>) or the <code>rawValue</code> (with <code>decimalPlacesRawValue</code>).</p> <p>The following table shows the equilavence between pre and post <code>v4</code> version for option names:</p> &lt;= <code>v2</code> (Before) <code>v4</code> (After) <code>aSep</code> <code>digitGroupSeparator</code> <code>nSep</code> <code>showOnlyNumbersOnFocus</code> <code>dGroup</code> <code>digitalGroupSpacing</code> <code>aDec</code> <code>decimalCharacter</code> <code>altDec</code> <code>decimalCharacterAlternative</code> <code>aSign</code> <code>currencySymbol</code> <code>pSign</code> <code>currencySymbolPlacement</code> <code>pNeg</code> <code>negativePositiveSignPlacement</code> <code>aSuffix</code> <code>suffixText</code> <code>oLimits</code> <code>overrideMinMaxLimits</code> <code>vMax</code> <code>maximumValue</code> <code>vMin</code> <code>minimumValue</code> <code>mDec</code> <code>decimalPlacesOverride</code>( Deprecated) <code>eDec</code> <code>decimalPlacesShownOnFocus</code> <code>scaleDecimal</code> <code>decimalPlacesShownOnBlur</code> <code>aStor</code> <code>saveValueToSessionStorage</code> <code>mRound</code> <code>roundingMethod</code> <code>aPad</code> <code>allowDecimalPadding</code> <code>nBracket</code> <code>negativeBracketsTypeOnBlur</code> <code>wEmpty</code> <code>emptyInputBehavior</code> <code>lZero</code> <code>leadingZero</code> <code>aForm</code> <code>formatOnPageLoad</code> <code>sNumber</code> <code>selectNumberOnly</code> <code>anDefault</code> <code>defaultValueOverride</code> <code>unSetOnSubmit</code> <code>unformatOnSubmit</code> <code>outputType</code> <code>outputFormat</code> <code>debug</code> <code>showWarnings</code> <p>If you want more detail about the AutoNumeric options, feel free to browse the AutoNumeric options source code which has detailed comment for each one.</p> Interactive option testing chamber <p>Do note that you can check out the new options on the official website here.</p>"},{"location":"Developer%20guide/how%20to%20upgrade%20to%20v4/#method-calls","title":"Method calls","text":"<p>Moreover, since we are now using an <code>AutoNumeric</code> object, we can now directly call its methods (and chain them if needed).  In the following table, the <code>anElement</code> variable is created using <code>const anElement = new AutoNumeric('someSelector', { options })</code>.</p> <p>The methods are now called like so:</p> &lt;= <code>v2</code> (Before) <code>v4</code> (After) <code>$(someSelector).autoFormat('1234.56', { options });</code> <code>AutoNumeric.format(1234.56, { options });</code> <code>$(someSelector).autoUnFormat('1.234,56 \u20ac', { options });</code> <code>AutoNumeric.unformat('1.234,56 \u20ac', { options });</code> <code>$(someSelector).autoValidate({ options });</code> <code>AutoNumeric.validate({ options })</code> <code>$.fn.autoNumeric.defaults</code> <code>AutoNumeric.getDefaultConfig()</code> <code>$(someSelector).autoNumeric(\"destroy\");</code> <code>anElement.remove();</code> <code>$(someSelector).autoNumeric('get');</code> <code>anElement.getNumericString();</code> <code>$(someSelector).autoNumeric('getArray');</code> <code>anElement.formArrayNumericString();</code> <code>$(someSelector).autoNumeric('getFormatted');</code> <code>anElement.getFormatted();</code> <code>$(someSelector).autoNumeric('getLocalized');</code> <code>anElement.getLocalized();</code> <code>$(someSelector).autoNumeric('getNumber');</code> <code>anElement.getNumber();</code> <code>$(someSelector).autoNumeric('getString');</code> <code>anElement.formNumericString();</code> <code>$.fn.autoNumeric.lang</code> <code>AutoNumeric.getPredefinedOptions()</code> <code>$(someSelector).autoNumeric('reSet');</code> <code>anElement.reformat();</code> <code>$(someSelector).autoNumeric('set', '12345.67');</code> <code>anElement.set(12345.67);</code> <code>$(someSelector).autoNumeric('unSet');</code> <code>anElement.unformat();</code> <code>$(someSelector).autoNumeric(\"update\", { options });</code> <code>anElement.update({ options });</code> <code>$(someSelector).autoNumeric(\"wipe\");</code> <code>anElement.wipe();</code> <p>Check the methods documentation to see how some of those functions signatures changed.</p>"},{"location":"Developer%20guide/how%20to%20upgrade%20to%20v4/#need-help","title":"Need help?","text":"<p>If you encounter any problem upgrading to <code>v4</code>, feel free to contacts us on our Gitter channel or on IRC on Libera Chat <code>#autoNumeric</code>!</p> <p>Please check the contact page for more information.</p>"},{"location":"Documentation/configuration%20options/","title":"Configuration options","text":"<p>Multiple configuration options allows you to customize precisely how a form <code>&lt;input&gt;</code> element will format your key strokes as you type. You can check what are the predefined choices for each option as well as a more detailed explanation of how they work on the official documentation page.</p> <p>You can also generate your custom options object and try those live with the AutoNumeric configurator.</p> <p>Want to know more? Check out the examples.</p>"},{"location":"Documentation/configuration%20options/#options","title":"Options","text":"<p>Below are listed in alphabetical order the options that you can pass an AutoNumeric element, in order to make it change its behavior or formatting specifications.</p> Option Description Default Value <code>allowDecimalPadding</code> Allow padding the decimal places with zeros. If set to <code>'floats'</code>, padding is only done when there are some decimals (up to the number of decimal places from the <code>decimalPlaces</code> variable). If set to an integer, padding will use that number for adding the zeros. If set to <code>true</code> it will always pad the decimal places with zeroes, and never if set to <code>false</code>. <code>true</code> <code>alwaysAllowDecimalCharacter</code> Defines if the decimal character or decimal character alternative should be accepted when there is already a decimal character shown in the element. <code>false</code> <code>caretPositionOnFocus</code> Determine where should be positioned the caret on focus <code>null</code> <code>createLocalList</code> Determine if a local list of AutoNumeric objects must be kept when initializing the elements and others <code>true</code> <code>currencySymbol</code> Defines the currency symbol to display <code>''</code> <code>currencySymbolPlacement</code> Placement of the currency sign, relative to the number shown (as a prefix or a suffix) <code>'p'</code> <code>decimalCharacter</code> Decimal separator character <code>'.'</code> <code>decimalCharacterAlternative</code> Allow to declare an alternative decimal separator which is automatically replaced by the real decimal character when entered (This is useful in countries where the keyboard numeric pad has a period as the decimal character) <code>null</code> <code>decimalPlaces</code> Defines the default number of decimal places to show on the formatted value, and to keep as the precision for the <code>rawValue</code>. This can be overridden by the other <code>decimalPlaces*</code> options. <code>2</code> <code>decimalPlacesRawValue</code> Defines how many decimal places should be kept for the raw value. This is the precision for float values. <code>null</code> <code>decimalPlacesShownOnBlur</code> The number of decimal places to show when unfocused <code>null</code> <code>decimalPlacesShownOnFocus</code> The number of decimal places to show when focused <code>null</code> <code>defaultValueOverride</code> Helper option for the ASP.NET-specific postback issue <code>null</code> <code>digitalGroupSpacing</code> Digital grouping for the thousand separator <code>'3'</code> <code>digitGroupSeparator</code> Thousand separator character <code>','</code> <code>divisorWhenUnfocused</code> Defines the number that will divide the current value shown when unfocused <code>null</code> <code>emptyInputBehavior</code> Defines what to display when the input value is empty (possible options are <code>null</code>, <code>focus</code>, <code>press</code>, <code>always</code>, <code>min</code>, <code>max</code>, <code>zero</code>, number, or a string representing a number) <code>'focus'</code> <code>eventBubbles</code> Defines if the custom and native events triggered by AutoNumeric should bubble up or not <code>true</code> <code>eventIsCancelable</code> Defines if the custom and native events triggered by AutoNumeric should be cancelable <code>true</code> <code>failOnUnknownOption</code> This option is the 'strict mode' (aka 'debug' mode), which allows autoNumeric to strictly analyse the options passed, and fails if an unknown options is used in the <code>options</code> object. <code>false</code> <code>formatOnPageLoad</code> Determine if the default value will be formatted on initialization <code>true</code> <code>formulaMode</code> Defines if the formula mode can be activated by the user <code>false</code> <code>historySize</code> Determine how many undo states an AutoNumeric object should keep in memory <code>20</code> <code>isCancellable</code> Determine if the user can 'cancel' the last modifications done to the element value when using the <code>Escape</code> key <code>true</code> <code>leadingZero</code> Controls the leading zero behavior (possible options are <code>allow</code>, <code>deny</code> and <code>keep</code>) <code>'deny'</code> <code>maximumValue</code> The maximum value that can be entered (10 trillions by default) <code>'10000000000000'</code> <code>minimumValue</code> The minimum value that can be entered (-10 trillions by default) <code>'-10000000000000'</code> <code>modifyValueOnUpDownArrow</code> Determine if the element value can be incremented / decremented with the up and down arrow keys. The keys behavior is modified with the <code>upDownStep</code> option. <code>true</code> <code>modifyValueOnWheel</code> Determine if the element value can be incremented / decremented with the mouse wheel. The wheel behavior is modified with the <code>wheelStep</code> option. <code>true</code> <code>negativeBracketsTypeOnBlur</code> Adds brackets <code>[]</code>, parenthesis <code>()</code>, curly braces <code>{}</code>, chevrons <code>&lt;&gt;</code>, angle brackets <code>\u3008\u3009</code>, Japanese quotation marks <code>\uff62\uff63</code>, half brackets <code>\u2e24\u2e25</code>, white square brackets <code>\u27e6\u27e7</code>, quotation marks <code>\u2039\u203a</code> or guillemets <code>\u00ab\u00bb</code> on negative values when unfocused. The value must be formatted like <code>'&lt;leftBracket&gt;,&lt;rightBracket&gt;'</code>. <code>null</code> <code>negativePositiveSignBehavior</code> Defines if the negative sign should be toggled when hitting the negative or positive key multiple times <code>false</code> <code>negativePositiveSignPlacement</code> Placement of negative/positive sign relative to the currency symbol (possible options are <code>l</code> (left), <code>r</code> (right), <code>p</code> (prefix) and <code>s</code> (suffix)) <code>null</code> <code>negativeSignCharacter</code> Defines the negative sign character to use <code>'-'</code> <code>noEventListeners</code> Defines if the element should have event listeners activated on it.Note: Setting this to <code>true</code> will prevent any format to be applied once the user starts modifying the element value. This is unlikely what you want. <code>false</code> <code>onInvalidPaste</code> Manage how autoNumeric react when the user tries to paste an invalid number (possible options are <code>error</code>, <code>ignore</code>, <code>clamp</code>, <code>truncate</code> or <code>replace</code>) <code>'error'</code> <code>outputFormat</code> Defines the localized output format of the <code>getLocalized</code>, <code>form*</code>, <code>formArray*</code> and <code>formJson*</code> methods <code>null</code> <code>overrideMinMaxLimits</code> Override minimum and maximum limits (possible options are <code>ceiling</code>, <code>floor</code>, <code>ignore</code> and <code>invalid</code>) <code>null</code> <code>positiveSignCharacter</code> Defines the positive sign character to use (Note: It's only shown if <code>showPositiveSign</code> is set to <code>true</code>) <code>'+'</code> <code>rawValueDivisor</code> Define the number that will divide the formatted value into the raw value (i.e. when displaying <code>'1.23%'</code>, the raw value kept is <code>0.0123</code> if <code>rawValueDivisor</code> is set to <code>100</code>) <code>null</code> <code>readOnly</code> Defines if the element (<code>&lt;input&gt;</code> or another allowed html tag) should be set as read-only on initialization <code>false</code> <code>roundingMethod</code> Method used for rounding. The possible options are:<code>S</code> (Round-Half-Up Symmetric (default)),<code>A</code> (Round-Half-Up Asymmetric),<code>s</code> (Round-Half-Down Symmetric (lower case s)),<code>a</code> (Round-Half-Down Asymmetric (lower case a)),<code>B</code> (Round-Half-Even 'Bankers Rounding'),<code>U</code> (Round Up 'Round-Away-From-Zero'),<code>D</code> (Round Down 'Round-Toward-Zero' - same as truncate),<code>C</code> (Round to Ceiling 'Toward Positive Infinity'),<code>F</code> (Round to Floor 'Toward Negative Infinity'),<code>N05</code> (Rounds to the nearest .05 (same as <code>'CHF'</code> used in v1.9.* and still valid)),<code>U05</code> (Rounds up to next .05),<code>D05</code> (Rounds down to next .05) <code>'S'</code> <code>saveValueToSessionStorage</code> Allow the <code>decimalPlacesShownOnFocus</code> value to be saved into session storage <code>false</code> <code>selectNumberOnly</code> Determine if the 'Select All' keyboard command will select the complete input text content (including the currency symbol and suffix text), or only the input numeric value <code>false</code> <code>selectOnFocus</code> Defines if the element value should be selected on focus. That selection is dependent on the <code>selectNumberOnly</code> option value. <code>true</code> <code>serializeSpaces</code> Defines how the serialize functions should treat spaces when serializing (convert them to <code>'%20'</code> or <code>'+'</code>) <code>'+'</code> <code>showOnlyNumbersOnFocus</code> Remove the thousand separator, currency symbol and suffix on focus <code>false</code> <code>showPositiveSign</code> Allow the positive sign symbol <code>+</code> to be displayed for positive numbers <code>false</code> <code>showWarnings</code> Defines if warnings should be shown. This is safe to disable in production. <code>true</code> <code>styleRules</code> Defines the rules that calculate the CSS class(es) to apply on the element, based on the raw unformatted value.This can also be used to call callbacks whenever the <code>rawValue</code> is updated. <code>null</code> <code>suffixText</code> Additional text suffix that is added after the number <code>''</code> <code>symbolWhenUnfocused</code> Symbol placed as a suffix when unfocused. This is used in combination with the <code>divisorWhenUnfocused</code> option. <code>null</code> <code>unformatOnHover</code> Defines if the element value should be unformatted when the user hover his mouse over it while holding the <code>Alt</code> key <code>true</code> <code>unformatOnSubmit</code> Removes formatting on submit event <code>false</code> <code>upDownStep</code> Used in conjonction with the <code>modifyValueOnUpDownArrow</code> option, this allows to either define a fixed step (i.e. <code>1000</code>), or a progressive one that is calculated based on the size of the current value <code>'1'</code> <code>valuesToStrings</code> Provide a way for automatically and transparently replacing the formatted value with a pre-defined string, when the raw value is equal to a specific value.For instance when using <code>{ 0: '-' }</code>, the hyphen <code>'-'</code> is displayed when the <code>rawValue</code> is equal to <code>0</code>. Multiple 'replacements' can be defined. <code>null</code> <code>watchExternalChanges</code> Defines if the AutoNumeric element should watch (and format) external changes made without using <code>.set()</code>. This is set to <code>false</code> by default to prevent infinite loops when used with third party frameworks that relies on the <code>'autoNumeric:rawValueModified'</code> events being sent. <code>false</code> <code>wheelOn</code> Used in conjonction with the <code>modifyValueOnWheel</code> option, defines when the wheel event will increment or decrement the element value, either when the element is focused, or hovered <code>'focus'</code> <code>wheelStep</code> Used in conjonction with the <code>modifyValueOnWheel</code> option, this allows to either define a fixed step (i.e. <code>1000</code>), or a progressive one that is calculated based on the size of the current value <code>'progressive'</code>"},{"location":"Documentation/demo/","title":"Try AutoNumeric","text":""},{"location":"Documentation/demo/#demo","title":"Demo","text":"<p>If you want to see AutoNumeric in action and try it yourself, you can either play with the field on the AutoNumeric homepage, or check the live demo.</p> <p>You can also take a look at the predefined options examples (Predefined language options, Predefined common options, Predefined common monetary options, Predefined percentage options and Predefined style rules).</p>"},{"location":"Documentation/demo/#tools","title":"Tools","text":"<p>Finally, you can use the configuration generator tool to generate your configuration options objects, while being able to see with a live preview the effect of each chosen options.</p>"},{"location":"Documentation/demo/#related-projects","title":"Related projects","text":"<p>Alternatively, you can also check the vue-autonumeric demo.</p>"},{"location":"Documentation/event%20lifecycle/","title":"Event lifecycle","text":"<p>AutoNumeric elements are transparent to the native <code>input</code> and <code>change</code> events, which means those are correctly sent when using an <code>&lt;input&gt;</code> element managed by AutoNumeric.</p>"},{"location":"Documentation/event%20lifecycle/#autonumeric-custom-events","title":"AutoNumeric custom events","text":"<p>In addition to the native events, custom events sent by AutoNumeric elements allows you to hook into the formatting lifecycle, as you see fit:</p> <ul> <li><code>'autoNumeric:correctedValue'</code> when an invalid value is corrected</li> <li><code>'autoNumeric:initialized'</code> when the AutoNumeric element is initialized</li> <li><code>'autoNumeric:invalidFormula'</code> when the user tries to validate an invalid math expression</li> <li><code>'autoNumeric:invalidValue'</code> when an invalid value is entered (ie. when the raw value is out of the min/max range)</li> <li><code>'autoNumeric:rawValueModified'</code> when the <code>rawValue</code> is modified</li> <li><code>'autoNumeric:formatted'</code> when all the formatting is done and the formatted string is modified</li> <li><code>'autoNumeric:minExceeded'</code> if the <code>minimumValue</code> is not respected</li> <li><code>'autoNumeric:maxExceeded'</code> if the <code>maximumValue</code> is not respected</li> <li><code>'autoNumeric:validFormula'</code> when the user validate a valid math expression</li> </ul> <p>Tip</p> <p>You can also set if the events triggered by the AutoNumeric elements, custom or native, should:</p> <ul> <li>Bubble up (option <code>eventBubbles</code>) or</li> <li>Be cancelable (option <code>eventIsCancelable</code>).</li> </ul>"},{"location":"Documentation/event%20lifecycle/#event-lifecycle","title":"Event lifecycle","text":"<p>Whenever an AutoNumeric element is initialized, the custom <code>'autoNumeric:initialized'</code> event is sent.When using <code>AutoNumeric.multiple()</code> to initialize numerous elements at once, as many <code>'autoNumeric:initialized'</code> events are sent as there are initialized elements.</p> <p>Finally, the <code>'change'</code> event is sent on <code>blur</code> if the value has been changed since the <code>focus</code> one.</p> <p>Note</p> <p>The <code>AutoNumeric.format()</code> static function does trigger an <code>'autoNumeric:formatted'</code> event if the value that the user is trying to format is outside the <code>minimumValue</code> and <code>maximumValue</code> range, with the <code>detail</code> attribute containing the range error message.</p>"},{"location":"Documentation/event%20lifecycle/#custom-events-details","title":"Custom events details","text":""},{"location":"Documentation/event%20lifecycle/#autonumericformatted","title":"<code>'autoNumeric:formatted'</code>","text":"<p>The <code>'autoNumeric:formatted'</code> event has a payload that contains the following <code>detail</code> attribute: Example of `CustomEvent` object sent by AutoNumeric when its value is formatted<pre><code>const theCustomEvent = {\ndetail    : {\noldValue   : \"78,00\u202f\u20ac\",  // The previous formatted value\nnewValue   : \"788,00\u202f\u20ac\", // The new formatted value\noldRawValue: 78,         // The previous raw value\nnewRawValue: 788,        // The new raw value\nisPristine : false,      // Is the element value still pristine? In other words, has its value changed since its initialization?\nerror      : null,       // The error message as a string, `null` if no errors.\naNElement  : theAutoNumericObject, // The AutoNumeric object emitting this event\n},\n// ...and the usual `bubbles` and `cancelable` attributes\n}\n</code></pre> When caught, you can access the event attributes like so:<pre><code>function onFormattedEvent(event) {\nif (!event.detail.isPristine) {\nconsole.log(`The element value has been changed from ${event.detail.oldValue} to ${event.detail.newValue}.`);\n}\n}\n</code></pre></p>"},{"location":"Documentation/event%20lifecycle/#autonumericrawvaluemodified","title":"<code>'autoNumeric:rawValueModified'</code>","text":"<p>The <code>'autoNumeric:rawValueModified'</code> event has a payload that contains the following <code>detail</code> attribute: Example of `CustomEvent` object sent by AutoNumeric when the `rawValue` is modified<pre><code>const theCustomEvent = {\ndetail    : {\noldRawValue: 78,    // The previous raw value\nnewRawValue: 788,   // The new raw value\nisPristine : false, // Is the `rawValue` still pristine? In other words, did it changed since the object initialization?\nerror      : null,  // The error message as a string, `null` if no errors.\naNElement  : theAutoNumericObject, // The AutoNumeric object emitting this event\n},\n// ...\n}\n</code></pre></p>"},{"location":"Documentation/event%20lifecycle/#autonumericinitialized","title":"<code>'autoNumeric:initialized'</code>","text":"<p>The <code>'autoNumeric:initialized'</code> event has a payload that contains the following <code>detail</code> attribute: Example of `CustomEvent` object sent by AutoNumeric when the object is first initialized<pre><code>const theCustomEvent = {\ndetail    : {\nnewValue   : \"788,00\u202f\u20ac\", // The new formatted value\nnewRawValue: 788,        // The new raw value\nerror      : null,       // The error message as a string, `null` if no errors.\naNElement  : theAutoNumericObject, // The AutoNumeric object emitting this event\n},\n// ...\n}\n</code></pre></p>"},{"location":"Documentation/event%20lifecycle/#autonumericinvalidformula","title":"<code>'autoNumeric:invalidFormula'</code>","text":"<p>The <code>'autoNumeric:invalidFormula'</code> event has a payload that contains the following <code>detail</code> attribute: Example of `CustomEvent` object sent by AutoNumeric when the math expression is invalid<pre><code>const theCustomEvent = {\ndetail    : {\nformula  : '22+35 - (44',        // The invalid formula\naNElement: theAutoNumericObject, // The AutoNumeric object emitting this event\n},\n// ...\n}\n</code></pre></p>"},{"location":"Documentation/event%20lifecycle/#autonumericvalidformula","title":"<code>'autoNumeric:validFormula'</code>","text":"<p>The <code>'autoNumeric:validFormula'</code> event has a payload that contains the following <code>detail</code> attribute: Example of `CustomEvent` object sent by AutoNumeric when the math expression is valid<pre><code>const theCustomEvent = {\ndetail    : {\nformula  : '22+35 - (44)',       // The valid formula\nresult   : 13,                   // The math expression result\naNElement: theAutoNumericObject, // The AutoNumeric object emitting this event\n},\n// ...\n}\n</code></pre></p> <p>This can then be used within another script.For instance, you could listen to that event in a Vue.js component template like so: <pre><code>&lt;vue-autonumeric \nv-on:autoNumeric:formatted.native=\"funcCall1\"\nv-on:autoNumeric:rawValueModified.native=\"funcCall2\"\nv-on:autoNumeric:initialized.native=\"funcCall3\"\n/&gt;\n</code></pre></p> <p>Check out the official vue-autonumeric component for more info</p>"},{"location":"Documentation/event%20lifecycle/#key-inputs-events-sent","title":"Key inputs &amp; events sent","text":"<p>Below are listed how AutoNumeric react to different types of key inputs.</p>"},{"location":"Documentation/event%20lifecycle/#inputing-numbers-and-decimal-characters","title":"Inputing numbers and decimal characters","text":"<p>By default a 'normal' printable character input (ie. <code>'2'</code> or <code>','</code>) will result in those events, in that specific order:</p> <ol> <li><code>'keydown'</code></li> <li><code>'autoNumeric:minExceeded'</code> or <code>'autoNumeric:maxExceeded'</code> only if there was a range problem</li> <li><code>'keypress'</code> (this is deprecated and will be removed soon)</li> <li><code>'input'</code></li> <li><code>'keyup'</code></li> <li><code>'autoNumeric:formatted'</code> when all the formatting is done</li> <li><code>'autoNumeric:rawValueModified'</code> when the <code>rawValue</code> is modified</li> </ol> <p>Note</p> <p>Please check how is structured the payload attached to the <code>event</code> variable. The event detail provides easy access to the old and new value.</p>"},{"location":"Documentation/event%20lifecycle/#modifier-keys","title":"Modifier keys","text":"<p>When inputting a modifier key (ie. <code>Control</code>), we get:</p> <ol> <li><code>'keydown'</code></li> <li><code>'keyup'</code></li> <li><code>'autoNumeric:formatted'</code></li> <li><code>'autoNumeric:rawValueModified'</code></li> </ol>"},{"location":"Documentation/event%20lifecycle/#deleting-numbers","title":"Deleting numbers","text":"<p>If <code>Delete</code> or <code>Backspace</code> is entered, the following events are sent:</p> <ol> <li><code>'keydown'</code></li> <li><code>'input'</code></li> <li><code>'keyup'</code></li> <li><code>'autoNumeric:formatted'</code></li> <li><code>'autoNumeric:rawValueModified'</code></li> </ol>"},{"location":"Documentation/event%20lifecycle/#validating-the-field","title":"Validating the field","text":"<p>If <code>Enter</code> is entered and the value has not changed, the following events are sent:</p> <ol> <li><code>'keydown'</code></li> <li><code>'keypress'</code></li> <li><code>'keyup'</code></li> <li><code>'autoNumeric:formatted'</code></li> <li><code>'autoNumeric:rawValueModified'</code></li> </ol> <p>If <code>Enter</code> is entered and the value has been changed, the following events are sent:</p> <ol> <li><code>'keydown'</code></li> <li><code>'keypress'</code></li> <li><code>'change'</code></li> <li><code>'keyup'</code></li> <li><code>'autoNumeric:formatted'</code></li> <li><code>'autoNumeric:rawValueModified'</code></li> </ol>"},{"location":"Documentation/event%20lifecycle/#pasting-data","title":"Pasting data","text":"<p>When a <code>paste</code> is done with the mouse, the following events are sent:</p> <ol> <li><code>'input'</code></li> <li><code>'keydown'</code></li> <li><code>'input'</code></li> <li><code>'keyup'</code></li> <li><code>'keyup'</code></li> <li><code>'autoNumeric:formatted'</code></li> <li><code>'autoNumeric:rawValueModified'</code></li> </ol> <p>When a <code>paste</code> is done with the keyboard shortcut (ie. <code>ctrl+v</code>), the following events are sent:</p> <ol> <li><code>'keydown'</code></li> <li><code>'keydown'</code></li> <li><code>'input'</code></li> <li><code>'keyup'</code></li> <li><code>'keyup'</code></li> <li><code>'autoNumeric:formatted'</code></li> <li><code>'autoNumeric:rawValueModified'</code></li> </ol>"},{"location":"Documentation/formula%20mode/","title":"Formula mode","text":"<p>Ever wished while filling in a form that you could quickly calculate basic math operations?Well, AutoNumeric provides a quick way to enter and evaluate simple math expressions directly into the element!</p> <p>Use case</p> <p>Sometimes, you need to quickly calculate the product or the sum of two or more numbers, before entering the result in the AutoNumeric element. For instance, you might ask yourself \"How many months are there in 14 years and 5 months ?\", then you'd need to either make a mental calculation, or resort to using a calculator. To speed things up and provide a lean user experience, AutoNumeric provides a formula mode which allows you to enter and evaluate simple math expressions very quickly.</p> <p>Using our previous example, you would just need to activate the formula mode by entering the equal sign (<code>=</code>) key, then type <code>=14*12 + 5</code>, and finally validate that expression by using the <code>Enter</code> key, or by blurring the field.</p> <p>Note</p> <p>If the math expression is invalid, the previous <code>rawValue</code> is set back</p> <p>Warning</p> <p>By default, this behavior is disabled.Check here on how to enable it.</p>"},{"location":"Documentation/formula%20mode/#enable-the-formula-mode","title":"Enable the formula mode","text":"<p>If you want to enable the math expression parsing, you need to set the <code>formulaMode</code> option to <code>true</code>: <pre><code>new AutoNumeric(domElement, { formulaMode: true });\n</code></pre></p> <p>If you want to cancel the math expression edition and exit the formula mode, hit the <code>Escape</code> key at any time. This will revert any changes made to the input content to the previous formatted value.</p>"},{"location":"Documentation/formula%20mode/#how-to-enter-a-formula","title":"How to enter a formula?","text":"<p>When the formula mode is enabled, you can enter the formula mode just by:</p> <ol> <li>Focusing on the AutoNumeric-managed input</li> <li>Type the <code>=</code> character </li> <li>Then type a valid math formula</li> <li>Once happy with your formula, submit it by typing the <code>Enter</code> key</li> </ol> <p>If your math formula is valid, then its result will be <code>set()</code> and you'll automatically exit formula mode.</p>"},{"location":"Documentation/formula%20mode/#allowed-characters-in-formula-mode","title":"Allowed characters in formula mode","text":"<p>Simple math expressions are allowed, which means you can use any numeric characters, the decimal point <code>.</code>, as well as the following operators <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>(</code> and <code>)</code>.</p> <p>Math precedence</p> <p>Parentheses and operators precedence are respected as expected</p> <p>This allows for evaluating the following math expressions examples without problems:</p> <ul> <li><code>8 * -12.46</code></li> <li><code>22* (10 - 2)/1.5- -0.5</code></li> <li><code>(4+1) * 2 - (104587.23 * 8 - (-7))</code></li> </ul>"},{"location":"Documentation/formula%20mode/#formula-mode-events","title":"Formula mode events","text":"<p>On user validation, if the math expression syntax is invalid, the previous valid <code>rawValue</code> is set back, and the <code>autoNumeric:invalidFormula</code> event is sent.</p> <p>When a valid math expression is accepted, then its result is <code>set()</code>, and the <code>autoNumeric:validFormula</code> event is sent.</p>"},{"location":"Documentation/how%20to%20use/","title":"How to use?","text":""},{"location":"Documentation/how%20to%20use/#in-the-browser","title":"In the browser","text":"<p>Simply include autoNumeric in your html <code>&lt;header&gt;</code> tag.No other files or libraries are required ; autoNumeric has no dependency.</p> <pre><code>&lt;script src=\"autoNumeric.min.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n&lt;!-- ...or, you may also directly use a CDN :--&gt;\n&lt;script src=\"https://cdn.jsdelivr.net/npm/autonumeric@4.8.1\"&gt;&lt;/script&gt;\n&lt;!-- ...or --&gt;\n&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/autonumeric/4.8.1/autoNumeric.min.js\"&gt;&lt;/script&gt;\n&lt;!-- ...or --&gt;\n&lt;script src=\"https://unpkg.com/autonumeric\"&gt;&lt;/script&gt;\n&lt;!-- ...or any other CDN. --&gt;\n</code></pre>"},{"location":"Documentation/how%20to%20use/#in-another-script","title":"In another script","text":"<p>If you want to use AutoNumeric in your code, you can import the <code>src/AutoNumeric.js</code> file as an ES6 module using: <pre><code>import AutoNumeric from 'autonumeric';\n</code></pre></p> <p>Then you can initialize autoNumeric with or without options : <pre><code>// autoNumeric with the defaults options\nanElement = new AutoNumeric(domElement);\n// autoNumeric with specific options being passed\nanElement = new AutoNumeric(domElement, { options });\n// autoNumeric with a css selector and a pre-defined language options\nanElement = new AutoNumeric('.myCssClass &gt; input').french();\n</code></pre></p> <p>You're done!</p> <p>See the available predefined language list here.</p> <p>Tip</p> <p>An AutoNumeric object can be initialized in various ways, check those out here.</p>"},{"location":"Documentation/how%20to%20use/#in-web-workers","title":"In Web Workers","text":"<p>Some static AutoNumeric functions that do not access nor modify the DOM can be used in Web Workers (ie. <code>AutoNumeric.format()</code>, <code>AutoNumeric.unformat()</code>, etc.).</p> <p>In order to be able to use AutoNumeric in those web workers, you need to import the source file <code>src/main.js</code>, not the generated one found in <code>dist/AutoNumeric.js</code>. For instance, by importing the library like that: <pre><code>import AutoNumeric from '../node_modules/autonumeric/src/main';\n</code></pre></p> <p>Doing this will allow your project Webpack configuration to compile it correctly (and use tree shaking as needed).</p>"},{"location":"Documentation/initialization/","title":"Initialization","text":"<p>An AutoNumeric object can be initialized in various ways.</p>"},{"location":"Documentation/initialization/#initialize-one-autonumeric-object","title":"Initialize one AutoNumeric object","text":"<p>It always takes either a DOM element reference as its first argument, or a CSS string selector.</p> <p>Note</p> <p>Only one element can be selected this way, since under the hood <code>document.querySelector</code> is called, and this only return one element.</p> <p>If you need to be able to select and initialize multiple elements in one call, then consider using the static <code>AutoNumeric.multiple()</code> function.</p>"},{"location":"Documentation/initialization/#using-a-dom-element","title":"Using a DOM element","text":"Basic initialization with formatting options<pre><code>anElement = new AutoNumeric(domElement); // With the default options\nanElement = new AutoNumeric(domElement, { options }); // With one option object\nanElement = new AutoNumeric(domElement, 'euroPos'); // With a named pre-defined string\nanElement = new AutoNumeric(domElement, [{ options1 }, 'euroPos', { options2 }]); // With multiple option objects (the latest option overwriting the previous ones)\nanElement = new AutoNumeric(domElement).french(); // With one pre-defined language object\nanElement = new AutoNumeric(domElement).french({ options });// With one pre-defined language object and additional options that will override those defaults\n</code></pre> Initialization and setting the value in one call<pre><code>anElement = new AutoNumeric(domElement, 12345.789); // With the default options, and an initial value\nanElement = new AutoNumeric(domElement, 12345.789, { options });\nanElement = new AutoNumeric(domElement, '12345.789', { options });\nanElement = new AutoNumeric(domElement, 12345.789, 'euroPos');\nanElement = new AutoNumeric(domElement, 12345.789, [{ options1 }, 'euroPos', { options2 }]);\nanElement = new AutoNumeric(domElement, null, { options }); // With a null initial value\nanElement = new AutoNumeric(domElement, 12345.789).french({ options });\nanElement = new AutoNumeric(domElement, 12345.789, { options }).french({ options }); // Not really helpful, but possible\n</code></pre>"},{"location":"Documentation/initialization/#using-css-selectors","title":"Using CSS selectors","text":"<p>The AutoNumeric constructor class can also accept a string as a CSS selector.Under the hood this use the <code>QuerySelector</code> Javascript function, and limit itself to only the first element it finds: Examples using a CSS selector<pre><code>anElement = new AutoNumeric('.myCssClass &gt; input');\nanElement = new AutoNumeric('.myCssClass &gt; input', { options });\nanElement = new AutoNumeric('.myCssClass &gt; input', 'euroPos');\nanElement = new AutoNumeric('.myCssClass &gt; input', [{ options1 }, 'euroPos', { options2 }]);\nanElement = new AutoNumeric('.myCssClass &gt; input', 12345.789);\nanElement = new AutoNumeric('.myCssClass &gt; input', 12345.789, { options });\nanElement = new AutoNumeric('.myCssClass &gt; input', 12345.789, 'euroPos');\nanElement = new AutoNumeric('.myCssClass &gt; input', 12345.789, [{ options1 }, 'euroPos', { options2 }]);\nanElement = new AutoNumeric('.myCssClass &gt; input', null, { options }); // With a null initial value\nanElement = new AutoNumeric('.myCssClass &gt; input', 12345.789).french({ options });\n</code></pre></p> <p>Note</p> <p>AutoNumeric also accepts a limited tag list that it will format on page load, but without adding any event listeners if their <code>contenteditable</code> attribute is not set to <code>true</code>.</p>"},{"location":"Documentation/initialization/#initialize-multiple-autonumeric-objects-at-once","title":"Initialize multiple AutoNumeric objects at once","text":""},{"location":"Documentation/initialization/#using-dom-elements","title":"Using DOM elements","text":"<p>If you know you want to initialize multiple elements in one call, you must then use the static <code>AutoNumeric.multiple()</code> function: Initializing multiple DOM elements in one call (and possibly pass multiple values that will be mapped to each DOM element)<pre><code>[anElement1, anElement2, anElement3] = AutoNumeric.multiple([domElement1, domElement2, domElement3], { options });\n[anElement1, anElement2, anElement3] = AutoNumeric.multiple([domElement1, domElement2, domElement3], 'euroPos');\n[anElement1, anElement2, anElement3] = AutoNumeric.multiple([domElement1, domElement2, domElement3], [{ options }, 'euroPos']);\n[anElement1, anElement2, anElement3] = AutoNumeric.multiple([domElement1, domElement2, domElement3], 12345.789, { options });\n[anElement1, anElement2, anElement3] = AutoNumeric.multiple([domElement1, domElement2, domElement3], 12345.789, [{ options }, 'euroPos']);\n[anElement1, anElement2, anElement3] = AutoNumeric.multiple.french([domElement1, domElement2, domElement3], [12345.789, 234.78, null], { options });\n[anElement1, anElement2, anElement3] = AutoNumeric.multiple.french([domElement1, domElement2, domElement3], [12345.789, 234.78, null], [{ options }, 'euroPos']);\n</code></pre></p> <p>Tip</p> <p>You can pass multiple different values to the selected inputs, using an <code>Array</code>. Those values will be mapped one-to-one in the order the elements are found.</p>"},{"location":"Documentation/initialization/#using-css-selectors_1","title":"Using CSS selectors","text":"<p>If you want to select multiple elements via a CSS selector, then you must use the <code>multiple</code> function as well as above.Under the hood the <code>QuerySelectorAll</code> Javascript function is used. Initializing multiple elements with a single CSS selector<pre><code>[anElement1, anElement2] = AutoNumeric.multiple('.myCssClass &gt; input', { options }); // This always return an Array, even if there is only one element selected\n[anElement1, anElement2] = AutoNumeric.multiple('.myCssClass &gt; input', [null, 12345.789], { options }); // Idem above, but with passing the initial values too\n</code></pre></p> <p>Tip</p> <p>The <code>AutoNumeric.multiple()</code> function will always return an <code>Array</code>, even if there is only one element selected.</p> <p>Note</p> <p>Using an array of option objects and/or pre-defined names will always merge those settings together. The resulting <code>settings</code> objet will then be applied to all the selected elements; they will share the exact same settings.</p>"},{"location":"Documentation/initialization/#form-elements-selections","title":"Form elements selections","text":"<p>AutoNumeric treats <code>&lt;form&gt;</code> elements differently; If a <code>&lt;form&gt;</code> element is passed (or any other 'parent' (or 'root') DOM element), then AutoNumeric will initialize each child <code>&lt;input&gt;</code> elements recursively, ignoring those referenced in the <code>exclude</code> attribute: AutoNumeric initialize the form's &lt;input&gt; elements recursively<pre><code>[anElement1, anElement2] = AutoNumeric.multiple({ rootElement: formElement }, { options });\n[anElement1, anElement2] = AutoNumeric.multiple({ rootElement: formElement, exclude : [hiddenElement, tokenElement] }, { options });\n[anElement1, anElement2] = AutoNumeric.multiple({ rootElement: formElement, exclude : [hiddenElement, tokenElement] }, [12345.789, null], { options });\n</code></pre></p>"},{"location":"Documentation/installation/","title":"Installation","text":"<p>You can install AutoNumeric with your preferred dependency manager:</p> Latest versionStable version <p>With `yarn`<pre><code>yarn add autonumeric\n</code></pre> With `npm`<pre><code>npm install autonumeric --save\n</code></pre></p> <p>With `yarn`<pre><code>yarn add autonumeric@4.6.2\n</code></pre> With `npm`<pre><code>npm install autonumeric@4.6.2 --save\n</code></pre></p> <ol> <li> <p>Yarn website\u00a0\u21a9</p> </li> <li> <p>NPM website\u00a0\u21a9</p> </li> </ol>"},{"location":"Documentation/instantiated%20methods/","title":"Instantiated methods","text":""},{"location":"Documentation/instantiated%20methods/#usual-autonumeric-functions-like-set-get-format-and-unformat","title":"Usual AutoNumeric functions like <code>set</code>, <code>get</code>, <code>format</code> and <code>unformat</code>","text":"<p>The main functions for using AutoNumeric are <code>set()</code> which allows you to set the numeric raw value of an input (AutoNumeric will then automatically format it as per the options you used), and <code>get*</code> which allows you to retrieve the value of an input, either formatted or by getting the raw value directly.</p> <p>The following functions are available on all AutoNumeric-managed elements:</p>"},{"location":"Documentation/instantiated%20methods/#set","title":"Set","text":"Method Description Call example <code>set</code> Set the value (that will be formatted immediately) <code>anElement.set(42.76);</code> <code>set</code> Set the value and update the setting in one go <code>anElement.set(42.76, { options });</code> <code>set</code> Set the value, but do not save the new state in the history table (used for undo/redo actions) <code>anElement.set(42.76, { options }, false);</code> <code>setUnformatted</code> Set the value (that will not be formatted immediately) <code>anElement.setUnformatted(42.76);</code> <code>setUnformatted</code> Set the value and update the setting in one go (the value will not be formatted immediately) <code>anElement.setUnformatted(42.76, { options });</code>"},{"location":"Documentation/instantiated%20methods/#get","title":"Get","text":"Method Description Call example <code>getNumericString</code> Return the unformatted number as a string <code>anElement.getNumericString();</code> <code>get</code> Alias for the <code>.getNumericString()</code> method ( this is deprecated and will be removed soon\u2122) <code>anElement.get();</code> <code>getFormatted</code> Return the formatted string <code>anElement.getFormatted();</code> <code>getNumber</code> Return the unformatted number as a number ( Warning: If you are manipulating a number bigger than <code>Number.MAX_SAFE_INTEGER</code>, you will encounter problems if you try to retrieve it as a number and not as a string) <code>anElement.getNumber();</code> <code>getLocalized</code> Return the localized unformatted number as a string <code>anElement.getLocalized();</code> <code>getLocalized</code> Return the localized unformatted number as a string, using the <code>outputFormat</code> option override passed as a parameter <code>anElement.getLocalized(forcedOutputFormat);</code> <code>getLocalized</code> Idem above, but with a callback function and a forced <code>outputFormat</code> <code>anElement.getLocalized(forcedOutputFormat, callback);</code> <code>getLocalized</code> Idem above, but with a callback function <code>anElement.getLocalized(callback);</code> <code>get*</code> Pass the result of the <code>get*</code> function to the given callback, see here <code>anElement.get*(funcCallback);</code>"},{"location":"Documentation/instantiated%20methods/#formatting","title":"Formatting","text":"Method Description Call example <code>reformat</code> Force the element to reformat its value again (in case the formatting has been lost) <code>anElement.reformat();</code> <code>unformat</code> Remove the formatting and keep only the raw unformatted value in the element (as a numeric string) <code>anElement.unformat();</code> <code>unformatLocalized</code> Remove the formatting and keep only the localized unformatted value in the element <code>anElement.unformatLocalized();</code> <code>unformatLocalized</code> Idem above, but using the <code>outputFormat</code> option override passed as a parameter <code>anElement.unformatLocalized(forcedOutputFormat);</code>"},{"location":"Documentation/instantiated%20methods/#selection-and-miscellaneous","title":"Selection and miscellaneous","text":"Method Description Call example <code>select</code> Select the formatted element content, based on the <code>selectNumberOnly</code> option <code>anElement.select();</code> <code>selectNumber</code> Select only the numbers in the formatted element content, leaving out the currency symbol, whatever the value of the <code>selectNumberOnly</code> option <code>anElement.selectNumber();</code> <code>selectInteger</code> Select only the integer part in the formatted element content, whatever the value of <code>selectNumberOnly</code> <code>anElement.selectInteger();</code> <code>selectDecimal</code> Select only the decimal part in the formatted element content, whatever the value of <code>selectNumberOnly</code> <code>anElement.selectDecimal();</code> <code>clear</code> Reset the element value to the empty string <code>''</code> (or the currency sign, depending on the <code>emptyInputBehavior</code> option value) <code>anElement.clear();</code> <code>clear</code> Always reset the element value to the empty string <code>''</code> as above, no matter the <code>emptyInputBehavior</code> option value <code>anElement.clear(true);</code> <code>isPristine</code> Return <code>true</code> if the current value is the same as when the element first got initialized (not <code>set()</code>) <code>anElement.isPristine();</code> <p>Tip</p> <p>Most of those functions can be chained together, if needed.</p>"},{"location":"Documentation/instantiated%20methods/#using-callback-functions-with-get-methods","title":"Using callback functions with <code>get*</code> methods","text":"<p>All <code>get*</code> methods can accept a callback function as its argument (those methods being <code>get</code>, <code>getNumericString</code>, <code>getFormatted</code>, <code>getNumber</code> and <code>getLocalized</code>; see here).</p> <p>That callback is passed two parameters, the result of the <code>get*</code> method as its first argument, and the AutoNumeric object as its second.</p> <p>This allows you to directly use the result of the <code>get*</code> functions without having to declare a temporary variable like so: <pre><code>function sendToServer(value) {\najax(value);\n}\nconsole.log(`The value ${anElement.getNumber(sendToServer)} has been sent to the server.`);\n</code></pre></p> <p>In other words, <pre><code>// Using:\nanElement.getNumericString(funcCallback);\n// Is equivalent to doing:\nconst result = anElement.getNumericString();\nfuncCallback(result, anElement);\n</code></pre></p> <p>Info</p> <p>The callback function behavior is slightly different when called on multiple elements via <code>global.get*</code> methods.</p>"},{"location":"Documentation/instantiated%20methods/#un-initialize-the-autonumeric-element","title":"Un-initialize the AutoNumeric element","text":"Method Description Call example <code>remove</code> Remove the AutoNumeric listeners from the element (previous name : <code>'destroy'</code>). Keep the element content intact. <code>anElement.remove();</code> <code>wipe</code> Remove the AutoNumeric listeners from the element, and reset its value to <code>''</code> <code>anElement.wipe();</code> <code>nuke</code> Remove the AutoNumeric listeners from the element, then delete the DOM element altogether <code>anElement.nuke();</code>"},{"location":"Documentation/instantiated%20methods/#node-manipulation","title":"Node manipulation","text":"Method Description Call example <code>node</code> Return the DOM element reference of the AutoNumeric-managed element <code>anElement.node();</code> <code>parent</code> Return the DOM element reference of the parent node of the AutoNumeric-managed element <code>anElement.parent();</code> <code>detach</code> Detach the current AutoNumeric element from the shared local 'init' list (which means any changes made on that local shared list will not be transmitted to that element anymore) <code>anElement.detach();</code> <code>detach</code> Idem above, but detach the given AutoNumeric element, not the current one <code>anElement.detach(otherAnElement);</code> <code>attach</code> Attach the given AutoNumeric element to the shared local 'init' list. When doing that, by default the DOM content is left untouched. The user can force a reformat with the new shared list options by passing a second argument valued <code>true</code>. <code>anElement.attach(otherAnElement, reFormat = true);</code>"},{"location":"Documentation/instantiated%20methods/#format-and-unformat-other-numbers-or-dom-elements-with-an-existing-autonumeric-element","title":"Format and unformat other numbers or DOM elements with an existing AutoNumeric element","text":"<p>You can use any AutoNumeric element to format or unformat other numbers or DOM elements.</p> <p>This allows to format or unformat numbers, strings or directly other DOM elements without having to specify the options each time, since the current AutoNumeric object already has those settings set.</p> Method Description Call example <code>formatOther</code> This use the same function signature that when using the static AutoNumeric method directly (cf. <code>AutoNumeric.format</code>), but without having to pass the options <code>anElement.formatOther(12345, { options });</code> <code>formatOther</code> Idem above, but apply the formatting to the given DOM element by modifying its content directly <code>anElement.formatOther(domElement, { options });</code> <code>unformatOther</code> This use the same function signature that when using the static AutoNumeric method directly (cf. <code>AutoNumeric.unformat</code>), but without having to pass the options <code>anElement.unformatOther('1.234,56 \u20ac', { options });</code> <code>unformatOther</code> Idem above, but apply the unformatting to the given DOM element by modifying its content directly <code>anElement.unformatOther(domElement, { options });</code>"},{"location":"Documentation/instantiated%20methods/#initialize-other-dom-elements","title":"Initialize other DOM Elements","text":"<p>Once you have an AutoNumeric element already setup correctly with the right options, you can use it as many times you want to initialize as many other DOM elements as needed.</p> <p>Important</p> <p>This works only on elements that can be managed by AutoNumeric.You can check the list of supported elements here.</p> <p>Whenever <code>init</code> is used to initialize other DOM elements, a shared local 'init' list of those elements is stored in the AutoNumeric objects.This allows for neat things like modifying all those linked AutoNumeric elements globally, with only one call.</p> Method Description Call example <code>init</code> Use an existing AutoNumeric element to initialize another single DOM element with the same options <code>const anElement2 = anElement.init(domElement2);</code> <code>init</code> If <code>true</code> is set as the second argument, then the newly generated AutoNumeric element will not share the same local element list as <code>anElement</code> <code>const anElement2 = anElement.init(domElement2, true);</code> <code>init</code> Use an existing AutoNumeric element to initialize multiple other DOM elements from an Array, with the same options <code>const anElementsArray = anElement.init([domElement2, domElement3, domElement4]);</code> <code>init</code> Use an existing AutoNumeric element to initialize multiple other DOM elements from a CSS selector, with the same options <code>const anElementsArray = anElement.init('.currency');</code>"},{"location":"Documentation/instantiated%20methods/#perform-actions-globally-on-a-shared-init-list-of-autonumeric-elements","title":"Perform actions globally on a shared 'init' list of AutoNumeric elements","text":"<p>This local 'init' list can be used to perform global operations on all those AutoNumeric elements, with one function call.</p> <p>Example</p> <p>The function names are the same as the ones that are used on a single AutoNumeric element.</p> <p>For instance instead of calling <code>anElement.set(42)</code> on a single element, you must call the function by prefixing <code>.global</code> before the method name like so: <code>anElement.global.set(42)</code>.</p>"},{"location":"Documentation/instantiated%20methods/#functions-that-affects-the-auotnumeric-elements","title":"Functions that affects the AuotNumeric elements","text":"<p>Below are listed all the supported methods than can be called globally:</p> <pre><code>anElement.global.set(2000); // Set the value 2000 in all the AutoNumeric-managed elements that are shared on this element\nanElement.global.setUnformatted(69);\n[result1, result2, result3] = anElement.global.get(); // Return an array of results\n[result1, result2, result3] = anElement.global.getNumericString(); // Return an array of results\n[result1, result2, result3] = anElement.global.getFormatted(); // Return an array of results\n[result1, result2, result3] = anElement.global.getNumber(); // Return an array of results\n[result1, result2, result3] = anElement.global.getLocalized(); // Return an array of results\nanElement.global.reformat();\nanElement.global.unformat();\nanElement.global.unformatLocalized();\nanElement.global.unformatLocalized(forcedOutputFormat);\nanElement.global.update({ options }); // Update the settings of each AutoNumeric-managed elements\nanElement.global.update({ options1 }, { options2 }, { options3 }); // Idem above, but accepts as many option objects as needed\nanElement.global.isPristine(); // Return `true` if *all* the AutoNumeric-managed elements are pristine, if their raw value hasn't changed\nanElement.global.isPristine(false); // Idem as above, but also checks that the formatted value hasn't changed\nanElement.global.clear(); // Clear the value in all the AutoNumeric-managed elements that are shared on this element\nanElement.global.remove();\nanElement.global.wipe();\nanElement.global.nuke();\n</code></pre> <p>Do note that the <code>.global.get*()</code> functions return an array of results, with one value for each AutoNumeric element in the linked list</p>"},{"location":"Documentation/instantiated%20methods/#functions-that-affects-the-init-list","title":"Functions that affects the init-list","text":"<p>The shared local list also provide list-specific methods to manipulate it: <pre><code>anElement.global.has(domElementOrAutoNumericObject); // Return `true` if the given AutoNumeric object (or DOM element) is in the local AutoNumeric element list\nanElement.global.addObject(domElementOrAutoNumericObject); // Add an existing AutoNumeric object (or DOM element) to the local AutoNumeric element list, using the DOM element as the key\nanElement.global.removeObject(domElementOrAutoNumericObject); // Remove the given AutoNumeric object (or DOM element) from the local AutoNumeric element list, using the DOM element as the key\nanElement.global.removeObject(domElementOrAutoNumericObject, true); // Idem above, but keep the current AutoNumeric object in the local list if it's removed by itself\nanElement.global.empty(); // Remove all elements from the shared list, effectively emptying it\nanElement.global.empty(true); // Idem above, but instead of completely emptying the local list of each AutoNumeric objects, each one of those keeps itself in its own local list\n[anElement0, anElement1, anElement2, anElement3] = anElement.global.elements(); // Return an array containing all the AutoNumeric elements that have been initialized by each other\nanElement.global.getList(); // Return the `Map` object directly\nanElement.global.size(); // Return the number of elements in the local AutoNumeric element list\n</code></pre></p>"},{"location":"Documentation/instantiated%20methods/#using-callback-functions-with-globalget-methods","title":"Using callback functions with <code>global.get*</code> methods","text":"<p>Like for their <code>get*</code> methods counterparts, <code>global.get*</code> methods accepts a callback function. However, the callback is executed only once and is passed an array of the <code>get*</code> function results as its first argument, while the AutoNumeric object being passed as its second one.</p> <pre><code>// Using:\nanElement.global.getNumericString(funcCallback);\n// Is equivalent to doing:\nconst [result1, result2, result3] = anElement.global.getNumericString();\nfuncCallback([result1, result2, result3], anElement);\n</code></pre>"},{"location":"Documentation/instantiated%20methods/#form-functions","title":"Form functions","text":"<p>AutoNumeric elements provide special functions to manipulate the form they are a part of. Those special functions really work on the parent <code>&lt;form&gt;</code> element, instead of the <code>&lt;input&gt;</code> element itself.</p> <p>Form functions can be divided in two categories:</p> <ul> <li>Functions that manipulate the form values, and</li> <li>Functions that submit the form values to the server.</li> </ul>"},{"location":"Documentation/instantiated%20methods/#access-and-manipulate-the-form-values","title":"Access and manipulate the form values","text":"<p>The functions below makes retrieving and preparing the form values easy. Those values can be formatted or not, and in any format you would want (<code>Array</code>, JSON, string, etc.).</p> <p>You can then decide how and when to send those form values to the server.</p> Method Description Call example <code>form</code> Return a reference to the parent <code>&lt;form&gt;</code> element, <code>null</code> if it does not exist <code>anElement.form();</code> <code>form(forcedSearch)</code> Idem above, but will force a new search for the parent <code>&lt;form&gt;</code> element, discarding any previously found one <code>anElement.form(true);</code> <code>formNumericString</code> Return a string in standard URL-encoded notation with the form input values being unformatted <code>anElement.formNumericString();</code> <code>formFormatted</code> Return a string in standard URL-encoded notation with the form input values being formatted <code>anElement.formFormatted();</code> <code>formLocalized</code> Return a string in standard URL-encoded notation with the form input values, with localized values <code>anElement.formLocalized();</code> <code>formLocalized(forcedOutputFormat)</code> Idem above, but with the possibility of overriding the <code>outputFormat</code> option <code>anElement.formLocalized(forcedOutputFormat);</code> <code>formArrayNumericString</code> Return an array containing an object for each form <code>&lt;input&gt;</code> element, with the values as numeric strings <code>anElement.formArrayNumericString();</code> <code>formArrayFormatted</code> Return an array containing an object for each form <code>&lt;input&gt;</code> element, with the values as formatted strings <code>anElement.formArrayFormatted();</code> <code>formArrayLocalized</code> Return an array containing an object for each form <code>&lt;input&gt;</code> element, with the values as localized numeric strings <code>anElement.formArrayLocalized();</code> <code>formArrayLocalized(forcedOutputFormat)</code> Idem above, but with the possibility of overriding the <code>outputFormat</code> option <code>anElement.formArrayLocalized(forcedOutputFormat);</code> <code>formJsonNumericString</code> Return a JSON string containing an object representing the form input values. This is based on the result of the <code>formArrayNumericString()</code> function. <code>anElement.formJsonNumericString();</code> <code>formJsonFormatted</code> Return a JSON string containing an object representing the form input values. This is based on the result of the <code>formArrayFormatted()</code> function. <code>anElement.formJsonFormatted();</code> <code>formJsonLocalized</code> Return a JSON string containing an object representing the form input values. This is based on the result of the <code>formArrayLocalized()</code> function. <code>anElement.formJsonLocalized();</code> <code>formJsonLocalized(forcedOutputFormat)</code> Idem above, but with the possibility of overriding the <code>outputFormat</code> option <code>anElement.formJsonLocalized(forcedOutputFormat);</code> <code>formUnformat</code> Unformat all the AutoNumeric-managed elements that are a child to the parent  element of this <code>anElement</code> input, to numeric strings <code>anElement.formUnformat();</code> <code>formUnformatLocalized</code> Unformat all the AutoNumeric-managed elements that are a child to the parent  element of this <code>anElement</code> input, to localized strings <code>anElement.formUnformatLocalized();</code> <code>formReformat</code> Reformat all the AutoNumeric-managed elements that are a child to the parent  element of this <code>anElement</code> input <code>anElement.formReformat();</code>"},{"location":"Documentation/instantiated%20methods/#submit-the-form-values","title":"Submit the form values","text":"<p>Submitting the form values to the server can be done with a single AutoNumeric function call. Moreover, the functions below may take a callback, giving you more control on what to do when submitting data to the server.</p> <p>The following functions can either take a callback, or not. If they don't, the default <code>form.submit()</code> function will be called.</p> Method Description Call example <code>formSubmitNumericString(callback)</code> Run the <code>callback(value)</code> with <code>value</code> being equal to the result of <code>formNumericString()</code> <code>anElement.formSubmitNumericString(callback);</code> <code>formSubmitFormatted(callback)</code> Run the <code>callback(value)</code> with <code>value</code> being equal to the result of <code>formFormatted()</code> <code>anElement.formSubmitFormatted(callback);</code> <code>formSubmitLocalized(callback)</code> Run the <code>callback(value)</code> with <code>value</code> being equal to the result of <code>formLocalized()</code> <code>anElement.formSubmitLocalized(callback);</code> <code>formSubmitLocalized(forcedOutputFormat, callback)</code> Idem above, but with the possibility of overriding the <code>outputFormat</code> option <code>anElement.formSubmitLocalized(forcedOutputFormat, callback);</code> <p>For the following methods, the callback is mandatory:</p> Method Description Call example <code>formSubmitArrayNumericString(callback)</code> Run the <code>callback(value)</code> with <code>value</code> being equal to the result of <code>formArrayNumericString()</code> <code>anElement.formSubmitArrayNumericString(callback);</code> <code>formSubmitArrayFormatted(callback)</code> Run the <code>callback(value)</code> with <code>value</code> being equal to the result of <code>formArrayFormatted()</code> <code>anElement.formSubmitArrayFormatted(callback);</code> <code>formSubmitArrayLocalized(callback, forcedOutputFormat)</code> Idem above, but with the possibility of overriding the <code>outputFormat</code> option <code>anElement.formSubmitArrayLocalized(callback, forcedOutputFormat);</code> <code>formSubmitJsonNumericString(callback)</code> Run the <code>callback(value)</code> with <code>value</code> being equal to the result of <code>formJsonNumericString()</code> <code>anElement.formSubmitJsonNumericString(callback);</code> <code>formSubmitJsonFormatted(callback)</code> Run the <code>callback(value)</code> with <code>value</code> being equal to the result of <code>formJsonFormatted()</code> <code>anElement.formSubmitJsonFormatted(callback);</code> <code>formSubmitJsonLocalized(callback, forcedOutputFormat)</code> Idem above, but with the possibility of overriding the <code>outputFormat</code> option <code>anElement.formSubmitJsonLocalized(callback, forcedOutputFormat);</code>"},{"location":"Documentation/instantiated%20methods/#function-chaining","title":"Function chaining","text":"<p>Most of those instantiated functions can be chained which allow to be less verbose and more concise.</p> Chaining on one element<pre><code>anElement.french()\n.set(42)\n.update({ options })\n.formSubmitJsonNumericString(callback)\n.clear();\n</code></pre> Chaining on multiple elements<pre><code>anElement.global.set(72)\n.global.clear()\n.set(25)\n.global.getNumericString();\n</code></pre>"},{"location":"Documentation/instantiated%20methods/#static-methods","title":"Static methods","text":"<p>AutoNumeric also provide static functions on the AutoNumeric class. You can check those out in the next chapter.</p>"},{"location":"Documentation/methods/","title":"Accessing the methods","text":"<p>AutoNumeric provides numerous methods to access and modify the element value, formatted or unformatted, at any point in time. It does so by providing access to those methods via the AutoNumeric object class, which is declared as an ES6 Module.</p> <p>First, you need to get a reference to the AutoNumeric module that you need to import: Import the AutoNumeric library as an ES6 module<pre><code>import AutoNumeric from 'autonumeric';\n</code></pre></p> <p>Then you'll be able to access either the methods on the instantiated AutoNumeric object, or the static functions directly by using the <code>AutoNumeric</code> class.</p>"},{"location":"Documentation/older%20versions/","title":"Older versions","text":"<p>The previous stable AutoNumeric version <code>v2.0.13</code> can be found here, while the older <code>v1.9.46</code> can be found here.</p> <p>Check out the upgrade guide if you need help upgrading from version <code>1.9</code>/<code>2</code> to version <code>4</code>.</p>"},{"location":"Documentation/on%20which%20elements%20can%20it%20be%20used/","title":"On which elements can it be used?","text":"<p>AutoNumeric can be used in two ways;</p> <ul> <li>with event listeners when used on <code>&lt;input&gt;</code> elements or on <code>contenteditable</code>-enabled elements making them reactive (in a read/write mode), or</li> <li>without event listeners when used on DOM elements not having the <code>contenteditable</code> attribute set to <code>true</code>, essentially acting as a format-once-and-forget read only mode.</li> </ul>"},{"location":"Documentation/on%20which%20elements%20can%20it%20be%20used/#on-input-elements","title":"On <code>&lt;input&gt;</code> elements","text":"<p>When used on an <code>&lt;input&gt;</code> element, you'll be able to interact with its value and get a formatted input value as-you-type, using the full power of AutoNumeric.</p> <p>Please note than due to browser constraints, only the following supported <code>&lt;input&gt;</code> types are supported:</p> <ul> <li><code>text</code>,</li> <li><code>tel</code>,</li> <li><code>hidden</code>, or</li> <li>no type specified at all</li> </ul> Input types examples<pre><code>&lt;input type='text' value=\"1234.56\"&gt;\n&lt;input type='tel' value=\"1234.56\"&gt;\n&lt;input type='hidden' value=\"1234.56\"&gt;\n&lt;input value=\"1234.56\"&gt;\n</code></pre> <p>Caveat</p> <p>The <code>number</code> type is not supported simply because AutoNumeric formats numbers as strings (ie. <code>'123.456.789,00 &amp;#8364;'</code>) that this input type does not allow.</p>"},{"location":"Documentation/on%20which%20elements%20can%20it%20be%20used/#on-contenteditable-enabled-elements","title":"On <code>contenteditable</code>-enabled elements","text":"<p>Any element in the following <code>allowedTagList</code>1 that support the <code>contenteditable</code> attribute can be initialized by AutoNumeric. This means that anywhere on a page, on any DOM element, you can harness the power of AutoNumeric which will allow you to mask and manage the user inputs.</p> <p>Given the following html code... <pre><code>&lt;p id=\"editableDom\" contenteditable=\"true\"&gt;12345678.9012&lt;/p&gt;\n</code></pre> you can initialize this <code>&lt;p&gt;</code> element with AutoNumeric: <pre><code>new AutoNumeric('#editableDom').french();\n</code></pre> ...and it will act exactly like an <code>&lt;input&gt;</code> element controlled by AutoNumeric.</p>"},{"location":"Documentation/on%20which%20elements%20can%20it%20be%20used/#on-other-dom-elements","title":"On other DOM elements","text":"<p>You can use AutoNumeric to format a DOM element value once on load. This means it will then not react to any user interaction nor changes to it's value or formatting.</p> <p>The following elements are accepted:</p> <p>Allowed tags list</p> <p><code>b</code>, <code>caption</code>, <code>cite</code>, <code>code</code>, <code>const</code>, <code>dd</code>, <code>del</code>, <code>div</code>, <code>dfn</code>, <code>dt</code>, <code>em</code>, <code>h1</code>, <code>h2</code>, <code>h3</code>, <code>h4</code>, <code>h5</code>, <code>h6</code>, <code>ins</code>, <code>kdb</code>, <code>label</code>, <code>li</code>, <code>option</code>, <code>output</code>, <code>p</code>, <code>q</code>, <code>s</code>, <code>sample</code>, <code>span</code>, <code>strong</code>, <code>td</code>, <code>th</code>, <code>u</code></p> <p>Tips</p> <p>Since the <code>number</code> type is not supported, if you want to display a numeric keyboard when selecting an AutoNumeric-managed element in a mobile browser, you can use the input <code>tel</code> type.</p> <p>In the future, you'll be able to add the <code>inputmode=\"numeric\"</code> Html attribute in order to achieve the same effect.</p> <ol> <li> <p>The <code>allowedTagList</code> contains the following HTML elements : <code>b</code>, <code>caption</code>, <code>cite</code>, <code>code</code>, <code>const</code>, <code>dd</code>, <code>del</code>, <code>div</code>, <code>dfn</code>, <code>dt</code>, <code>em</code>, <code>h1</code>, <code>h2</code>, <code>h3</code>, <code>h4</code>, <code>h5</code>, <code>h6</code>, <code>ins</code>, <code>kdb</code>, <code>label</code>, <code>li</code>, <code>option</code>, <code>output</code>, <code>p</code>, <code>q</code>, <code>s</code>, <code>sample</code>, <code>span</code>, <code>strong</code>, <code>td</code>, <code>th</code>, <code>u</code> \u21a9</p> </li> </ol>"},{"location":"Documentation/predefined%20options/","title":"Predefined options","text":"<p>Sometimes you do not want to have to configure every single aspect of your format using the configuration options, specially if it's a common one.Hence, we provide multiple default options for the most common currencies and number formats.</p>"},{"location":"Documentation/predefined%20options/#predefined-language-options","title":"Predefined language options","text":"<p>AutoNumeric provides predefined language options to format currencies. You can set the pre-defined language option like so: Use the methods<pre><code>new AutoNumeric('.mySelector &gt; input').french();\n</code></pre> ...or just create the AutoNumeric object with the predefined language option<pre><code>new AutoNumeric('.mySelector &gt; input', AutoNumeric.getPredefinedOptions().French);\n</code></pre></p> <p>Currently, the predefined language options are:</p> Option name <code>French</code> <code>Spanish</code> <code>NorthAmerican</code> <code>British</code> \ud83c\udde8\ud83c\udded <code>Swiss</code> <code>Japanese</code> <code>Chinese</code> \ud83c\udde7\ud83c\uddf7 <code>Brazilian</code> <code>Turkish</code> <p>If you feel a common currency option is missing, please create a pull request and we'll add it!</p>"},{"location":"Documentation/predefined%20options/#predefined-common-options","title":"Predefined common options","text":"<p>Moreover, AutoNumeric provides the following common options:</p> Option name Description Examples <code>dotDecimalCharCommaSeparator</code> Set the decimal character as a dot <code>.</code> and the group separator as a comma <code>,</code> <code>1,234.56</code> <code>commaDecimalCharDotSeparator</code> Set the decimal character as a comma <code>,</code> and the group separator as a dot <code>.</code> <code>1.234,56</code> <code>integer</code> Set the minimum and maximum value so that only an integer can be entered, without any decimal places available <code>42</code>, <code>-42</code> <code>integerPos</code> Set the minimum and maximum value so that only a positive integer can be entered <code>42</code> <code>integerNeg</code> Set the minimum and maximum value so that only a negative integer can be entered <code>-42</code> <code>float</code> Set the minimum and maximum value so that a float can be entered, without the default <code>2</code> decimal places <code>1.234</code>, <code>-1.234</code> <code>floatPos</code> Set the minimum and maximum value so that only a positive float can be entered <code>1.234</code> <code>floatNeg</code> Set the minimum and maximum value so that only a negative float can be entered <code>-1.234</code> <code>numeric</code> Format the value as a numeric string (with no digit group separator, and a dot for the decimal point) <code>1234.56</code> <code>numericPos</code> Idem above, but only allow positive values <code>1234.56</code> <code>numericNeg</code> Idem above, but only allow negative values <code>-1234.56</code> <code>euro</code> Same configuration than <code>French</code> <code>1.234,56 \u20ac</code> <code>euroF</code> Same configuration than <code>euro</code>, with the formula mode activated <code>1.234,56 \u20ac</code> <code>euroPos</code> Idem above, but only allow positive values <code>1.234,56 \u20ac</code> <code>euroNeg</code> Idem above, but only allow negative values <code>-1.234,56 \u20ac</code> <code>euroSpace</code> Same configuration than <code>French</code> except a space is used for the group separator instead of the dot <code>1\u2009234,56 \u20ac</code> <code>euroSpacePos</code> Idem above, but only allow positive values <code>1\u2009234,56 \u20ac</code> <code>euroSpaceNeg</code> Idem above, but only allow negative values <code>-1\u2009234,56 \u20ac</code> <code>dollar</code> Same configuration than <code>NorthAmerican</code> <code>$1,234.56</code> <code>dollarF</code> Same configuration than <code>dollar</code>, with the formula mode activated <code>$1,234.56</code> <code>dollarPos</code> Idem above, but only allow positive values <code>$1,234.56</code> <code>dollarNeg</code> Idem above, but only allow negative values <code>-$1,234.56</code> <code>percentageEU2dec</code> Same configuration than <code>French</code>, but display a percent <code>%</code> sign instead of the currency sign, with <code>2</code> decimal places <code>12,34\u202f%</code> <code>percentageEU2decPos</code> Idem above, but only allow positive values <code>12,34\u202f%</code> <code>percentageEU2decNeg</code> Idem above, but only allow negative values <code>-12,34\u202f%</code> <code>percentageEU3dec</code> Same configuration than <code>French</code>, but display a percent <code>%</code> sign instead of the currency sign, with <code>3</code> decimal places <code>12,345\u202f%</code> <code>percentageEU3decPos</code> Idem above, but only allow positive values <code>12,345\u202f%</code> <code>percentageEU3decNeg</code> Idem above, but only allow negative values <code>-12,345\u202f%</code> <code>percentageUS2dec</code> Same configuration than <code>NorthAmerican</code>, but display a percent <code>%</code> sign instead of the currency sign, with <code>2</code> decimal places <code>12.34%</code> <code>percentageUS2decPos</code> Idem above, but only allow positive values <code>12.34%</code> <code>percentageUS2decNeg</code> Idem above, but only allow negative values <code>-12.34%</code> <code>percentageUS3dec</code> Same configuration than <code>NorthAmerican</code>, but display a percent <code>%</code> sign instead of the currency sign, with <code>3</code> decimal places <code>12.345%</code> <code>percentageUS3decPos</code> Idem above, but only allow positive values <code>12.345%</code> <code>percentageUS3decNeg</code> Idem above, but only allow negative values <code>-12.345%</code> <p>You can set those pre-defined options like so: <pre><code>new AutoNumeric('.mySelector &gt; input', AutoNumeric.getPredefinedOptions().integerPos);\n</code></pre></p>"},{"location":"Documentation/predefined%20options/#predefined-style-rules","title":"Predefined style rules","text":"<p>With the <code>styleRules</code> option, you can define the rules that add or remove the CSS class(es) from the element, based on the raw unformatted value.This option can also be used to define custom callbacks in the <code>userDefined</code> attribute, that will be called whenever the <code>rawValue</code> is updated.</p> <p>Predefined styles rules are available so you do not have to create them:</p>"},{"location":"Documentation/predefined%20options/#positive-and-negative","title":"Positive and negative","text":"<p>Sets the <code>'autoNumeric-positive'</code> css class whenever the raw value is positive. Sets the <code>'autoNumeric-negative'</code> css class whenever the raw value is negative. Positive and negative style rule<pre><code>new AutoNumeric(domElement, { styleRules: AutoNumeric.options.styleRules.positiveNegative });\n</code></pre></p>"},{"location":"Documentation/predefined%20options/#range-from-0-to-100-in-4-steps","title":"Range from 0 to 100, in 4 steps","text":"<p>Sets the <code>'autoNumeric-red'</code> css class whenever the raw value is between <code>0</code> and <code>25</code> excluded. Sets the <code>'autoNumeric-orange'</code> css class whenever the raw value is between <code>25</code> and <code>50</code> excluded. Sets the <code>'autoNumeric-yellow'</code> css class whenever the raw value is between <code>50</code> and <code>75</code> excluded. Sets the <code>'autoNumeric-green'</code> css class whenever the raw value is between <code>75</code> and <code>100</code> excluded. Range 0 to 100 style rule<pre><code>new AutoNumeric(domElement, { styleRules: AutoNumeric.options.styleRules.range0To100With4Steps });\n</code></pre></p>"},{"location":"Documentation/predefined%20options/#odd-and-even","title":"Odd and even","text":"<p>Sets the <code>'autoNumeric-even'</code> css class whenever the raw value is even. Sets the <code>'autoNumeric-odd'</code> css class whenever the raw value is odd. Odd and even style rule<pre><code>new AutoNumeric(domElement, { styleRules: AutoNumeric.options.styleRules.evenOdd });\n</code></pre></p>"},{"location":"Documentation/predefined%20options/#small-range-around-zero-from-1-to-1","title":"Small range around zero, from -1 to 1","text":"<p>Sets the <code>'autoNumeric-small-negative'</code> css class whenever the raw value is between <code>-1</code> and <code>0</code> excluded. Sets the <code>'autoNumeric-zero'</code> css class whenever the raw value is equal to <code>0</code>. Sets the <code>'autoNumeric-small-positive'</code> css class whenever the raw value is between <code>0</code> excluded and <code>1</code>. Small range style rule<pre><code>new AutoNumeric(domElement, { styleRules: AutoNumeric.options.styleRules.rangeSmallAndZero });\n</code></pre></p>"},{"location":"Documentation/predefined%20options/#custom-callbacks","title":"Custom callbacks","text":"<p>Custom callbacks can be defined and will be called every time the raw value is updated. You can add as many callbacks you want in the <code>userDefined</code> attribute of the <code>styleRules</code> object in the options.</p> <p>Important</p> <p>Each <code>userDefined</code> array entry should at least provide a function as the <code>callback</code> attribute.</p> <p>This <code>callback</code> function is passed the <code>rawValue</code> as the single parameter (except if <code>classes</code> is <code>null</code> or <code>undefined</code>, see below).</p> <p>Depending of what type of data the <code>callback</code> function returns, and what the content of the <code>classes</code> attribute is, it will either uses CSS class names defined in the <code>classes</code> attribute, or just call the <code>callback</code> with the current AutoNumeric object passed as a parameter if <code>classes</code> is <code>null</code> or <code>undefined</code>.</p> Callback variations Callback return type <code>classes</code> content Result 1 a <code>boolean</code> a single <code>String</code> If <code>true</code>, add the single class defined in <code>classes</code>. If <code>false</code> removes it. 2 a <code>boolean</code> an <code>Array</code> with 2 values (array indexes) If <code>true</code>, add the first element of the array, otherwise the second 3 an <code>integer</code> an <code>Array</code> with multiple values (array indexes) Will add the selected CSS class <code>classes[index]</code>, and remove the others 4 an <code>Array</code> of <code>integer</code> an <code>Array</code> with multiple values (array indexes) Will add all the given selected CSS classes, and remove the others 5 \u2205 <code>null</code> or <code>undefined</code> There, the callback have access to the current AutoNumeric object passed as its argument, which means you are free to do whatever you want from here! <p>See the following examples for how to use those callback variations: Calling callbacks when the raw value changes, using style rules<pre><code>const options = {\nstyleRules : {\nuserDefined: [\n// 1) If 'classes' is a string, set it if `true`, remove it if `false`\n{ callback: rawValue =&gt; { return true; }, classes: 'thisIsTrue' },\n// 2) If 'classes' is an array with only 2 elements, set the first class if `true`, the second if `false`\n{ callback: rawValue =&gt; rawValue % 2 === 0, classes: ['autoNumeric-even', 'autoNumeric-odd'] },\n// 3) Return only one index to use on the `classes` array (here, 'class3')\n{ callback: rawValue =&gt; { return 2; }, classes: ['class1', 'class2', 'class3'] },\n// 4) Return an array of indexes to use on the `classes` array (here, 'class1' and 'class3')\n{ callback: rawValue =&gt; { return [0, 2]; }, classes: ['class1', 'class2', 'class3'] },\n// 5) If 'classes' is `undefined` or `null`, then the callback is called with the AutoNumeric object passed as a parameter\n{ callback: anElement =&gt; { return anElement.getFormatted(); } },\n],\n},\n}\n</code></pre></p>"},{"location":"Documentation/related%20projects/","title":"Related projects","text":"<p>Projects have been created to integrate AutoNumeric in existing frameworks, so that the library could be used easily in components.</p> <p>Info</p> <p>Some of the following projects may lag with the latest AutoNumeric version, or even be incomplete.</p>"},{"location":"Documentation/related%20projects/#javascript","title":"Javascript","text":"<p>For integration into Javascript frameworks, you can use:</p> <ul> <li>Vue.js with the vue-autonumeric component,</li> <li>React with the react-numeric component,</li> <li>Angular with the @angularfy/autonumeric,</li> <li>AngularJS with the angular-currency directive,</li> <li>Meteor with meteor-autonumeric, and</li> <li>Ember with ember-autonumeric.</li> </ul>"},{"location":"Documentation/related%20projects/#rails","title":"Rails","text":"<p>For integration into Rails projects, you can use the autonumeric-rails project.</p>"},{"location":"Documentation/related%20projects/#php","title":"PHP","text":"<p>For integration with PHP Yii2, take a look at the extead/yii2-autonumeric or haifahrul/yii2-autonumeric projects.</p>"},{"location":"Documentation/special%20options/","title":"Special options","text":""},{"location":"Documentation/special%20options/#noeventlisteners","title":"<code>noEventListeners</code>","text":"<p>Using the <code>noEventListeners</code> option allows AutoNumeric to apply formatting without adding any event listeners to an input, or any other DOM elements (that the function would accept as a parameter).This would be useful for read-only values for instance. <pre><code>// Initialize with setting up event listeners, but removing them in the same call\nanElement = new AutoNumeric(domElement, 12345.789, { options }).remove(); // This is the default existing way of doing that...\n// Initialize without setting up any event listeners by directly passing the special option `noEventListeners` to prevent the initial creation of those event listeners\nanElement = new AutoNumeric(domElement, 12345.789, { noEventListeners: true });\n</code></pre> In the latter case, it initializes the AutoNumeric element, except it does not add any event listeners beforehand. This means it formats the value only once and then lets the user modify it freely.</p> <p>Note</p> <p>The value can then be formatted via a call to <code>set()</code>.</p>"},{"location":"Documentation/special%20options/#readonly","title":"<code>readOnly</code>","text":"<p>AutoNumeric can initialize an <code>&lt;input&gt;</code> element with the <code>readonly</code> property by setting the <code>readOnly</code> option to <code>true</code> in the settings: <pre><code>anElement = new AutoNumeric(domElement, 12345.789, { readOnly: true });\n</code></pre></p> <p>For more detail on how to use each options, please take a look at the detailed comments in the source code for the <code>AutoNumeric.defaultSettings</code> object.</p>"},{"location":"Documentation/static%20methods/","title":"Static methods","text":"<p>Without having to initialize any AutoNumeric object, you can directly use the static <code>AutoNumeric</code> class functions.</p> <p>Info</p> <p>Some of those functions can be used in Web Workers.</p>"},{"location":"Documentation/static%20methods/#get","title":"Get","text":"Method Description Call example <code>getAutoNumericElement</code> Return the AutoNumeric object that manages the given DOM element <code>AutoNumeric.getAutoNumericElement(domElement)</code><code>AutoNumeric.getAutoNumericElement('#theInput')</code> <code>getDefaultConfig</code> Return the default autoNumeric settings <code>AutoNumeric.getDefaultConfig()</code> <code>getFormatted</code> Return the formatted string from the given DOM element or query selector.This can accept a callback that is passed the result of <code>getFormatted</code> and a reference to the AutoNumeric object. <code>AutoNumeric.getFormatted(domElement, callback);</code><code>AutoNumeric.getFormatted('#theInput')</code> <code>getLocalized</code> Return the localized unformatted number as a string from the given DOM element or query selector.This can accept a callback that is passed the result of <code>getLocalized</code> and a reference to the AutoNumeric object. <code>AutoNumeric.getLocalized(domElement, forcedOutputFormat, callback);</code><code>AutoNumeric.getLocalized('#theInput')</code> <code>getNumber</code> Return the unformatted number as a number from the given DOM element or query selector (The same warnings got the non-static <code>getNumber</code> method applies here too).This can accept a callback that is passed the result of <code>getNumber</code> and a reference to the AutoNumeric object. <code>AutoNumeric.getNumber(domElement, callback);</code><code>AutoNumeric.getNumber('#theInput')</code> <code>getNumericString</code> Return the unformatted number as a string from the given DOM element or query selector.This can accept a callback that is passed the result of <code>getNumericString</code> and a reference to the AutoNumeric object. <code>AutoNumeric.getNumericString(domElement, callback)</code><code>AutoNumeric.getNumericString('#theInput')</code> <code>getPredefinedOptions</code> Return all the predefined options in one object <code>AutoNumeric.getPredefinedOptions()</code> <code>getPredefinedOptions</code> Return a specific pre-defined language option object <code>AutoNumeric.getPredefinedOptions().French</code>"},{"location":"Documentation/static%20methods/#set","title":"Set","text":"Method Description Call example <code>localizeAndSet</code> Unformat and localize the <code>domElement</code> value with the given options and returns the localized value as a string. This function does update that element value with the newly localized value in the process. <code>AutoNumeric.localizeAndSet(domElement, { options });</code> <code>formatAndSet</code> Format the <code>domElement</code> value with the given options and returns the formatted value as a string. This function does update that element value with the newly formatted value in the process. <code>AutoNumeric.formatAndSet(domElement, { options });</code> <code>reformatAndSet</code> Recursively format all the autoNumeric-managed elements that are a child to the <code>referenceToTheDomElement</code> element given as a parameter (this is usually the parent <code>&lt;form&gt;</code> element), with the settings of each AutoNumeric elements. <code>AutoNumeric.reformatAndSet(referenceToTheDomElement);</code> <code>set</code> Set the given value on the AutoNumeric object that manages the given DOM element, if any. Returns <code>null</code> if no AutoNumeric object is found, otherwise returns the AutoNumeric object. <code>AutoNumeric.set(domElement, 42)</code><code>AutoNumeric.set('#theInput', 42)</code> <code>unformatAndSet</code> Unformat the <code>domElement</code> value with the given options and returns the unformatted value as a numeric string. This function does update that element value with the newly unformatted value in the process. <code>AutoNumeric.unformatAndSet(domElement, { options });</code> <code>unformatAndSet</code> Recursively unformat all the autoNumeric-managed elements that are a child to the <code>referenceToTheDomElement</code> element given as a parameter (this is usually the parent <code>&lt;form&gt;</code> element) <code>AutoNumeric.unformatAndSet(referenceToTheDomElement);</code>"},{"location":"Documentation/static%20methods/#formatting","title":"Formatting","text":"Method Description Call example <code>format</code> Format the given number with the given options. This returns the formatted value as a string. <code>AutoNumeric.format(12345.21, { options });</code> <code>format</code> Idem above, but using a numeric string as the first parameter <code>AutoNumeric.format('12345.21', { options });</code> <code>format</code> Idem above, but you can pass as many option objects you want to this function, the latter overwriting the previous ones. This allows to correctly format currencies that have a predefined option as its base, but has been slightly modified. <code>AutoNumeric.format('12345.21', { options1 }, { options2 });</code> <code>format</code> Idem above, using multiple option objects in one array. This way allows for using a pre-defined option name. <code>AutoNumeric.format('12345.21', [{ options1 }, 'euroPos', { options2 }]);</code> <code>format</code> Format the <code>domElement</code> <code>value</code> (or <code>textContent</code>) with the given options and returns the formatted value as a string. This does not update that element value. <code>AutoNumeric.format(domElement, { options });</code> <code>localize</code> Unformat and localize the given formatted string with the given options. This returns a string. <code>AutoNumeric.localize('1.234,56 \u20ac', { options });</code> <code>localize</code> Idem as above, but return the localized DOM element value. This does not update that element value. <code>AutoNumeric.localize(domElement, { options });</code> <code>unformat</code> Unformat the given formatted string with the given options. This returns a numeric string. <code>AutoNumeric.unformat('1.234,56 \u20ac', { options });</code> <code>unformat</code> Idem above, but you can pass as many option objects you want to this function, the latter overwriting the previous ones. This allows to correctly unformat currencies that have a predefined option as its base, but has been slightly modified. <code>AutoNumeric.unformat('241800,02\u202f\u20ac', AutoNumeric.getPredefinedOptions().French, { digitGroupSeparator: AutoNumeric.options.digitGroupSeparator.noSeparator });</code> <code>unformat</code> Idem above, using multiple option objects in one array. This way allows for using a pre-defined option name. <code>AutoNumeric.unformat('1.234,56 \u20ac', [{ options1 }, 'euroPos', { options2 }]);</code> <code>unformat</code> Unformat the <code>domElement</code> value with the given options and returns the unformatted numeric string. This does not update that element value. <code>AutoNumeric.unformat(domElement, { options });</code>"},{"location":"Documentation/static%20methods/#tests-and-miscellaneous","title":"Tests and miscellaneous","text":"Method Description Call example <code>areSettingsValid</code> Return <code>true</code> in the settings are valid <code>AutoNumeric.areSettingsValid({ options })</code> <code>isManagedByAutoNumeric</code> Return <code>true</code> if the given DOM element (or selector string) has an AutoNumeric object that manages it. <code>AutoNumeric.isManagedByAutoNumeric(domElement);</code><code>AutoNumeric.isManagedByAutoNumeric('#theInput');</code> <code>mergeOptions</code> Accepts an array of option objects and / or pre-defined option names, and return a single option object where the latter element overwrite the settings from the previous ones <code>AutoNumeric.mergeOptions(['euro', { currencySymbol: '#' }]);</code> <code>test</code> Test if the given DOM element (or selector string) is already managed by AutoNumeric (if it is initialized) <code>AutoNumeric.test(domElement);</code><code>AutoNumeric.test('#theInput');</code> <code>validate</code> Check if the given option object is valid, and that each option is valid as well. This throws an error if it's not. <code>AutoNumeric.validate({ options })</code> <code>version</code> Return the current AutoNumeric version number (for debugging purpose) <code>AutoNumeric.version();</code>"},{"location":"Documentation/support/","title":"Support","text":""},{"location":"Documentation/support/#autonumeric-website","title":"AutoNumeric website","text":"<p>You can check the AutoNumeric official website which contains additional tools and examples.</p>"},{"location":"Documentation/support/#questions","title":"Questions","text":"<p>For questions and support please use the Gitter chat room or IRC on Libera Chat #autoNumeric.</p> <p>The issue list of the Github repository is exclusively for bug reports and feature requests.</p>"},{"location":"Documentation/support/#support","title":"Support","text":"<p>Feel free to donate via Patreon  to support autoNumeric development.</p>"},{"location":"Documentation/updating%20options/","title":"Updating existing options","text":"<p>Options can be added and/or modified after the initialization has been done.</p>"},{"location":"Documentation/updating%20options/#adding-or-modifing-options","title":"Adding or modifing options","text":"<p>Either by passing an option object that contains multiple options, <pre><code>anElement.update({ moreOptions });\nanElement.update(AutoNumeric.getPredefinedOptions().NorthAmerican); // Update the settings (and immediately reformat the element accordingly)\n</code></pre></p> <p>...by passing multiple option objects, the latter overwriting the settings from the former ones, <pre><code>anElement.update({ moreOptions1 }, { moreOptions2 }, 'euro');\n// or in a single array\nanElement.update([{ moreOptions1 }, { moreOptions2 }, 'euro']);\n</code></pre></p> <p>...or by changing the options one by one (or by calling a pre-defined option object). <pre><code>anElement.options.minimumValue('12343567.89');\nanElement.options.allowDecimalPadding(false);\n</code></pre></p> <p>Info</p> <p>Each option can be accessed as a function to update its value, ie. <code>anElement.options.&lt;optionName&gt;()</code>, where <code>&lt;optionName&gt;</code> can be any option name from the options list.</p> <p>Hint</p> <p>As soon as the options are modified, the AutoNumeric-managed input content is re-formatted accordingly.</p>"},{"location":"Documentation/updating%20options/#updating-the-options-for-multiple-elements","title":"Updating the options for multiple elements","text":"<p>If you've initialized your input with <code>AutoNumeric.multiple()</code>, you can use the returned Array1 to update all the AutoNumeric objects at once: <pre><code>// AutoNumeric initialisation for multiple elements\nconst anElements = new AutoNumeric.multiple('.numeric', 42, ['French']);\n// Update the options globally for all the inputs with one function call:\n// Modify only a specific element in the array\nanElements[2].update({ decimalPlaces: 3 });\n// or modify all the elements at once\nanElements.forEach(a =&gt; a.update({ currencySymbol: '#' })); // or .set(), etc.\n</code></pre></p>"},{"location":"Documentation/updating%20options/#resetting-options","title":"Resetting options","text":"<p>At any point, you can reset the options by calling the <code>options.reset()</code> method. This effectively drop any previous options you could have set, then load back the default settings. Reset the options to their default settings<pre><code>anElement.options.reset();\n</code></pre></p> <p>Lastly, the option object can be accessed directly, thus allowing to query each options globally too.This allows to inspect the current options used. Access the current options as an object<pre><code>anElement.getSettings(); // Return the options object containing all the current AutoNumeric settings in effect\n</code></pre></p> <ol> <li> <p>The <code>AutoNumeric.multiple()</code> function will always return an <code>Array</code>, even if there is only one element selected.\u00a0\u21a9</p> </li> </ol>"},{"location":"Old%20documentation/deprecated%20documentation/","title":"Deprecated documentation","text":"<p>The old and outdated documentation for the deprecated <code>v1.9</code> and <code>v2</code> versions can be found in the v1.9 documentation and v2 documentation files.</p> <p>For some examples and an option code generator for the old <code>v1.9.*</code> version, take a look here.</p>"},{"location":"Old%20documentation/v1.9%20documentation/","title":"v1.9 documentation","text":""},{"location":"Old%20documentation/v1.9%20documentation/#documentation-for-v19-deprecated","title":"Documentation for v1.9 ( DEPRECATED)","text":"<p>Disclaimer 1: <code>v1.9</code> has been superseeded by <code>v4.*</code> and is not longer supported. Please consider switching to the latest version.</p> <p>Disclaimer 2: This documentation may be outdated.Please consider using the Readme that always has up-to-date information.</p>"},{"location":"Old%20documentation/v1.9%20documentation/#changing-the-defaults-options","title":"Changing the defaults options","text":"<p>The complete list of options are below</p> <p>There are multiple ways for changing the options. To format \"123456789.00\" to \"\u20ac 123.456.789,00\" you could do the following:</p> <p>options - pass when initializing autoNumeric <pre><code>$(document).ready(function(){\n$(selector).autoNumeric(\"init\", {\ndigitGroupSeparator: '.',\ndecimalCharacter: ',', currencySymbol: '\u20ac '\n});\n});\n</code></pre></p> <p>HTML5 data - *By convention the data attribute is written in lower-case. Compound words (example: \"decimalCharacter\") need to be split and separated by a dash. The equal sign separates the name and value. The value should be enclosed with quote marks. If multiple options are being used they each need to have the own data attribute.</p> <pre><code>&lt;input type='text' name=\"someName\" value=\"1234.56\" data-a-sep=\".\" data-a-dec=\",\" data-a-sign=\"\u20ac \"/&gt;\n</code></pre> <p>$.extend method - in this example ASP.NET current culture settings are passed.</p> <p>note: - this can change defaults globally</p> <p><pre><code>&lt;script type=\"text/javascript\"&gt;  $(document).ready(function() {          $.extend($.fn.autoNumeric.defaults, {              digitGroupSeparator: '@System.Threading.Thread.CurrentThread.CurrentCulture.NumberFormat.NumberGroupSeparator',              decimalCharacter: '@System.Threading.Thread.CurrentThread.CurrentCulture.NumberFormat.NumberDecimalSeparator',\ncurrencySymbol: '@System.Threading.Thread.CurrentThread.CurrentCulture.NumberFormat.CurrencySymbol'\n});      $('selector').autoNumeric('init'); });\n&lt;/script&gt;\n</code></pre> Callback function - this example changes the number of decimal places.</p> <pre><code> &lt;script type=\"text/javascript\"&gt;\n/* the callback function must be defined prior to initiating autoNumeric */ var functionName = function() {\n/* your code here */  var value = 4; /* example only */\nreturn value; }\n/* initiates autoNumeric and passes a function */  $('selector').autoNumeric('init', { decimalPlaces: functionName }) </code></pre>"},{"location":"Old%20documentation/v1.9%20documentation/#values-locale-formats-that-autonumeric-can-properly-handle-as-a-numeric-value","title":"Values - locale formats that autoNumeric can properly handle as a numeric value","text":"<p>By default autoNumeric formats the default values on page ready. The values should be sent as text. autoNumeric supports the use on locale formats with the following rules:</p> <ul> <li>Numeric values should be send as text</li> <li>The first comma or period will be considered the decimal character</li> <li>Any additional commas or periods will cause an error to be thrown</li> <li>The sign (minus only) can be proceeding or trailing</li> <li>Currency symbols or other non-numeric characters will throw an error</li> <li>Quick visual guide:</li> </ul> value / text valid? \"123456\" true \"123456.78\" true \"123456,78\" true \"-123456\" true \"-123456.78\" true \"-123456,78\" true \"123456-\" true \"123456.78-\" true \"123456,78-\" true \"123,456.78\" false \"123.456.78\" false \"-123456.78-\" false \"\u20ac 123456.78\" false \"2.034E23\" false <p>Default values and values being \"set\" need to fall with the min/max range.</p> <p>If you do not want the default values formatted on set the option from \"formatOnPageLoad: true\" to \"formatOnPageLoad: false\" </p>"},{"location":"Old%20documentation/v1.9%20documentation/#aspnet-default-value-and-post-back","title":"ASP.NET default value and post-back","text":"<p>During page load / re-load autoNumeric compares the value of the input \"$this[0].value\" and the \"$this.prop('defaultValue')\" value. If they are equal and \"formatOnPageLoad: true\" the value is formatted.</p> <p>What happens during ASP.NET form post-back is the input tag is re-rendered. An example Page loaded </p> <pre><code>&lt;input type='text' name=\"someName\"  id=\"someID\" class='someClass' value=\"\" /&gt;\n// user enters \"1234.56\" =&gt; \"1,234.56\" with default settings\n// during post-back the input is re-rendered and is now showing the new default value. \n\n&lt;input type='text' name=\"someName\"  id=\"someID\" class='someClass' value=\"1,234.56\" /&gt;\n</code></pre> <p>Once the page is reloaded on post-back and autoNumeric compares $this[0].value\" and the \"$this.prop('defaultValue')\" and sees they are equal it attenpts to format the values. From the above valid value table the \"1,234.56\" would be invalid. </p> <p>There are two options that can handle the postback event \"formatOnPageLoad\" &amp; \"defaultValueOverride\":</p> <p>1) \"formatOnPageLoad option\" - this option controls if default values are formatted on page load. By default it is set to \"formatOnPageLoad: true\"</p> <p>Change the \"formatOnPageLoad\" option to \"formatOnPageLoad: false\" - this can be done when initalizing \"init\" the element as an option or as HTML5 data attribute</p> <p>If there are no default value(vs) simply initialize 'init' the element </p> <p><pre><code>$('selector').autoNumeric('init', {formatOnPageLoad: false});    </code></pre> If there is a default value you will need to pre-format the default value as shown  <pre><code>&lt;!-- it is important that a preformatted default values match the options/settings.\n      mismatches could cause errors --&gt;\n&lt;input type='text' name=\"someName\" value=\"1,234.56\"/&gt;\n</code></pre></p> <p>2) \"defaultValueOverride\" option was created to help ASP.NET postabck and is used if \"formatOnPageLoad: true\" is set 'true'.</p> <p>Note: \"defaultValueOverride\" option should be the same value as the default value</p> <pre><code>&lt;input type='text' name=\"someName\" value=\"1234.56\"/&gt;\n</code></pre> <p><pre><code>// 'defaultValueOverride' is the value of the default value above \n$('selector').autoNumeric('init', {defaultValueOverride: \"1234.56\"});       </code></pre> Please note that \"formatOnPageLoad\" and \"defaultValueOverride\" can be set by either {options} or HTML5 data attribute</p>"},{"location":"Old%20documentation/v1.9%20documentation/#min-max-settings-and-decimal-places","title":"Min / Max settings and decimal places","text":"<p>The minimum and maximum values and decimal places are set via minimumValue: '-9999999999999.99' and maximumValue: '9999999999999.99' option. The decimal places are determined be the number of characters following the \".\" decimal point.  </p> minimumValue: maximumValue: decimal places \"0\" \"9999999999\" 0 \"0.00\" \"99999999.99\" 2 \"0.00\" \"9999999999\" 2 \"-9999999\" \"9999999.999\" 3 <p>Notes: - minimumValue should always be a lower value than maximumValue! - minimumValue and maximumValue can be both positive or negative but do so with caution. - If the range of the minimumValue &amp; maximumValue is small or you make them numbers other then \"9\" nines (example \"1000) you could create a situation where the uses will need to delete characters before the can obtain the minimumValue / maximumValue limits. </p> <p>Additional documentation for <code>v1.9</code> can be found on the old website.</p>"},{"location":"Old%20documentation/v2.0%20documentation/","title":"v2.0 documentation","text":""},{"location":"Old%20documentation/v2.0%20documentation/#documentation-for-v2-deprecated","title":"Documentation for v2 ( DEPRECATED)","text":"<p>Disclaimer 1: <code>v1.9</code> has been superseeded by <code>v4.*</code> and is not longer supported. Please consider switching to the latest version.</p> <p>Disclaimer 2: This documentation may be outdated.Please consider using the Readme that always has up-to-date information.</p>"},{"location":"Old%20documentation/v2.0%20documentation/#list-of-methods-and-settings","title":"List of methods and settings","text":"<p>The following is an uncomplete list of the methods and settings/options that control autoNumeric <code>2.0.*</code>:</p> <code>'init'</code> initializes autoNumeric Must be run before other methods can be called  <ul> <li><code>$('someSelector').autoNumeric();</code></li> <li><code>$('someSelector').autoNumeric('init');</code></li> <li><code>$('someSelector').autoNumeric({options});</code></li> <li><code>$('someSelector').autoNumeric('init', {options});</code></li> </ul> <code>'destroy'</code> stops autoNumeric and removes jQuery data <ul> <li><code>$('someSelector').autoNumeric('destroy');</code></li> </ul> <code>'wipe'</code> removes session storage and cookies from memory - only needed if the 'aStor' option is true -   <code>$(someSelector).autoNumeric('wipe');</code> <code>'update'</code> updates autoNumeric's settings <ul> <li><code>$('someSelector').autoNumeric('update', {options});</code></li> <li>Can be run multiple times</li> <li>Overrides the default settings and HTML5 data</li> </ul> <code>'set'</code> returns a formatted string via jQuery's \".val()\" or \".text' methods to the selected tag(s) <ul> <li><code>$('someSelector').autoNumeric('set', value);</code> // see </li> </ul> <code>'unSet'</code> method to un-format inputs - handy to use right before form submission <ul> <li><code>$(someSelector).autoNumeric('unSet');</code> // returns \"nnnn.nn\" or \"-nnnn.nn\"</li> <li><code>$(someSelector).autoNumeric('unSet', '.-');</code> // returns \"nnnn.nn\" or \"nnnn.nn-\"  // trailing negative sign</li> <li><code>$(someSelector).autoNumeric('unSet', ',');</code> // returns \"nnnn,nn\" or \"-nnnn,nn\"  // comma as decimal seperator</li> <li><code>$(someSelector).autoNumeric('unSet', ',-');</code> // returns \"nnnn,nn\" or \"nnnn,nn-\" // comma as decimal separator &amp; trailing negative sign</li> </ul> <code>'reSet'</code> method to re-format inputs - handy to use right after form submission <ul> <li><code>$(someSelector).autoNumeric('reSet');</code></li> </ul> <code>'get'</code> allows you to easily remove the formatting from a string on a autoNumeric controlled element and returns a string <ul> <li><code>$(someSelector).autoNumeric('get');</code> // returns \"nnnn.nn\" or \"-nnnn.nn\"</li> <li><code>$(someSelector).autoNumeric('get', '.-');</code> // returns \"nnnn.nn\" or \"nnnn.nn-\" // trailing negative sign</li> <li><code>$(someSelector).autoNumeric('get', ',');</code> // returns \"nnnn,nn\" or \"-nnnn,nn\" // comma as decimal seperator</li> <li><code>$(someSelector).autoNumeric('get', ',-');</code> // returns \"nnnn,nn\" or \"nnnn,nn-\" // comma as decimal separator &amp; trailing negative sign</li> </ul> <code>'getString'</code> this basically uses jQuery's .serialize() method which creates a text string (URL-encoded notation) from a set of form elements that is ready for submission. The extra step taken here is the string is split and iterated through and the formatted values are replaced with unformatted values. The string is then joined back together and returned <ul> <li><code>$(someSelector).autoNumeric('getString');</code> // returns \"nnnn.nn\" or \"-nnnn.nn\"</li> <li><code>$(someSelector).autoNumeric('getString', '.-');</code> // returns \"nnnn.nn\" or \"nnnn.nn-\" // trailing negative sign</li> <li><code>$(someSelector).autoNumeric('getString', ',');</code> // returns \"nnnn,nn\" or \"-nnnn,nn\" // comma as decimal seperator</li> <li><code>$(someSelector).autoNumeric('getString', ',-');</code> // returns \"nnnn,nn\" or \"nnnn,nn-\" // comma as decimal separator &amp; trailing negative sign</li> </ul> <code>'getArray'</code> this basically uses jQuery's .serializeArray() method which returns a JavaScript array of objects, ready to be encoded as a JSON string. Again autoNumeric iterated through the array object and replaces the formatted values with unformatted values. <ul> <li><code>$(someSelector).autoNumeric('getArray');</code> // returns \"nnnn.nn\" or \"-nnnn.nn\"</li> <li><code>$(someSelector).autoNumeric('getArray', '.-');</code> // returns \"nnnn.nn\" or \"nnnn.nn-\" // trailing negative sign</li> <li><code>$(someSelector).autoNumeric('getArray', ',');</code> // returns \"nnnn,nn\" or \"-nnnn,nn\" // comma as decimal seperator</li> <li><code>$(someSelector).autoNumeric('getArray', ',-');</code> // returns \"nnnn,nn\" or \"nnnn,nn-\" // comma as decimal separator &amp; trailing negative sign</li> </ul> <code>'getSettings'</code> this returns an object that shows the autoNumeric settings for the field. You may find this helpful when developing a page <ul> <li><code>$('someSelector').autoNumeric('getSettings');</code> // returns the jQuery data opbect with settings </li> <li><code>$('someSelector').autoNumeric('getSettings').decimalCharacter;</code> // returns the 'decimalCharacter' value</li> <li>any individual setting can be returned by replacing <code>decimalCharacter</code> with the desired settings / option name</li> </ul> <p>For more examples, documentation and the option code generator please take a look at http://www.decorplanit.com/plugin/.</p>"},{"location":"Old%20documentation/v2.0%20documentation/#new-method-for-formatting-and-unformatting-fields","title":"New method for formatting and unformatting fields","text":"<p>Additionally, autoNumeric now supports formatting and unformatting directly without having to first initiate a DOM element :</p> <code>'autoUnformat'</code> this returns an Number given the formatted string and the autoNumeric options passed as arguments <p>For instance, to unformat, you would use : <pre><code>let autoNumericOptions = { digitGroupSeparator: '.', decimalCharacter: ',', decimalCharacterAlternative: '.', currencySymbol: ' \u20ac', currencySymbolPlacement: 's', roundingMethod: 'U' };\nlet formattedString = \"1.234,56 \u20ac\";\n$.fn.autoUnformat(formattedString, autoNumericOptions); // Returns 1234.56\n</code></pre></p> <code>'autoFormat'</code> this returns a formatted string given a Number and the autoNumeric options passed as arguments <p>For instance, to format, you would use : <pre><code>let autoNumericOptions = { digitGroupSeparator: '.', decimalCharacter: ',', decimalCharacterAlternative: '.', currencySymbol: ' \u20ac', currencySymbolPlacement: 's', roundingMethod: 'U' };\nlet number = 1234.56;\n$.fn.autoFormat(number, autoNumericOptions); // Returns \"1.234,56 \u20ac\"\n</code></pre></p>"},{"location":"Old%20documentation/v2.0%20documentation/#default-settings-supported-options","title":"Default settings &amp; supported options","text":"<p>visit autoNumeric's home page for an easy to use settings and option code generator </p> <p>Disclaimer : This may be outdated. Please refer to the Readme or directly in the detailed comments in the source code for the <code>defaultSettings</code> object.</p>"},{"location":"Old%20documentation/v2.0%20documentation/#digitgroupseparator","title":"digitGroupSeparator","text":"<p>controls the thousand separator character -   digitGroupSeparator: ','      // Comma -   digitGroupSeparator: '.'      // Dot -   digitGroupSeparator: ' '      // Normal space -   digitGroupSeparator: '\\u2009' // Thin-space -   digitGroupSeparator: '\\u202f' // Narrow no-break space -   digitGroupSeparator: '\\u00a0' // No-break space -   digitGroupSeparator: ''       // No separator -   digitGroupSeparator: \"'\"      // Apostrophe -   digitGroupSeparator: '\u066c'      // Arabic thousands separator -   digitGroupSeparator: '\u02d9'      // Dot above</p>"},{"location":"Old%20documentation/v2.0%20documentation/#showonlynumbersonfocus","title":"showOnlyNumbersOnFocus","text":"<p>When true only numbers and the decimal character is visible while the input has focus -   showOnlyNumbersOnFocus: false (default) -   showOnlyNumbersOnFocus: true    removes currency sign and thousand seperator while the input has focus. Help on some mobile devices </p>"},{"location":"Old%20documentation/v2.0%20documentation/#digitalgroupspacing","title":"digitalGroupSpacing","text":"<p>controls the digital grouping and the placement of the thousand separator -   digitalGroupSpacing: '3'     produces 333,333,333   (default) -   digitalGroupSpacing: '2'     produces 22,22,22,333 India's Lakhs -   digitalGroupSpacing: '2s' produces 22,333,22,22,333 scaled version of India Lakhs -   digitalGroupSpacing: '4'     produces 4,4444,4444 used in some Asian country's</p>"},{"location":"Old%20documentation/v2.0%20documentation/#decimalcharacter","title":"decimalCharacter","text":"<p>controls the decimal character -   decimalCharacter: ',' // Comma -   decimalCharacter: '.' // Dot -   decimalCharacter: '\u00b7' // Middle-dot -   decimalCharacter: '\u066b' // Arabic decimal separator -   decimalCharacter: '\u2396' // Decimal separator key symbol</p>"},{"location":"Old%20documentation/v2.0%20documentation/#decimalcharacteralternative","title":"decimalCharacterAlternative","text":"<p>this was developed to accommodate for different keyboard layouts. decimalCharacterAlternative allows you to declare an alternative key to enter the decimal separator assigned in decimalCharacter -   decimalCharacterAlternative: null   (default)</p>"},{"location":"Old%20documentation/v2.0%20documentation/#currencysymbol","title":"currencySymbol","text":"<p>displays the desired currency symbol (examples: \u20ac or EUR). Note: other symbols can be used, such as %, \u00b0C, \u00b0F, km/h &amp; MPH the possibilities are endless -   currencySymbol: ''  none   (default) -   examples:   currencySymbol: 'U$D' or currencySymbol: 'EUR' </p>"},{"location":"Old%20documentation/v2.0%20documentation/#currencysymbolplacement","title":"currencySymbolPlacement","text":"<p>controls the placement of the currency symbol (prefix or suffix) -   currencySymbolPlacement: 'p'    prefix to the left   (default) -   currencySymbolPlacement: 's'    suffix to the right</p>"},{"location":"Old%20documentation/v2.0%20documentation/#negativepositivesignplacement","title":"negativePositiveSignPlacement","text":"<p>placement of the negative sign. This position is relative to the currencySymbol position  -  negativePositiveSignPlacement: 'l'  (default) left of currency sign  -  negativePositiveSignPlacement: 'r'  right of currency sign  -  negativePositiveSignPlacement: 's'  suffix places the sign to the right of the numbers  -  negativePositiveSignPlacement: 'p'  prefix places the sign(-) to the felt of the numbers  -  Examples:</p> format options to achieve format -1,234.56 defaults 1,234.56- {negativePositiveSignPlacement: 's'} -$1,234.56 {currencySymbol: '$'} $-1,234.56 {currencySymbol: '$', negativePositiveSignPlacement: 'r'} $1,234.56- {currencySymbol: '$', negativePositiveSignPlacement: 's'} 1,234.56-$ {currencySymbol: '$', currencySymbolPlacement: 's'} 1,234.56$- {currencySymbol: '$', currencySymbolPlacement: 's', negativePositiveSignPlacement: 'r'} -1,234.56$ {currencySymbol: '$', currencySymbolPlacement: 's', negativePositiveSignPlacement: 'p'}"},{"location":"Old%20documentation/v2.0%20documentation/#suffixtext","title":"suffixText","text":"<p>Allows additional text as a suffix -   suffixText: ''      (default) no suffix defined -   suffixText: 'test' example: 123,4.56 test -   Numbers and minus sign (-) are not allowed and will cause an error</p>"},{"location":"Old%20documentation/v2.0%20documentation/#minimumvalue","title":"minimumValue","text":"<p>controls the minimum value allowed -   minimumValue: '-9999999999999.99'   (default) -   Must be set as text -   Can be negative or positive but must be less than 'maximumValue'</p>"},{"location":"Old%20documentation/v2.0%20documentation/#maximumvalue","title":"maximumValue","text":"<p>controls the maximum value allowed -   maximumValue: '9999999999999.99'   (default) -   Must be set as text -   Can be positive or negative but must be greater than 'minimumValue'</p> <p>Note: setting the minimumValue and maximumValue to both positive or negative with situations that limits the users ability to enter the proper values </p>"},{"location":"Old%20documentation/v2.0%20documentation/#decimalplacesoverride","title":"decimalPlacesOverride","text":"<p>Note: This has been deprecated in <code>v4</code> overrides the decimal places that that are set via the minimumValue/maximumValue values -   decimalPlacesOverride: null  (default method)  -   decimalPlacesOverride: '4'  overides the default and allows 4 decimal places</p>"},{"location":"Old%20documentation/v2.0%20documentation/#roundingmethod","title":"roundingMethod","text":"<p>sets the rounding method used (12 different available - case sensitive)</p> option Rounding method 'S' Round-Half-Up Symmetric (default) 'A' Round-Half-Up Asymmetric 's' Round-Half-Down Symmetric (lower case s) 'a' Round-Half-Down Asymmetric (lower case a) 'B' Round-Half-Even \"Bankers Rounding\" 'U' Round Up \"Round-Away-From-Zero\" 'D' Round Down \"Round-Toward-Zero\" - same as truncate 'C' Round to Ceiling \"Toward Positive Infinity\" 'F' Round to Floor \"Toward Negative Infinity\" 'N05' Rounding \"to the nearest .00 or .05\" 'U05' Rounds up to next .00 or .05 'D05' Rounds down to next .00 or .05"},{"location":"Old%20documentation/v2.0%20documentation/#allowdecimalpadding","title":"allowDecimalPadding","text":"<p>controls padding of the decimal places -   allowDecimalPadding: true       always pads the decimal with zeros (default) -   allowDecimalPadding: false      no padding</p>"},{"location":"Old%20documentation/v2.0%20documentation/#negativebracketstypeonblur","title":"negativeBracketsTypeOnBlur","text":"<p>controls if negative values are display with brackets when the input does not have focus -   negativeBracketsTypeOnBlur: null     no brackets use for negative values (default) -   negativeBracketsTypeOnBlur: '(,)' -   negativeBracketsTypeOnBlur: '[,]' -   negativeBracketsTypeOnBlur: '{,}' -   negativeBracketsTypeOnBlur: '&lt;,&gt;'</p>"},{"location":"Old%20documentation/v2.0%20documentation/#emptyinputbehavior","title":"emptyInputBehavior","text":"<p>controls input currency sign display behavior when the input does not have a value '' -   emptyInputBehavior: 'focus'     (default) the currency symbol will be displayed on focus -   emptyInputBehavior: 'press'     currency symbol will not be displayed until the first key is pressed -   emptyInputBehavior: 'always'    currency symbol is always displayed with or without a value</p>"},{"location":"Old%20documentation/v2.0%20documentation/#leadingzero","title":"leadingZero","text":"<p>controls leading zeros behavior -   leadingZero: 'allow'    allows leading zero to be entered. They are removed on focusout event (default) -   leadingZero: 'deny' leading zeros not allowed. -   leadingZero: 'keep' leading zeros allowed and will be retained on the focusout event</p>"},{"location":"Old%20documentation/v2.0%20documentation/#selectnumberonly","title":"selectNumberOnly","text":"<p>controls the 'alt' &amp; 'a' select key combination -   selectNumberOnly: false (default) selects all characters within the input -   selectNumberOnly: true  selects only the numbers -   note: if the currency symbol is between the numeric value and the negative sign only the numeric characters will be selected</p>"},{"location":"Old%20documentation/v2.0%20documentation/#formatonpageload","title":"formatOnPageLoad","text":"<p>controls if default values are formatted on page ready (load) -   formatOnPageLoad: true      default values are formatted on page ready (default) -   formatOnPageLoad: false default values are NOT formatted on page ready</p>"},{"location":"Old%20documentation/v2.0%20documentation/#defaultvalueoverride","title":"defaultValueOverride","text":"<p>helper option for ASP.NET post-back -   should be the value of the un-formatted default value -   this can be set as an option when initializing autoNumeric or as HTML5 data -   examples: -   no default value='' {defaultValueOverride: ''} -   value=1234.56 {defaultValueOverride: '1234.56'}</p>"},{"location":"Old%20documentation/v2.0%20documentation/#unformatonsubmit","title":"unformatOnSubmit","text":"<p>removes the format on the submit event -   unformatOnSubmit: false (default) does not remove the formatting -   unformatOnSubmit: true - removes the formatting on the submit event -   this can be done globally via the extend method or by elemnt via the jQuery selector -   output is always \"nnnn.nn\" or negative \"-nnnn.nn\". n = 0-9 </p>"},{"location":"Old%20documentation/v2.0%20documentation/#showwarnings","title":"showWarnings","text":"<p>error handling function -   showWarnings: true - (default) throws errors - helpful during developing. -   showWarnings: false - stops most errors from being thrown.</p>"}]}